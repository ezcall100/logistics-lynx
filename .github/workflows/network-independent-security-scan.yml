name: 🔒 Network-Independent Security Scan

on:
  workflow_call:
    inputs:
      scan-type:
        description: 'Type of security scan to run'
        required: true
        type: string
        default: 'local'
      fail-on-severity:
        description: 'Minimum severity level to fail the workflow'
        required: false
        default: 'high'
        type: string
      timeout-minutes:
        description: 'Timeout for the entire scan'
        required: false
        default: 30
        type: number
      include-dependencies:
        description: 'Include dependency scanning'
        required: false
        default: true
        type: boolean
      include-secrets:
        description: 'Include secrets scanning'
        required: false
        default: true
        type: boolean
      include-sast:
        description: 'Include SAST scanning'
        required: false
        default: false
        type: boolean
    secrets:
      NPM_TOKEN:
        required: false
      SUPABASE_ACCESS_TOKEN:
        required: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

jobs:
  local-security-scan:
    name: 🔍 Local Security Scan (${{ inputs.scan-type }})
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    concurrency:
      group: local-security-scan-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: 🌐 Network Status Check
        run: |
          echo "🔍 Checking network connectivity..."
          echo "Testing basic connectivity..."
          
          # Test DNS resolution
          if nslookup github.com >/dev/null 2>&1; then
            echo "✅ DNS resolution working"
          else
            echo "⚠️  DNS resolution issues detected"
          fi
          
          # Test HTTPS connectivity
          if curl -I https://github.com >/dev/null 2>&1; then
            echo "✅ HTTPS connectivity working"
          else
            echo "⚠️  HTTPS connectivity issues detected"
          fi
          
          echo "Network status check completed"

      - name: 📦 Checkout Repository (with fallback)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 📦 Fallback Checkout (if needed)
        if: failure()
        run: |
          echo "🔄 Attempting fallback checkout method..."
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch --depth=1 origin ${{ github.ref_name }}
          git checkout FETCH_HEAD
        continue-on-error: true

      - name: 🛡️ Setup Local Security Tools
        run: |
          echo "🔧 Setting up local security scanning environment..."
          echo "Scan type: ${{ inputs.scan-type }}"
          echo "Fail on severity: ${{ inputs.fail-on-severity }}"
          echo "Timeout: ${{ inputs.timeout-minutes }} minutes"
          
          # Install basic security tools locally
          if [[ "${{ inputs.include-secrets }}" == "true" ]]; then
            echo "📥 Installing gitleaks..."
            curl -sSfL https://raw.githubusercontent.com/zricethezav/gitleaks/master/install.sh | sh -s -- -b /usr/local/bin v8.18.0 || echo "⚠️  Gitleaks installation failed"
          fi
          
          # Install additional tools
          apt-get update -qq || echo "⚠️  Package update failed"
          apt-get install -y jq curl wget || echo "⚠️  Tool installation failed"

      - name: 🔐 Local Secrets Detection
        if: ${{ inputs.include-secrets == 'true' }}
        run: |
          echo "🔍 Running local secrets detection..."
          
          if command -v gitleaks >/dev/null 2>&1; then
            gitleaks detect \
              --source . \
              --report-format json \
              --report-path gitleaks-report.json \
              --exit-code 0 \
              --verbose || echo "⚠️  Gitleaks scan failed"
          else
            echo "⚠️  Gitleaks not available, using basic pattern matching..."
            # Basic pattern matching for common secrets
            find . -type f -name "*.js" -o -name "*.ts" -o -name "*.json" -o -name "*.env*" | xargs grep -l -E "(api_key|secret|password|token)" > potential-secrets.txt || true
            echo "Basic pattern scan completed"
          fi
          
          # Check if any secrets were found
          if [ -s gitleaks-report.json ]; then
            echo "⚠️  Secrets detected! Review the report:"
            cat gitleaks-report.json | jq -r '.findings[] | "\(.rule) in \(.file):\(.startLine)"' || true
            if [[ "${{ inputs.fail-on-severity }}" == "low" ]]; then
              exit 1
            fi
          else
            echo "✅ No secrets detected"
          fi

      - name: 📦 Local Dependency Scan
        if: ${{ inputs.include-dependencies == 'true' }}
        run: |
          echo "📦 Scanning dependencies locally..."
          
          # Check for package files
          if [ -f "package.json" ]; then
            echo "📋 Found package.json, running local audit..."
            npm audit --audit-level=${{ inputs.fail-on-severity }} --json > npm-audit.json || echo "⚠️  NPM audit failed"
            
            # Parse and report findings
            if [ -s npm-audit.json ]; then
              echo "📊 NPM Audit Results:"
              jq -r '.vulnerabilities | to_entries[] | "\(.key): \(.value.severity) - \(.value.title)"' npm-audit.json || true
            fi
          fi
          
          if [ -f "bun.lockb" ]; then
            echo "📋 Found bun.lockb, running bun audit..."
            bun audit --json > bun-audit.json || echo "⚠️  Bun audit failed"
          fi

      - name: 📊 Generate Local Security Report
        run: |
          echo "📊 Generating local security report..."
          
          # Create summary report
          cat << EOF > local-security-report.md
          # Local Security Scan Report
          
          **Scan Type:** ${{ inputs.scan-type }}
          **Timestamp:** $(date -Is)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Network Status:** Local scan (limited connectivity)
          
          ## Scan Summary
          
          - ✅ Local security tools configured
          - $([ "${{ inputs.include-secrets }}" == "true" ] && echo "✅ Local secrets detection completed" || echo "⏭️ Secrets detection skipped")
          - $([ "${{ inputs.include-dependencies }}" == "true" ] && echo "✅ Local dependency scan completed" || echo "⏭️ Dependency scan skipped")
          - $([ "${{ inputs.include-sast }}" == "true" ] && echo "⏭️ SAST analysis skipped (requires network)" || echo "⏭️ SAST analysis skipped")
          
          ## Network Status
          
          This scan was performed with limited network connectivity.
          Some features may have been disabled or used fallback methods.
          
          ## Next Steps
          
          1. Review any findings in the logs above
          2. Address high/critical severity issues
          3. Re-run full scan when network connectivity is restored
          
          EOF
          
          echo "📄 Local security report generated: local-security-report.md"

      - name: 🚨 Local Security Check Summary
        run: |
          echo "🔒 Local security scan completed!"
          echo "📋 Scan type: ${{ inputs.scan-type }}"
          echo "🎯 Fail threshold: ${{ inputs.fail-on-severity }}"
          echo "⏱️ Duration: $(($SECONDS / 60)) minutes"
          echo "🌐 Network mode: Limited connectivity"
          
          # Check for any critical findings that should fail the build
          if [[ "${{ inputs.fail-on-severity }}" == "critical" ]] && [ -s gitleaks-report.json ]; then
            echo "🚨 Critical secrets detected - failing build"
            exit 1
          fi
          
          echo "✅ Local security checks completed within configured thresholds"
