# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: disableContextAccess: true
# yaml-language-server: disableDefaultProperties: true
# yaml-language-server: disableAdditionalProperties: true
# yaml-language-server: validate: false
# yaml-language-server: disableSchemaValidation: true

# Autonomous TMS: test → build → deploy → monitor
name: 🚀 Autonomous Deploy

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch:
    inputs:
      env_name:
        description: "Target environment name"
        type: choice
        options: [production, staging]
        default: production
        required: false
      app_url:
        description: "Public app URL"
        type: string
        default: "https://app.example.com"
        required: false
      n8n_enabled:
        description: "Enable n8n integration"
        type: boolean
        default: false
        required: false
      n8n_base_url:
        description: "n8n base URL (if enabled)"
        type: string
        default: ""
        required: false
      deployment_webhook_url:
        description: "Webhook URL to notify after deploy (optional)"
        type: string
        default: ""
        required: false

permissions:
  contents: read
  actions: read

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI: "true"
  NPM_CONFIG_FUND: "false"
  NPM_CONFIG_AUDIT: "false"

defaults:
  run:
    shell: bash

# 1) Normalize and expose config as job outputs once
jobs:
  config:
    name: 🔧 Resolve Config
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.cfg.outputs.env_name }}
      app_url: ${{ steps.cfg.outputs.app_url }}
      n8n_enabled: ${{ steps.cfg.outputs.n8n_enabled }}
      n8n_base_url: ${{ steps.cfg.outputs.n8n_base_url }}
      deployment_webhook_url: ${{ steps.cfg.outputs.deployment_webhook_url }}
      has_webhook: ${{ steps.cfg.outputs.has_webhook }}
    steps:
      - id: cfg
        env:
          IN_ENV_NAME: ${{ github.event.inputs.env_name }}
          IN_APP_URL: ${{ github.event.inputs.app_url }}
          IN_N8N_ENABLED: ${{ github.event.inputs.n8n_enabled }}
          IN_N8N_BASE_URL: ${{ github.event.inputs.n8n_base_url }}
          IN_DEPLOY_HOOK: ${{ github.event.inputs.deployment_webhook_url }}
        run: |
          set -euo pipefail

          # Pull from workflow_dispatch inputs when present; otherwise fall back to safe defaults
          ENV_NAME="${IN_ENV_NAME:-production}"
          APP_URL="${IN_APP_URL:-https://app.example.com}"
          N8N_ENABLED_RAW="${IN_N8N_ENABLED:-false}"
          N8N_BASE_URL="${IN_N8N_BASE_URL:-}"
          DEPLOYMENT_WEBHOOK_URL="${IN_DEPLOY_HOOK:-}"

          # Normalize boolean-ish input
          case "${N8N_ENABLED_RAW,,}" in true|1|yes|y) N8N_ENABLED=true ;; *) N8N_ENABLED=false ;; esac
          if [[ -n "$N8N_BASE_URL" ]]; then
            # If a base URL is provided, assume n8n is intended to be enabled (secrets still validated later)
            N8N_ENABLED=true
          fi

          # Expose as job outputs
          {
            echo "env_name=$ENV_NAME"
            echo "app_url=$APP_URL"
            echo "n8n_enabled=$N8N_ENABLED"
            echo "n8n_base_url=$N8N_BASE_URL"
            echo "deployment_webhook_url=$DEPLOYMENT_WEBHOOK_URL"
            echo "has_webhook=$([[ -n "$DEPLOYMENT_WEBHOOK_URL" ]] && echo true || echo false)"
          } >> "$GITHUB_OUTPUT"

  # 2) Test & build once, upload artifact
  test:
    name: 🧪 Test & 🏗️ Build
    runs-on: ubuntu-latest
    needs: config
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: 📦 Install
        run: npm ci

      - name: 🔍 Lint
        run: npm run lint:ci || echo "⚠️ Linting completed with warnings (non-blocking)"

      - name: 🧪 Test
        run: npm run test --if-present

      - name: 🏗️ Build
        env:
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: npm run build

      - name: 📦 Package build artifact
        run: |
          mkdir -p .artifact
          tar -czf .artifact/build.tar.gz dist/ package*.json node_modules/

      - name: ⬆️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: .artifact/build.tar.gz
          retention-days: 1

  # 3) Deploy from artifact, health-check, optional n8n trigger + webhook
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [config, test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    environment:
      name: ${{ needs.config.outputs.env_name }}
      url: ${{ needs.config.outputs.app_url }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Load secrets & validate
        id: secrets
        env:
          N8N_BASE_URL: ${{ needs.config.outputs.n8n_base_url }}
        run: |
          set -euo pipefail
          # Map secrets (use empty fallback; validation below)
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          N8N_API_KEY="${{ secrets.N8N_API_KEY }}"
          GOOGLE_MAPS_API_KEY="${{ secrets.GOOGLE_MAPS_API_KEY }}"

          # Mask sensitive
          [[ -n "${OPENAI_API_KEY:-}" ]] && echo "::add-mask::$OPENAI_API_KEY"
          [[ -n "${N8N_API_KEY:-}" ]] && echo "::add-mask::$N8N_API_KEY"
          [[ -n "${GOOGLE_MAPS_API_KEY:-}" ]] && echo "::add-mask::$GOOGLE_MAPS_API_KEY"

          # Hard-validate required deployment secrets
          [[ -n "${SUPABASE_URL:-}" ]] || { echo "❌ SUPABASE_URL missing"; exit 1; }
          [[ -n "${SUPABASE_ANON_KEY:-}" ]] || { echo "❌ SUPABASE_ANON_KEY missing"; exit 1; }
          [[ -n "${OPENAI_API_KEY:-}" ]] || { echo "❌ OPENAI_API_KEY missing"; exit 1; }
          [[ -n "${GOOGLE_MAPS_API_KEY:-}" ]] || { echo "❌ GOOGLE_MAPS_API_KEY missing"; exit 1; }

          # Export for later steps
          {
            echo "SUPABASE_URL=$SUPABASE_URL"
            echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY"
            echo "OPENAI_API_KEY=$OPENAI_API_KEY"
            echo "N8N_API_KEY=${N8N_API_KEY:-}"
            echo "N8N_BASE_URL=${N8N_BASE_URL:-}"
            echo "GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY"
            echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY"
          } >> "$GITHUB_ENV"

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ⬇️ Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .artifact

      - name: 📦 Expand artifact
        run: tar -xzf .artifact/build.tar.gz

      - name: 🚀 Deploy app
        run: npm run deploy:prod

      - name: 🏥 Health check
        run: npm run health:check

      - name: 🔔 Build payload (success)
        id: hook_ok
        if: ${{ success() && needs.config.outputs.has_webhook == 'true' }}
        run: |
          ts="$(date -u +%FT%TZ)"
          {
            echo 'payload<<EOF'
            echo "{\"status\":\"deployed\",\"timestamp\":\"$ts\",\"environment\":\"${{ needs.config.outputs.env_name }}\",\"commit\":\"${{ github.sha }}\",\"branch\":\"${{ github.ref_name }}\",\"run_id\":\"${{ github.run_id }}\"}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: 🔔 Notify webhook (success)
        if: ${{ success() && needs.config.outputs.has_webhook == 'true' }}
        run: |
          url='${{ needs.config.outputs.deployment_webhook_url }}'
          for i in 1 2 3; do
            curl -fsS -X POST "$url" -H "Content-Type: application/json" -d '${{ steps.hook_ok.outputs.payload }}' && break
            echo "retry $i/3…"; sleep 5
          done

      - name: 🔔 Build payload (failure)
        id: hook_fail
        if: ${{ failure() && needs.config.outputs.has_webhook == 'true' }}
        run: |
          ts="$(date -u +%FT%TZ)"
          {
            echo 'payload<<EOF'
            echo "{\"status\":\"failed\",\"timestamp\":\"$ts\",\"environment\":\"${{ needs.config.outputs.env_name }}\",\"commit\":\"${{ github.sha }}\",\"branch\":\"${{ github.ref_name }}\",\"run_id\":\"${{ github.run_id }}\"}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: 🔔 Notify webhook (failure)
        if: ${{ failure() && needs.config.outputs.has_webhook == 'true' }}
        run: |
          url='${{ needs.config.outputs.deployment_webhook_url }}'
          for i in 1 2 3; do
            curl -fsS -X POST "$url" -H "Content-Type: application/json" -d '${{ steps.hook_fail.outputs.payload }}' && break
            echo "retry $i/3…"; sleep 5
          done

      - name: 🧾 Summary
        if: always()
        run: |
          {
            echo "## Deploy Summary"
            echo "- Status: ${{ job.status }}"
            echo "- Env: ${{ needs.config.outputs.env_name }}"
            echo "- URL: ${{ needs.config.outputs.app_url }}"
            echo "- Run: ${{ github.run_id }}"
            echo "- SHA: ${{ github.sha }}"
            echo "- Branch: ${{ github.ref_name }}"
          } >> "$GITHUB_STEP_SUMMARY"

  # 4) Optional monitoring after deploy
  monitor:
    name: 📈 Monitor
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: 📦 Install
        run: npm ci

      - name: ▶️ Start monitoring
        run: npm run monitor:start

      - name: ⏱️ Observe for 5 minutes
        run: sleep 300

      - name: 🏥 Final health
        run: npm run health:check

      - name: 🧾 Monitoring summary
        if: always()
        run: |
          {
            echo "## Monitoring"
            echo "- Status: ${{ job.status }}"
            echo "- Health check executed"
          } >> "$GITHUB_STEP_SUMMARY"
