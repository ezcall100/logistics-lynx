[{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\AutonomousAgentManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":333,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9559,9562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9559,9562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from './LogManager';\r\n\r\ninterface Agent {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  isRunning: boolean;\r\n  lastActivity: Date;\r\n  status: 'running' | 'stopped' | 'error' | 'starting';\r\n  config: any;\r\n}\r\n\r\ninterface AgentStatus {\r\n  allAgentsRunning: boolean;\r\n  agents: Agent[];\r\n  totalAgents: number;\r\n  runningAgents: number;\r\n  failedAgents: number;\r\n}\r\n\r\n/**\r\n * ü§ñ Autonomous Agent Manager\r\n * Manages AI agents for different TMS tasks\r\n */\r\nexport class AutonomousAgentManager {\r\n  private logManager: LogManager;\r\n  private agents: Map<string, Agent> = new Map();\r\n  private isRunning: boolean = false;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    this.logManager.log('ü§ñ Initializing Autonomous Agent Manager...', 'info');\r\n    \r\n    // Initialize default agents\r\n    await this.initializeDefaultAgents();\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Agent manager is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.logManager.log('ü§ñ Starting autonomous agents...', 'info');\r\n\r\n    // Start all agents\r\n    for (const [id, agent] of this.agents) {\r\n      await this.startAgent(id);\r\n    }\r\n\r\n    this.logManager.log('‚úÖ All autonomous agents started', 'success');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    this.isRunning = false;\r\n    this.logManager.log('üõë Stopping autonomous agents...', 'info');\r\n\r\n    // Stop all agents\r\n    for (const [id, agent] of this.agents) {\r\n      await this.stopAgent(id);\r\n    }\r\n\r\n    this.logManager.log('‚úÖ All autonomous agents stopped', 'success');\r\n  }\r\n\r\n  /**\r\n   * Initialize default agents\r\n   */\r\n  private async initializeDefaultAgents(): Promise<void> {\r\n    const defaultAgents = [\r\n      {\r\n        id: 'load-matcher',\r\n        name: 'Load Matching Agent',\r\n        type: 'load_matching',\r\n        config: {\r\n          interval: 30000, // 30 seconds\r\n          maxMatches: 100,\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'rate-optimizer',\r\n        name: 'Rate Optimization Agent',\r\n        type: 'rate_optimization',\r\n        config: {\r\n          interval: 60000, // 1 minute\r\n          optimizationThreshold: 0.05,\r\n          priority: 'medium'\r\n        }\r\n      },\r\n      {\r\n        id: 'route-planner',\r\n        name: 'Route Planning Agent',\r\n        type: 'route_planning',\r\n        config: {\r\n          interval: 120000, // 2 minutes\r\n          maxRoutes: 50,\r\n          priority: 'medium'\r\n        }\r\n      },\r\n      {\r\n        id: 'compliance-checker',\r\n        name: 'Compliance Checker Agent',\r\n        type: 'compliance_checking',\r\n        config: {\r\n          interval: 300000, // 5 minutes\r\n          checkTypes: ['safety', 'regulatory', 'insurance'],\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'predictive-analytics',\r\n        name: 'Predictive Analytics Agent',\r\n        type: 'predictive_analytics',\r\n        config: {\r\n          interval: 600000, // 10 minutes\r\n          predictionHorizon: 24, // hours\r\n          priority: 'low'\r\n        }\r\n      },\r\n      {\r\n        id: 'customer-service',\r\n        name: 'Customer Service Agent',\r\n        type: 'customer_service',\r\n        config: {\r\n          interval: 15000, // 15 seconds\r\n          responseTime: 5000, // 5 seconds\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'website-developer',\r\n        name: 'Website Development Agent',\r\n        type: 'website_development',\r\n        config: {\r\n          interval: 45000, // 45 seconds\r\n          maxPagesPerCycle: 10,\r\n          priority: 'high',\r\n          permissions: ['create_pages', 'modify_pages', 'deploy_pages', 'optimize_ui', 'manage_content'],\r\n          productionAccess: true\r\n        }\r\n      },\r\n      {\r\n        id: 'ui-optimizer',\r\n        name: 'UI/UX Optimization Agent',\r\n        type: 'ui_optimization',\r\n        config: {\r\n          interval: 90000, // 1.5 minutes\r\n          optimizationTargets: ['performance', 'accessibility', 'user_experience'],\r\n          priority: 'medium',\r\n          permissions: ['modify_components', 'optimize_layouts', 'improve_interactions']\r\n        }\r\n      },\r\n      {\r\n        id: 'content-manager',\r\n        name: 'Content Management Agent',\r\n        type: 'content_management',\r\n        config: {\r\n          interval: 120000, // 2 minutes\r\n          contentTypes: ['pages', 'components', 'assets', 'documentation'],\r\n          priority: 'medium',\r\n          permissions: ['create_content', 'update_content', 'organize_content', 'publish_content']\r\n        }\r\n      },\r\n      {\r\n        id: 'portal-developer',\r\n        name: 'Portal Development Agent',\r\n        type: 'portal_development',\r\n        config: {\r\n          interval: 60000, // 1 minute\r\n          maxPortalsPerCycle: 5,\r\n          priority: 'high',\r\n          permissions: ['create_portals', 'modify_portals', 'deploy_portals', 'manage_roles', 'configure_features'],\r\n          productionAccess: true,\r\n          supportedPortalTypes: ['carrier', 'broker', 'shipper', 'driver', 'owner-operator', 'admin', 'enterprise', 'marketplace', 'analytics', 'billing', 'support'],\r\n          supportedRoles: ['carrier', 'broker', 'shipper', 'driver', 'owner-operator', 'admin', 'super-admin', 'enterprise', 'analyst', 'billing', 'support']\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const agentConfig of defaultAgents) {\r\n      const agent: Agent = {\r\n        ...agentConfig,\r\n        isRunning: false,\r\n        lastActivity: new Date(),\r\n        status: 'stopped'\r\n      };\r\n\r\n      this.agents.set(agent.id, agent);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Initialized ${defaultAgents.length} autonomous agents`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Start a specific agent\r\n   */\r\n  async startAgent(agentId: string): Promise<void> {\r\n    const agent = this.agents.get(agentId);\r\n    if (!agent) {\r\n      this.logManager.log(`‚ùå Agent not found: ${agentId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      agent.status = 'starting';\r\n      this.logManager.log(`üöÄ Starting agent: ${agent.name}`, 'info');\r\n\r\n      // Simulate agent startup\r\n      await this.simulateAgentStartup(agent);\r\n\r\n      agent.isRunning = true;\r\n      agent.status = 'running';\r\n      agent.lastActivity = new Date();\r\n\r\n      this.logManager.log(`‚úÖ Agent started: ${agent.name}`, 'success');\r\n\r\n    } catch (error) {\r\n      agent.status = 'error';\r\n      this.logManager.log(`‚ùå Failed to start agent ${agent.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop a specific agent\r\n   */\r\n  async stopAgent(agentId: string): Promise<void> {\r\n    const agent = this.agents.get(agentId);\r\n    if (!agent) {\r\n      this.logManager.log(`‚ùå Agent not found: ${agentId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logManager.log(`üõë Stopping agent: ${agent.name}`, 'info');\r\n\r\n      // Simulate agent shutdown\r\n      await this.simulateAgentShutdown(agent);\r\n\r\n      agent.isRunning = false;\r\n      agent.status = 'stopped';\r\n\r\n      this.logManager.log(`‚úÖ Agent stopped: ${agent.name}`, 'success');\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to stop agent ${agent.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restart failed agents\r\n   */\r\n  async restartFailedAgents(): Promise<void> {\r\n    this.logManager.log('üîÑ Restarting failed agents...', 'info');\r\n\r\n    const failedAgents = Array.from(this.agents.values()).filter(\r\n      agent => agent.status === 'error' || !agent.isRunning\r\n    );\r\n\r\n    for (const agent of failedAgents) {\r\n      this.logManager.log(`üîÑ Restarting failed agent: ${agent.name}`, 'info');\r\n      await this.stopAgent(agent.id);\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n      await this.startAgent(agent.id);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Restarted ${failedAgents.length} failed agents`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Get agent status\r\n   */\r\n  async getStatus(): Promise<AgentStatus> {\r\n    const agents = Array.from(this.agents.values());\r\n    const runningAgents = agents.filter(agent => agent.isRunning);\r\n    const failedAgents = agents.filter(agent => agent.status === 'error');\r\n\r\n    return {\r\n      allAgentsRunning: runningAgents.length === agents.length,\r\n      agents,\r\n      totalAgents: agents.length,\r\n      runningAgents: runningAgents.length,\r\n      failedAgents: failedAgents.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a new agent\r\n   */\r\n  async addAgent(agentConfig: Omit<Agent, 'isRunning' | 'lastActivity' | 'status'>): Promise<void> {\r\n    const agent: Agent = {\r\n      ...agentConfig,\r\n      isRunning: false,\r\n      lastActivity: new Date(),\r\n      status: 'stopped'\r\n    };\r\n\r\n    this.agents.set(agent.id, agent);\r\n    this.logManager.log(`‚úÖ Added new agent: ${agent.name}`, 'success');\r\n\r\n    // Start the agent if the manager is running\r\n    if (this.isRunning) {\r\n      await this.startAgent(agent.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an agent\r\n   */\r\n  async removeAgent(agentId: string): Promise<void> {\r\n    const agent = this.agents.get(agentId);\r\n    if (!agent) {\r\n      this.logManager.log(`‚ùå Agent not found: ${agentId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    // Stop the agent first\r\n    if (agent.isRunning) {\r\n      await this.stopAgent(agentId);\r\n    }\r\n\r\n    this.agents.delete(agentId);\r\n    this.logManager.log(`‚úÖ Removed agent: ${agent.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Update agent configuration\r\n   */\r\n  async updateAgentConfig(agentId: string, config: any): Promise<void> {\r\n    const agent = this.agents.get(agentId);\r\n    if (!agent) {\r\n      this.logManager.log(`‚ùå Agent not found: ${agentId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    const wasRunning = agent.isRunning;\r\n    \r\n    // Stop agent if running\r\n    if (wasRunning) {\r\n      await this.stopAgent(agentId);\r\n    }\r\n\r\n    // Update configuration\r\n    agent.config = { ...agent.config, ...config };\r\n\r\n    // Restart agent if it was running\r\n    if (wasRunning) {\r\n      await this.startAgent(agentId);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Updated configuration for agent: ${agent.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Simulate agent startup\r\n   */\r\n  private async simulateAgentStartup(agent: Agent): Promise<void> {\r\n    // Simulate startup time based on agent type\r\n    const startupTime = Math.random() * 3000 + 1000; // 1-4 seconds\r\n    await new Promise(resolve => setTimeout(resolve, startupTime));\r\n  }\r\n\r\n  /**\r\n   * Simulate agent shutdown\r\n   */\r\n  private async simulateAgentShutdown(agent: Agent): Promise<void> {\r\n    // Simulate shutdown time\r\n    const shutdownTime = Math.random() * 2000 + 500; // 0.5-2.5 seconds\r\n    await new Promise(resolve => setTimeout(resolve, shutdownTime));\r\n  }\r\n\r\n  /**\r\n   * Get agent by ID\r\n   */\r\n  getAgent(agentId: string): Agent | undefined {\r\n    return this.agents.get(agentId);\r\n  }\r\n\r\n  /**\r\n   * Get all agents\r\n   */\r\n  getAllAgents(): Agent[] {\r\n    return Array.from(this.agents.values());\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\AutonomousTMSController.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8977,8980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8977,8980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8995,8998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8995,8998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9016,9019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9016,9019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SystemHealthMonitor } from './SystemHealthMonitor';\r\nimport { AutonomousAgentManager } from './AutonomousAgentManager';\r\nimport { WorkflowOrchestrator } from './WorkflowOrchestrator';\r\nimport { DatabaseManager } from './DatabaseManager';\r\nimport { NotificationManager } from './NotificationManager';\r\nimport { LogManager } from './LogManager';\r\nimport { WebsiteDevelopmentAgent } from '../src/agents/WebsiteDevelopmentAgent';\r\nimport { PortalDevelopmentAgent } from '../src/agents/PortalDevelopmentAgent';\r\n\r\n/**\r\n * üöÄ Autonomous TMS Controller\r\n * Main orchestrator for the 24/7 autonomous TMS system\r\n */\r\nexport class AutonomousTMSController {\r\n  private healthMonitor: SystemHealthMonitor;\r\n  private agentManager: AutonomousAgentManager;\r\n  private workflowOrchestrator: WorkflowOrchestrator;\r\n  private databaseManager: DatabaseManager;\r\n  private notificationManager: NotificationManager;\r\n  private logManager: LogManager;\r\n  private websiteDevelopmentAgent: WebsiteDevelopmentAgent;\r\n  private portalDevelopmentAgent: PortalDevelopmentAgent;\r\n  private isRunning: boolean = false;\r\n  private restartCount: number = 0;\r\n  private maxRestarts: number = 5;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n    this.healthMonitor = new SystemHealthMonitor();\r\n    this.agentManager = new AutonomousAgentManager();\r\n    this.workflowOrchestrator = new WorkflowOrchestrator();\r\n    this.databaseManager = new DatabaseManager();\r\n    this.notificationManager = new NotificationManager();\r\n    this.websiteDevelopmentAgent = new WebsiteDevelopmentAgent();\r\n    this.portalDevelopmentAgent = new PortalDevelopmentAgent();\r\n  }\r\n\r\n  /**\r\n   * Initialize the autonomous system\r\n   */\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.logManager.log('üöÄ Initializing Autonomous TMS System...', 'info');\r\n      \r\n      // Initialize all components\r\n      await this.databaseManager.initialize();\r\n      await this.healthMonitor.initialize();\r\n      await this.agentManager.initialize();\r\n      await this.workflowOrchestrator.initialize();\r\n      await this.notificationManager.initialize();\r\n\r\n      // Initialize website development agent with full production access\r\n      this.logManager.log('üåê Initializing Website Development Agent with full production access...', 'info');\r\n      this.websiteDevelopmentAgent.setProductionAccess(true);\r\n\r\n      // Initialize portal development agent with full production access\r\n      this.logManager.log('üè¢ Initializing Portal Development Agent with full production access...', 'info');\r\n      this.portalDevelopmentAgent.setProductionAccess(true);\r\n\r\n      this.logManager.log('‚úÖ Autonomous TMS System initialized successfully', 'success');\r\n      \r\n      // Send startup notification\r\n      await this.notificationManager.sendNotification({\r\n        type: 'system_startup',\r\n        message: 'Autonomous TMS System is now online and monitoring with full website and portal development capabilities',\r\n        priority: 'info'\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to initialize autonomous system: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the autonomous system\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è System is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = true;\r\n      this.logManager.log('üöÄ Starting Autonomous TMS System...', 'info');\r\n\r\n      // Start all components\r\n      await this.healthMonitor.start();\r\n      await this.agentManager.start();\r\n      await this.workflowOrchestrator.start();\r\n      \r\n      // Start website development agent with full production access\r\n      this.logManager.log('üåê Starting Website Development Agent with full production access...', 'info');\r\n      await this.websiteDevelopmentAgent.start();\r\n      \r\n      // Start portal development agent with full production access\r\n      this.logManager.log('üè¢ Starting Portal Development Agent with full production access...', 'info');\r\n      await this.portalDevelopmentAgent.start();\r\n\r\n      // Start monitoring loop\r\n      this.startMonitoringLoop();\r\n\r\n      this.logManager.log('‚úÖ Autonomous TMS System started successfully with full website and portal development capabilities', 'success');\r\n\r\n    } catch (error) {\r\n      this.isRunning = false;\r\n      this.logManager.log(`‚ùå Failed to start autonomous system: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the autonomous system\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è System is not running', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = false;\r\n      this.logManager.log('üõë Stopping Autonomous TMS System...', 'info');\r\n\r\n      // Stop all components\r\n      await this.healthMonitor.stop();\r\n      await this.agentManager.stop();\r\n      await this.workflowOrchestrator.stop();\r\n      \r\n      // Stop website development agent\r\n      this.logManager.log('üåê Stopping Website Development Agent...', 'info');\r\n      await this.websiteDevelopmentAgent.stop();\r\n      \r\n      // Stop portal development agent\r\n      this.logManager.log('üè¢ Stopping Portal Development Agent...', 'info');\r\n      await this.portalDevelopmentAgent.stop();\r\n\r\n      this.logManager.log('‚úÖ Autonomous TMS System stopped successfully', 'success');\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to stop autonomous system: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main monitoring loop\r\n   */\r\n  private async startMonitoringLoop(): Promise<void> {\r\n    const MONITORING_INTERVAL = 30000; // 30 seconds\r\n\r\n    const monitoringLoop = async () => {\r\n      if (!this.isRunning) return;\r\n\r\n      try {\r\n        // Check system health\r\n        const healthStatus = await this.healthMonitor.checkHealth();\r\n        \r\n        if (!healthStatus.isHealthy) {\r\n          this.logManager.log(`‚ö†Ô∏è System health issues detected: ${healthStatus.issues.join(', ')}`, 'warning');\r\n          \r\n          // Attempt auto-recovery\r\n          await this.attemptAutoRecovery(healthStatus.issues);\r\n        }\r\n\r\n        // Check agent status\r\n        const agentStatus = await this.agentManager.getStatus();\r\n        if (!agentStatus.allAgentsRunning) {\r\n          this.logManager.log('‚ö†Ô∏è Some agents are not running, attempting restart...', 'warning');\r\n          await this.agentManager.restartFailedAgents();\r\n        }\r\n\r\n        // Check workflow status\r\n        const workflowStatus = await this.workflowOrchestrator.getStatus();\r\n        if (!workflowStatus.allWorkflowsHealthy) {\r\n          this.logManager.log('‚ö†Ô∏è Some workflows are unhealthy, attempting recovery...', 'warning');\r\n          await this.workflowOrchestrator.recoverFailedWorkflows();\r\n        }\r\n\r\n        // Schedule next check\r\n        setTimeout(monitoringLoop, MONITORING_INTERVAL);\r\n\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in monitoring loop: ${error}`, 'error');\r\n        \r\n        // Attempt restart if too many failures\r\n        if (this.restartCount < this.maxRestarts) {\r\n          this.restartCount++;\r\n          this.logManager.log(`üîÑ Attempting system restart (${this.restartCount}/${this.maxRestarts})`, 'warning');\r\n          await this.restart();\r\n        } else {\r\n          this.logManager.log('‚ùå Max restart attempts reached, stopping system', 'error');\r\n          await this.stop();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Start the monitoring loop\r\n    monitoringLoop();\r\n  }\r\n\r\n  /**\r\n   * Attempt auto-recovery for system issues\r\n   */\r\n  private async attemptAutoRecovery(issues: string[]): Promise<void> {\r\n    this.logManager.log('üîß Attempting auto-recovery...', 'info');\r\n\r\n    for (const issue of issues) {\r\n      try {\r\n        switch (issue) {\r\n          case 'database_connection':\r\n            await this.databaseManager.reconnect();\r\n            break;\r\n          case 'agent_failure':\r\n            await this.agentManager.restartFailedAgents();\r\n            break;\r\n          case 'workflow_failure':\r\n            await this.workflowOrchestrator.recoverFailedWorkflows();\r\n            break;\r\n          case 'memory_high':\r\n            await this.healthMonitor.cleanupMemory();\r\n            break;\r\n          default:\r\n            this.logManager.log(`‚ö†Ô∏è Unknown issue type: ${issue}`, 'warning');\r\n        }\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Failed to recover from ${issue}: ${error}`, 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restart the system\r\n   */\r\n  private async restart(): Promise<void> {\r\n    this.logManager.log('üîÑ Restarting autonomous system...', 'info');\r\n    \r\n    await this.stop();\r\n    await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds\r\n    await this.start();\r\n  }\r\n\r\n  /**\r\n   * Get system status\r\n   */\r\n  async getStatus(): Promise<{\r\n    isRunning: boolean;\r\n    health: any;\r\n    agents: any;\r\n    workflows: any;\r\n    uptime: number;\r\n    restartCount: number;\r\n  }> {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      health: await this.healthMonitor.checkHealth(),\r\n      agents: await this.agentManager.getStatus(),\r\n      workflows: await this.workflowOrchestrator.getStatus(),\r\n      uptime: Date.now() - (this.startTime || Date.now()),\r\n      restartCount: this.restartCount\r\n    };\r\n  }\r\n\r\n  private startTime?: number;\r\n}\r\n\r\n// Export singleton instance\r\nexport const autonomousTMS = new AutonomousTMSController();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\DatabaseManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1895,1898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1895,1898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1911,1914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1911,1914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from './LogManager';\r\n\r\n/**\r\n * üóÑÔ∏è Database Manager for Autonomous TMS System\r\n * Handles database connections, migrations, and data operations\r\n */\r\n\r\nexport interface DatabaseConfig {\r\n  url: string;\r\n  apiKey: string;\r\n  projectId: string;\r\n  region?: string;\r\n}\r\n\r\nexport class DatabaseManager {\r\n  private logManager: LogManager;\r\n  private config: DatabaseConfig | null = null;\r\n  private isConnected: boolean = false;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    this.logManager.log('üóÑÔ∏è Initializing Database Manager...', 'info');\r\n    \r\n    try {\r\n      // Load configuration from environment variables\r\n      this.config = {\r\n        url: process.env.SUPABASE_URL || 'https://placeholder.supabase.co',\r\n        apiKey: process.env.SUPABASE_ANON_KEY || 'placeholder-key',\r\n        projectId: process.env.SUPABASE_PROJECT_ID || 'placeholder-project',\r\n        region: process.env.SUPABASE_REGION || 'us-east-1'\r\n      };\r\n\r\n      this.logManager.log('‚úÖ Database configuration loaded', 'success');\r\n      \r\n      // Test connection\r\n      await this.testConnection();\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to initialize database: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      this.logManager.log('üîç Testing database connection...', 'info');\r\n      \r\n      // Simulate connection test\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      this.isConnected = true;\r\n      this.logManager.log('‚úÖ Database connection successful', 'success');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      this.isConnected = false;\r\n      this.logManager.error(`‚ùå Database connection failed: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async executeQuery(query: string, params?: any[]): Promise<any> {\r\n    if (!this.isConnected) {\r\n      throw new Error('Database not connected');\r\n    }\r\n\r\n    this.logManager.debug(`Executing query: ${query}`, { params });\r\n    \r\n    // Simulate query execution\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    return { success: true, data: [] };\r\n  }\r\n\r\n  async migrate(): Promise<void> {\r\n    this.logManager.log('üîÑ Running database migrations...', 'info');\r\n    \r\n    try {\r\n      // Simulate migration process\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      this.logManager.log('‚úÖ Database migrations completed', 'success');\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Migration failed: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.isConnected && this.config !== null;\r\n  }\r\n\r\n  getConfig(): DatabaseConfig | null {\r\n    return this.config;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\LogManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[704,707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[704,707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1151,1154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1151,1154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1576,1579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1576,1579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1735,1738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1735,1738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * üìù Log Manager for Autonomous TMS System\r\n * Handles logging, monitoring, and debugging for all autonomous agents\r\n */\r\n\r\nexport interface LogEntry {\r\n  timestamp: Date;\r\n  level: 'info' | 'success' | 'warning' | 'error' | 'debug';\r\n  message: string;\r\n  agentId?: string;\r\n  component?: string;\r\n  metadata?: any;\r\n}\r\n\r\nexport class LogManager {\r\n  private logs: LogEntry[] = [];\r\n  private maxLogs: number = 1000;\r\n  private isDebugMode: boolean = process.env.NODE_ENV === 'development';\r\n\r\n  constructor() {\r\n    this.log('üìù Log Manager initialized', 'info');\r\n  }\r\n\r\n  /**\r\n   * Log a message with specified level\r\n   */\r\n  log(message: string, level: LogEntry['level'] = 'info', metadata?: any): void {\r\n    const entry: LogEntry = {\r\n      timestamp: new Date(),\r\n      level,\r\n      message,\r\n      metadata\r\n    };\r\n\r\n    this.logs.push(entry);\r\n\r\n    // Keep logs under max limit\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs = this.logs.slice(-this.maxLogs);\r\n    }\r\n\r\n    // Console output with colors\r\n    this.outputToConsole(entry);\r\n  }\r\n\r\n  /**\r\n   * Log info message\r\n   */\r\n  info(message: string, metadata?: any): void {\r\n    this.log(message, 'info', metadata);\r\n  }\r\n\r\n  /**\r\n   * Log success message\r\n   */\r\n  success(message: string, metadata?: any): void {\r\n    this.log(message, 'success', metadata);\r\n  }\r\n\r\n  /**\r\n   * Log warning message\r\n   */\r\n  warning(message: string, metadata?: any): void {\r\n    this.log(message, 'warning', metadata);\r\n  }\r\n\r\n  /**\r\n   * Log error message\r\n   */\r\n  error(message: string, metadata?: any): void {\r\n    this.log(message, 'error', metadata);\r\n  }\r\n\r\n  /**\r\n   * Log debug message (only in debug mode)\r\n   */\r\n  debug(message: string, metadata?: any): void {\r\n    if (this.isDebugMode) {\r\n      this.log(message, 'debug', metadata);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all logs\r\n   */\r\n  getLogs(): LogEntry[] {\r\n    return [...this.logs];\r\n  }\r\n\r\n  /**\r\n   * Get logs by level\r\n   */\r\n  getLogsByLevel(level: LogEntry['level']): LogEntry[] {\r\n    return this.logs.filter(log => log.level === level);\r\n  }\r\n\r\n  /**\r\n   * Get recent logs (last N entries)\r\n   */\r\n  getRecentLogs(count: number = 50): LogEntry[] {\r\n    return this.logs.slice(-count);\r\n  }\r\n\r\n  /**\r\n   * Clear all logs\r\n   */\r\n  clearLogs(): void {\r\n    this.logs = [];\r\n    this.log('üìù Logs cleared', 'info');\r\n  }\r\n\r\n  /**\r\n   * Output log entry to console with colors\r\n   */\r\n  private outputToConsole(entry: LogEntry): void {\r\n    const timestamp = entry.timestamp.toISOString();\r\n    const levelColors = {\r\n      info: '\\x1b[36m',    // Cyan\r\n      success: '\\x1b[32m', // Green\r\n      warning: '\\x1b[33m', // Yellow\r\n      error: '\\x1b[31m',   // Red\r\n      debug: '\\x1b[35m'    // Magenta\r\n    };\r\n\r\n    const resetColor = '\\x1b[0m';\r\n    const color = levelColors[entry.level];\r\n    const levelUpper = entry.level.toUpperCase().padEnd(7);\r\n\r\n    console.log(`${color}[${timestamp}] ${levelUpper}${resetColor} ${entry.message}`);\r\n    \r\n    if (entry.metadata && this.isDebugMode) {\r\n      console.log(`${color}  ‚îî‚îÄ Metadata:${resetColor}`, entry.metadata);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export logs to file\r\n   */\r\n  async exportLogs(filename: string = `logs-${Date.now()}.json`): Promise<void> {\r\n    try {\r\n      const fs = await import('fs/promises');\r\n      await fs.writeFile(filename, JSON.stringify(this.logs, null, 2));\r\n      this.log(`üìÅ Logs exported to ${filename}`, 'success');\r\n    } catch (error) {\r\n      this.error(`Failed to export logs: ${error}`);\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\NotificationManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[437,440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[437,440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from './LogManager';\r\n\r\n/**\r\n * üîî Notification Manager for Autonomous TMS System\r\n * Handles notifications, alerts, and communication with external services\r\n */\r\n\r\nexport interface Notification {\r\n  type: 'info' | 'success' | 'warning' | 'error' | 'system_startup' | 'system_shutdown' | 'agent_status';\r\n  message: string;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  recipient?: string;\r\n  metadata?: any;\r\n  timestamp?: Date;\r\n}\r\n\r\nexport class NotificationManager {\r\n  private logManager: LogManager;\r\n  private notifications: Notification[] = [];\r\n  private isEnabled: boolean = true;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    this.logManager.log('üîî Initializing Notification Manager...', 'info');\r\n    \r\n    try {\r\n      // Load notification configuration\r\n      this.isEnabled = process.env.NOTIFICATIONS_ENABLED !== 'false';\r\n      \r\n      this.logManager.log('‚úÖ Notification Manager initialized', 'success');\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to initialize notification manager: ${error}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendNotification(notification: Notification): Promise<boolean> {\r\n    if (!this.isEnabled) {\r\n      this.logManager.debug('Notifications disabled, skipping', { notification });\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Add timestamp if not provided\r\n      if (!notification.timestamp) {\r\n        notification.timestamp = new Date();\r\n      }\r\n\r\n      // Store notification\r\n      this.notifications.push(notification);\r\n\r\n      // Log the notification\r\n      this.logManager.log(`üîî ${notification.message}`, notification.type === 'error' ? 'error' : 'info');\r\n\r\n      // Send to external services based on priority\r\n      if (notification.priority === 'critical' || notification.priority === 'high') {\r\n        await this.sendToExternalServices(notification);\r\n      }\r\n\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to send notification: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async sendToExternalServices(notification: Notification): Promise<void> {\r\n    try {\r\n      // Send to Slack if configured\r\n      if (process.env.SLACK_WEBHOOK_URL) {\r\n        await this.sendToSlack(notification);\r\n      }\r\n\r\n      // Send to email if configured\r\n      if (process.env.EMAIL_SERVICE_ENABLED === 'true') {\r\n        await this.sendToEmail(notification);\r\n      }\r\n\r\n      // Send to webhook if configured\r\n      if (process.env.WEBHOOK_URL) {\r\n        await this.sendToWebhook(notification);\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to send to external services: ${error}`);\r\n    }\r\n  }\r\n\r\n  private async sendToSlack(notification: Notification): Promise<void> {\r\n    try {\r\n      const webhookUrl = process.env.SLACK_WEBHOOK_URL;\r\n      if (!webhookUrl) return;\r\n\r\n      const payload = {\r\n        text: `ü§ñ Trans Bot AI: ${notification.message}`,\r\n        attachments: [{\r\n          color: this.getPriorityColor(notification.priority),\r\n          fields: [\r\n            {\r\n              title: 'Type',\r\n              value: notification.type,\r\n              short: true\r\n            },\r\n            {\r\n              title: 'Priority',\r\n              value: notification.priority,\r\n              short: true\r\n            },\r\n            {\r\n              title: 'Timestamp',\r\n              value: notification.timestamp?.toISOString(),\r\n              short: true\r\n            }\r\n          ]\r\n        }]\r\n      };\r\n\r\n      // Simulate Slack webhook call\r\n      this.logManager.debug('Sending to Slack', { payload });\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to send to Slack: ${error}`);\r\n    }\r\n  }\r\n\r\n  private async sendToEmail(notification: Notification): Promise<void> {\r\n    try {\r\n      // Simulate email sending\r\n      this.logManager.debug('Sending email notification', { notification });\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to send email: ${error}`);\r\n    }\r\n  }\r\n\r\n  private async sendToWebhook(notification: Notification): Promise<void> {\r\n    try {\r\n      const webhookUrl = process.env.WEBHOOK_URL;\r\n      if (!webhookUrl) return;\r\n\r\n      // Simulate webhook call\r\n      this.logManager.debug('Sending webhook notification', { notification });\r\n      \r\n    } catch (error) {\r\n      this.logManager.error(`‚ùå Failed to send webhook: ${error}`);\r\n    }\r\n  }\r\n\r\n  private getPriorityColor(priority: Notification['priority']): string {\r\n    switch (priority) {\r\n      case 'critical': return '#ff0000'; // Red\r\n      case 'high': return '#ff6600';     // Orange\r\n      case 'medium': return '#ffcc00';   // Yellow\r\n      case 'low': return '#00cc00';      // Green\r\n      default: return '#666666';         // Gray\r\n    }\r\n  }\r\n\r\n  getNotifications(): Notification[] {\r\n    return [...this.notifications];\r\n  }\r\n\r\n  getNotificationsByType(type: Notification['type']): Notification[] {\r\n    return this.notifications.filter(n => n.type === type);\r\n  }\r\n\r\n  getNotificationsByPriority(priority: Notification['priority']): Notification[] {\r\n    return this.notifications.filter(n => n.priority === priority);\r\n  }\r\n\r\n  clearNotifications(): void {\r\n    this.notifications = [];\r\n    this.logManager.log('üîî Notifications cleared', 'info');\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.isEnabled;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\SystemHealthMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":164,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":164,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from './LogManager';\r\n\r\ninterface HealthMetrics {\r\n  cpu: number;\r\n  memory: number;\r\n  disk: number;\r\n  network: number;\r\n  database: boolean;\r\n  api: boolean;\r\n  uptime: number;\r\n}\r\n\r\ninterface HealthStatus {\r\n  isHealthy: boolean;\r\n  issues: string[];\r\n  metrics: HealthMetrics;\r\n  lastCheck: Date;\r\n}\r\n\r\n/**\r\n * üîç System Health Monitor\r\n * Monitors system resources and performance metrics\r\n */\r\nexport class SystemHealthMonitor {\r\n  private logManager: LogManager;\r\n  private isMonitoring: boolean = false;\r\n  private healthThresholds = {\r\n    cpu: 80, // 80% CPU usage threshold\r\n    memory: 85, // 85% memory usage threshold\r\n    disk: 90, // 90% disk usage threshold\r\n    network: 1000 // 1 second response time threshold\r\n  };\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    this.logManager.log('üîç Initializing System Health Monitor...', 'info');\r\n    // Initialize monitoring tools and connections\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      this.logManager.log('‚ö†Ô∏è Health monitoring is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.logManager.log('üîç Starting system health monitoring...', 'info');\r\n    \r\n    // Start continuous monitoring\r\n    this.startContinuousMonitoring();\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    this.isMonitoring = false;\r\n    this.logManager.log('üõë Stopping system health monitoring...', 'info');\r\n  }\r\n\r\n  /**\r\n   * Check current system health\r\n   */\r\n  async checkHealth(): Promise<HealthStatus> {\r\n    try {\r\n      const metrics = await this.collectMetrics();\r\n      const issues = this.analyzeHealth(metrics);\r\n      \r\n      const status: HealthStatus = {\r\n        isHealthy: issues.length === 0,\r\n        issues,\r\n        metrics,\r\n        lastCheck: new Date()\r\n      };\r\n\r\n      if (!status.isHealthy) {\r\n        this.logManager.log(`‚ö†Ô∏è Health issues detected: ${issues.join(', ')}`, 'warning');\r\n      }\r\n\r\n      return status;\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error checking health: ${error}`, 'error');\r\n      return {\r\n        isHealthy: false,\r\n        issues: ['health_check_failed'],\r\n        metrics: this.getDefaultMetrics(),\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect system metrics\r\n   */\r\n  private async collectMetrics(): Promise<HealthMetrics> {\r\n    const metrics: HealthMetrics = {\r\n      cpu: await this.getCPUUsage(),\r\n      memory: await this.getMemoryUsage(),\r\n      disk: await this.getDiskUsage(),\r\n      network: await this.getNetworkLatency(),\r\n      database: await this.checkDatabaseConnection(),\r\n      api: await this.checkAPIAvailability(),\r\n      uptime: process.uptime()\r\n    };\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Analyze health metrics and identify issues\r\n   */\r\n  private analyzeHealth(metrics: HealthMetrics): string[] {\r\n    const issues: string[] = [];\r\n\r\n    if (metrics.cpu > this.healthThresholds.cpu) {\r\n      issues.push('cpu_high');\r\n    }\r\n\r\n    if (metrics.memory > this.healthThresholds.memory) {\r\n      issues.push('memory_high');\r\n    }\r\n\r\n    if (metrics.disk > this.healthThresholds.disk) {\r\n      issues.push('disk_high');\r\n    }\r\n\r\n    if (metrics.network > this.healthThresholds.network) {\r\n      issues.push('network_slow');\r\n    }\r\n\r\n    if (!metrics.database) {\r\n      issues.push('database_connection');\r\n    }\r\n\r\n    if (!metrics.api) {\r\n      issues.push('api_unavailable');\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Get CPU usage percentage\r\n   */\r\n  private async getCPUUsage(): Promise<number> {\r\n    try {\r\n      // In a real implementation, you would use system monitoring libraries\r\n      // For now, we'll simulate CPU usage\r\n      const usage = Math.random() * 100;\r\n      return Math.round(usage);\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting CPU usage: ${error}`, 'error');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get memory usage percentage\r\n   */\r\n  private async getMemoryUsage(): Promise<number> {\r\n    try {\r\n      const used = process.memoryUsage();\r\n      const total = require('os').totalmem();\r\n      const usage = (used.heapUsed / total) * 100;\r\n      return Math.round(usage);\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting memory usage: ${error}`, 'error');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get disk usage percentage\r\n   */\r\n  private async getDiskUsage(): Promise<number> {\r\n    try {\r\n      // In a real implementation, you would check actual disk usage\r\n      // For now, we'll simulate disk usage\r\n      const usage = Math.random() * 100;\r\n      return Math.round(usage);\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting disk usage: ${error}`, 'error');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get network latency\r\n   */\r\n  private async getNetworkLatency(): Promise<number> {\r\n    try {\r\n      // In a real implementation, you would ping external services\r\n      // For now, we'll simulate network latency\r\n      const latency = Math.random() * 2000; // 0-2000ms\r\n      return Math.round(latency);\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting network latency: ${error}`, 'error');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check database connection\r\n   */\r\n  private async checkDatabaseConnection(): Promise<boolean> {\r\n    try {\r\n      // In a real implementation, you would test the actual database connection\r\n      // For now, we'll simulate a healthy connection\r\n      return Math.random() > 0.1; // 90% success rate\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error checking database connection: ${error}`, 'error');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API availability\r\n   */\r\n  private async checkAPIAvailability(): Promise<boolean> {\r\n    try {\r\n      // In a real implementation, you would test API endpoints\r\n      // For now, we'll simulate API availability\r\n      return Math.random() > 0.05; // 95% success rate\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error checking API availability: ${error}`, 'error');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start continuous monitoring\r\n   */\r\n  private startContinuousMonitoring(): void {\r\n    const MONITORING_INTERVAL = 60000; // 1 minute\r\n\r\n    const monitor = async () => {\r\n      if (!this.isMonitoring) return;\r\n\r\n      try {\r\n        const status = await this.checkHealth();\r\n        \r\n        // Log health status periodically\r\n        if (status.isHealthy) {\r\n          this.logManager.log('‚úÖ System health check passed', 'info');\r\n        } else {\r\n          this.logManager.log(`‚ö†Ô∏è Health issues: ${status.issues.join(', ')}`, 'warning');\r\n        }\r\n\r\n        // Schedule next check\r\n        setTimeout(monitor, MONITORING_INTERVAL);\r\n\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in continuous monitoring: ${error}`, 'error');\r\n        setTimeout(monitor, MONITORING_INTERVAL);\r\n      }\r\n    };\r\n\r\n    // Start monitoring\r\n    monitor();\r\n  }\r\n\r\n  /**\r\n   * Cleanup memory\r\n   */\r\n  async cleanupMemory(): Promise<void> {\r\n    try {\r\n      this.logManager.log('üßπ Cleaning up memory...', 'info');\r\n      \r\n      // Force garbage collection if available\r\n      if (global.gc) {\r\n        global.gc();\r\n      }\r\n\r\n      // Clear any caches or temporary data\r\n      // This would be specific to your application\r\n\r\n      this.logManager.log('‚úÖ Memory cleanup completed', 'success');\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error during memory cleanup: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get default metrics for error cases\r\n   */\r\n  private getDefaultMetrics(): HealthMetrics {\r\n    return {\r\n      cpu: 0,\r\n      memory: 0,\r\n      disk: 0,\r\n      network: 0,\r\n      database: false,\r\n      api: false,\r\n      uptime: 0\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\autonomous-system\\WorkflowOrchestrator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6567,6570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6567,6570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6581,6584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6581,6584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11068,11071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11068,11071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":422,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12505,12508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12505,12508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":422,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12519,12522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12519,12522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from './LogManager';\r\n\r\ninterface Workflow {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  isActive: boolean;\r\n  lastRun: Date;\r\n  status: 'active' | 'inactive' | 'error' | 'running';\r\n  config: any;\r\n  executionCount: number;\r\n  successRate: number;\r\n}\r\n\r\ninterface WorkflowStatus {\r\n  allWorkflowsHealthy: boolean;\r\n  workflows: Workflow[];\r\n  totalWorkflows: number;\r\n  activeWorkflows: number;\r\n  failedWorkflows: number;\r\n  totalExecutions: number;\r\n  averageSuccessRate: number;\r\n}\r\n\r\n/**\r\n * üîÑ Workflow Orchestrator\r\n * Manages N8n workflows and business processes\r\n */\r\nexport class WorkflowOrchestrator {\r\n  private logManager: LogManager;\r\n  private workflows: Map<string, Workflow> = new Map();\r\n  private isRunning: boolean = false;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    this.logManager.log('üîÑ Initializing Workflow Orchestrator...', 'info');\r\n    \r\n    // Initialize default workflows\r\n    await this.initializeDefaultWorkflows();\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Workflow orchestrator is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.logManager.log('üîÑ Starting workflow orchestrator...', 'info');\r\n\r\n    // Activate all workflows\r\n    for (const [id, workflow] of this.workflows) {\r\n      await this.activateWorkflow(id);\r\n    }\r\n\r\n    this.logManager.log('‚úÖ Workflow orchestrator started successfully', 'success');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    this.isRunning = false;\r\n    this.logManager.log('üõë Stopping workflow orchestrator...', 'info');\r\n\r\n    // Deactivate all workflows\r\n    for (const [id, workflow] of this.workflows) {\r\n      await this.deactivateWorkflow(id);\r\n    }\r\n\r\n    this.logManager.log('‚úÖ Workflow orchestrator stopped successfully', 'success');\r\n  }\r\n\r\n  /**\r\n   * Initialize default workflows\r\n   */\r\n  private async initializeDefaultWorkflows(): Promise<void> {\r\n    const defaultWorkflows = [\r\n      {\r\n        id: 'load-intake-automation',\r\n        name: 'Load Intake Automation',\r\n        type: 'load_processing',\r\n        config: {\r\n          trigger: 'webhook',\r\n          interval: 60000, // 1 minute\r\n          maxRetries: 3,\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'pod-processing-automation',\r\n        name: 'POD Processing Automation',\r\n        type: 'document_processing',\r\n        config: {\r\n          trigger: 'file_upload',\r\n          interval: 300000, // 5 minutes\r\n          maxRetries: 5,\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'agent-runner-cron-health',\r\n        name: 'Agent Runner Cron Health',\r\n        type: 'health_monitoring',\r\n        config: {\r\n          trigger: 'cron',\r\n          interval: 300000, // 5 minutes\r\n          maxRetries: 2,\r\n          priority: 'medium'\r\n        }\r\n      },\r\n      {\r\n        id: 'rate-calculation-automation',\r\n        name: 'Rate Calculation Automation',\r\n        type: 'rate_processing',\r\n        config: {\r\n          trigger: 'api_call',\r\n          interval: 120000, // 2 minutes\r\n          maxRetries: 3,\r\n          priority: 'medium'\r\n        }\r\n      },\r\n      {\r\n        id: 'compliance-check-automation',\r\n        name: 'Compliance Check Automation',\r\n        type: 'compliance_processing',\r\n        config: {\r\n          trigger: 'scheduled',\r\n          interval: 600000, // 10 minutes\r\n          maxRetries: 2,\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'customer-notification-automation',\r\n        name: 'Customer Notification Automation',\r\n        type: 'notification_processing',\r\n        config: {\r\n          trigger: 'event_driven',\r\n          interval: 30000, // 30 seconds\r\n          maxRetries: 3,\r\n          priority: 'high'\r\n        }\r\n      },\r\n      {\r\n        id: 'data-sync-automation',\r\n        name: 'Data Sync Automation',\r\n        type: 'data_synchronization',\r\n        config: {\r\n          trigger: 'cron',\r\n          interval: 900000, // 15 minutes\r\n          maxRetries: 5,\r\n          priority: 'low'\r\n        }\r\n      },\r\n      {\r\n        id: 'report-generation-automation',\r\n        name: 'Report Generation Automation',\r\n        type: 'report_processing',\r\n        config: {\r\n          trigger: 'scheduled',\r\n          interval: 3600000, // 1 hour\r\n          maxRetries: 2,\r\n          priority: 'low'\r\n        }\r\n      }\r\n    ];\r\n\r\n    for (const workflowConfig of defaultWorkflows) {\r\n      const workflow: Workflow = {\r\n        ...workflowConfig,\r\n        isActive: false,\r\n        lastRun: new Date(),\r\n        status: 'inactive',\r\n        executionCount: 0,\r\n        successRate: 100\r\n      };\r\n\r\n      this.workflows.set(workflow.id, workflow);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Initialized ${defaultWorkflows.length} workflows`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Activate a workflow\r\n   */\r\n  async activateWorkflow(workflowId: string): Promise<void> {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) {\r\n      this.logManager.log(`‚ùå Workflow not found: ${workflowId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logManager.log(`üîÑ Activating workflow: ${workflow.name}`, 'info');\r\n\r\n      // Simulate workflow activation\r\n      await this.simulateWorkflowActivation(workflow);\r\n\r\n      workflow.isActive = true;\r\n      workflow.status = 'active';\r\n\r\n      this.logManager.log(`‚úÖ Workflow activated: ${workflow.name}`, 'success');\r\n\r\n    } catch (error) {\r\n      workflow.status = 'error';\r\n      this.logManager.log(`‚ùå Failed to activate workflow ${workflow.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate a workflow\r\n   */\r\n  async deactivateWorkflow(workflowId: string): Promise<void> {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) {\r\n      this.logManager.log(`‚ùå Workflow not found: ${workflowId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logManager.log(`üõë Deactivating workflow: ${workflow.name}`, 'info');\r\n\r\n      // Simulate workflow deactivation\r\n      await this.simulateWorkflowDeactivation(workflow);\r\n\r\n      workflow.isActive = false;\r\n      workflow.status = 'inactive';\r\n\r\n      this.logManager.log(`‚úÖ Workflow deactivated: ${workflow.name}`, 'success');\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to deactivate workflow ${workflow.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a workflow\r\n   */\r\n  async executeWorkflow(workflowId: string, data?: any): Promise<any> {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) {\r\n      this.logManager.log(`‚ùå Workflow not found: ${workflowId}`, 'error');\r\n      throw new Error(`Workflow not found: ${workflowId}`);\r\n    }\r\n\r\n    if (!workflow.isActive) {\r\n      this.logManager.log(`‚ùå Workflow is not active: ${workflow.name}`, 'error');\r\n      throw new Error(`Workflow is not active: ${workflow.name}`);\r\n    }\r\n\r\n    try {\r\n      workflow.status = 'running';\r\n      this.logManager.log(`üöÄ Executing workflow: ${workflow.name}`, 'info');\r\n\r\n      // Simulate workflow execution\r\n      const result = await this.simulateWorkflowExecution(workflow, data);\r\n\r\n      workflow.lastRun = new Date();\r\n      workflow.executionCount++;\r\n      workflow.status = 'active';\r\n\r\n      // Update success rate\r\n      const success = Math.random() > 0.1; // 90% success rate\r\n      if (success) {\r\n        workflow.successRate = Math.min(100, workflow.successRate + 1);\r\n      } else {\r\n        workflow.successRate = Math.max(0, workflow.successRate - 2);\r\n      }\r\n\r\n      this.logManager.log(`‚úÖ Workflow executed successfully: ${workflow.name}`, 'success');\r\n      return result;\r\n\r\n    } catch (error) {\r\n      workflow.status = 'error';\r\n      workflow.successRate = Math.max(0, workflow.successRate - 5);\r\n      this.logManager.log(`‚ùå Workflow execution failed: ${workflow.name} - ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recover failed workflows\r\n   */\r\n  async recoverFailedWorkflows(): Promise<void> {\r\n    this.logManager.log('üîß Recovering failed workflows...', 'info');\r\n\r\n    const failedWorkflows = Array.from(this.workflows.values()).filter(\r\n      workflow => workflow.status === 'error'\r\n    );\r\n\r\n    for (const workflow of failedWorkflows) {\r\n      this.logManager.log(`üîß Recovering failed workflow: ${workflow.name}`, 'info');\r\n      \r\n      try {\r\n        await this.deactivateWorkflow(workflow.id);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n        await this.activateWorkflow(workflow.id);\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Failed to recover workflow ${workflow.name}: ${error}`, 'error');\r\n      }\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Recovered ${failedWorkflows.length} failed workflows`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Get workflow status\r\n   */\r\n  async getStatus(): Promise<WorkflowStatus> {\r\n    const workflows = Array.from(this.workflows.values());\r\n    const activeWorkflows = workflows.filter(workflow => workflow.isActive);\r\n    const failedWorkflows = workflows.filter(workflow => workflow.status === 'error');\r\n\r\n    const totalExecutions = workflows.reduce((sum, w) => sum + w.executionCount, 0);\r\n    const averageSuccessRate = workflows.length > 0 \r\n      ? workflows.reduce((sum, w) => sum + w.successRate, 0) / workflows.length \r\n      : 0;\r\n\r\n    return {\r\n      allWorkflowsHealthy: failedWorkflows.length === 0,\r\n      workflows,\r\n      totalWorkflows: workflows.length,\r\n      activeWorkflows: activeWorkflows.length,\r\n      failedWorkflows: failedWorkflows.length,\r\n      totalExecutions,\r\n      averageSuccessRate: Math.round(averageSuccessRate)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a new workflow\r\n   */\r\n  async addWorkflow(workflowConfig: Omit<Workflow, 'isActive' | 'lastRun' | 'status' | 'executionCount' | 'successRate'>): Promise<void> {\r\n    const workflow: Workflow = {\r\n      ...workflowConfig,\r\n      isActive: false,\r\n      lastRun: new Date(),\r\n      status: 'inactive',\r\n      executionCount: 0,\r\n      successRate: 100\r\n    };\r\n\r\n    this.workflows.set(workflow.id, workflow);\r\n    this.logManager.log(`‚úÖ Added new workflow: ${workflow.name}`, 'success');\r\n\r\n    // Activate the workflow if the orchestrator is running\r\n    if (this.isRunning) {\r\n      await this.activateWorkflow(workflow.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a workflow\r\n   */\r\n  async removeWorkflow(workflowId: string): Promise<void> {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) {\r\n      this.logManager.log(`‚ùå Workflow not found: ${workflowId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    // Deactivate the workflow first\r\n    if (workflow.isActive) {\r\n      await this.deactivateWorkflow(workflowId);\r\n    }\r\n\r\n    this.workflows.delete(workflowId);\r\n    this.logManager.log(`‚úÖ Removed workflow: ${workflow.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Update workflow configuration\r\n   */\r\n  async updateWorkflowConfig(workflowId: string, config: any): Promise<void> {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) {\r\n      this.logManager.log(`‚ùå Workflow not found: ${workflowId}`, 'error');\r\n      return;\r\n    }\r\n\r\n    const wasActive = workflow.isActive;\r\n    \r\n    // Deactivate workflow if active\r\n    if (wasActive) {\r\n      await this.deactivateWorkflow(workflowId);\r\n    }\r\n\r\n    // Update configuration\r\n    workflow.config = { ...workflow.config, ...config };\r\n\r\n    // Reactivate workflow if it was active\r\n    if (wasActive) {\r\n      await this.activateWorkflow(workflowId);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Updated configuration for workflow: ${workflow.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Simulate workflow activation\r\n   */\r\n  private async simulateWorkflowActivation(workflow: Workflow): Promise<void> {\r\n    // Simulate activation time\r\n    const activationTime = Math.random() * 2000 + 1000; // 1-3 seconds\r\n    await new Promise(resolve => setTimeout(resolve, activationTime));\r\n  }\r\n\r\n  /**\r\n   * Simulate workflow deactivation\r\n   */\r\n  private async simulateWorkflowDeactivation(workflow: Workflow): Promise<void> {\r\n    // Simulate deactivation time\r\n    const deactivationTime = Math.random() * 1500 + 500; // 0.5-2 seconds\r\n    await new Promise(resolve => setTimeout(resolve, deactivationTime));\r\n  }\r\n\r\n  /**\r\n   * Simulate workflow execution\r\n   */\r\n  private async simulateWorkflowExecution(workflow: Workflow, data?: any): Promise<any> {\r\n    // Simulate execution time based on workflow type\r\n    const executionTime = Math.random() * 5000 + 2000; // 2-7 seconds\r\n    await new Promise(resolve => setTimeout(resolve, executionTime));\r\n\r\n    // Return simulated result\r\n    return {\r\n      workflowId: workflow.id,\r\n      executionTime: Date.now(),\r\n      data: data || {},\r\n      result: 'success'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get workflow by ID\r\n   */\r\n  getWorkflow(workflowId: string): Workflow | undefined {\r\n    return this.workflows.get(workflowId);\r\n  }\r\n\r\n  /**\r\n   * Get all workflows\r\n   */\r\n  getAllWorkflows(): Workflow[] {\r\n    return Array.from(this.workflows.values());\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\check-portals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\cypress.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\cypress\\e2e\\directory_search.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\cypress\\e2e\\rates_quote.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\cypress\\e2e\\smoke.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-blank-page.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-const-errors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-edge-function-errors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-n8n-webhook.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-portals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\fix-typescript-errors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\k6\\smoke-enhanced.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Cannot use keyword 'await' outside an async function","line":95,"column":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from 'k6/http';\r\nimport { sleep, check } from 'k6';\r\nimport { Rate, Trend, Counter } from 'k6/metrics';\r\n\r\n// Custom metrics\r\nconst errorRate = new Rate('errors');\r\nconst dashboardLoadTime = new Trend('dashboard_load_time');\r\nconst apiResponseTime = new Trend('api_response_time');\r\nconst outboxLagTime = new Trend('outbox_lag_seconds');\r\nconst dlqCount = new Counter('dlq_items_count');\r\nconst agentSuccessRate = new Rate('agent_success_rate');\r\n\r\n// Enhanced metrics for production hardening\r\nconst httpFailed = new Rate('http_req_failed');\r\nconst outboxLagMs = new Trend('outbox_lag_ms');\r\nconst agentSuccess = new Rate('agent_success');\r\n\r\n// Test configuration\r\nexport const options = {\r\n  stages: [\r\n    { duration: '30s', target: 5 },   // Ramp up to 5 users\r\n    { duration: '1m', target: 5 },    // Stay at 5 users\r\n    { duration: '30s', target: 10 },  // Ramp up to 10 users\r\n    { duration: '1m', target: 10 },   // Stay at 10 users\r\n    { duration: '30s', target: 0 },   // Ramp down to 0 users\r\n  ],\r\n  thresholds: {\r\n    // HTTP: crisp thresholds to fail fast\r\n    http_req_duration: ['p(95)<2500'],    // 95% of requests must complete below 2.5s\r\n    http_req_failed: ['rate<0.02'],       // Error rate must be less than 2%\r\n    errors: ['rate<0.02'],                // Custom error rate\r\n    \r\n    // Dashboard performance\r\n    dashboard_load_time: ['p(95)<2000'],  // Dashboard load time under 2s\r\n    \r\n    // Outbox lag: custom metric thresholds\r\n    outbox_lag_seconds: ['avg<2', 'p(95)<5'],  // Outbox lag < 2s avg, < 5s p95\r\n    outbox_lag_ms: ['p(95)<5000', 'avg<2000'], // Enhanced outbox lag metrics\r\n    \r\n    // Agent SLO: success ‚â• 98% over the test window\r\n    agent_success_rate: ['rate>0.98'],    // Agent success rate above 98%\r\n    agent_success: ['rate>0.98'],         // Enhanced agent success metric\r\n    \r\n    // DLQ: size delta after run === 0 (or below tolerance)\r\n    dlq_items_count: ['count<10'],        // DLQ items count below threshold\r\n  },\r\n};\r\n\r\n// Test data\r\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:8080';\r\nconst SUPABASE_URL = __ENV.SUPABASE_URL || 'https://your-project.supabase.co';\r\nconst SUPABASE_ANON_KEY = __ENV.SUPABASE_ANON_KEY || 'your-anon-key';\r\nconst TEST_COMPANY_ID = __ENV.TEST_COMPANY_ID || '00000000-0000-4000-8000-000000000001';\r\n\r\nexport default function () {\r\n  const startTime = Date.now();\r\n  \r\n  // Test 1: Dashboard page load\r\n  const dashboardRes = http.get(`${BASE_URL}/`);\r\n  const dashboardLoadDuration = Date.now() - startTime;\r\n  \r\n  check(dashboardRes, {\r\n    'dashboard loads successfully': (r) => r.status === 200,\r\n    'dashboard contains expected content': (r) => r.body.includes('Logistics Lynx') || r.body.includes('Dashboard'),\r\n    'dashboard loads fast': (r) => r.timings.duration < 2000,\r\n  });\r\n  \r\n  dashboardLoadTime.add(dashboardLoadDuration);\r\n  errorRate.add(dashboardRes.status !== 200);\r\n  \r\n  sleep(1);\r\n  \r\n  // Test 2: API endpoints health check\r\n  if (__ENV.TEST_API === 'true') {\r\n    const apiStartTime = Date.now();\r\n    \r\n    // Test KPI data endpoint\r\n    const kpiRes = http.get(`${BASE_URL}/api/kpis?role=super_admin`);\r\n    const apiDuration = Date.now() - apiStartTime;\r\n    \r\n    check(kpiRes, {\r\n      'API returns 200': (r) => r.status === 200,\r\n      'API response is JSON': (r) => r.headers['Content-Type']?.includes('application/json'),\r\n      'API response time acceptable': (r) => r.timings.duration < 500,\r\n    });\r\n    \r\n    apiResponseTime.add(apiDuration);\r\n    errorRate.add(kpiRes.status !== 200);\r\n    \r\n    sleep(0.5);\r\n  }\r\n  \r\n  // Test 3: Outbox lag verification (every 10th request)\r\n  if (__ENV.TEST_OUTBOX === 'true' && Math.random() < 0.1) {\r\n    const outboxLag = await checkOutboxLag();\r\n    if (outboxLag !== null) {\r\n      outboxLagTime.add(outboxLag);\r\n    }\r\n  }\r\n  \r\n  // Test 4: DLQ health check (every 20th request)\r\n  if (__ENV.TEST_DLQ === 'true' && Math.random() < 0.05) {\r\n    const dlqHealth = await checkDLQHealth();\r\n    if (dlqHealth !== null) {\r\n      dlqCount.add(dlqHealth.count);\r\n    }\r\n  }\r\n  \r\n  // Test 5: Agent success rate check (every 15th request)\r\n  if (__ENV.TEST_AGENTS === 'true' && Math.random() < 0.07) {\r\n    const agentHealth = await checkAgentSuccessRate();\r\n    if (agentHealth !== null) {\r\n      agentSuccessRate.add(agentHealth.success_rate);\r\n    }\r\n  }\r\n  \r\n  sleep(1);\r\n}\r\n\r\n// Helper function to check outbox lag\r\nasync function checkOutboxLag() {\r\n  try {\r\n    const response = http.get(`${SUPABASE_URL}/rest/v1/event_outbox?select=inserted_at&processed_at=is.null&order=inserted_at.asc&limit=1`, {\r\n      headers: {\r\n        'apikey': SUPABASE_ANON_KEY,\r\n        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.status === 200 && response.body) {\r\n      const data = JSON.parse(response.body);\r\n      if (data && data.length > 0) {\r\n        const insertedAt = new Date(data[0].inserted_at);\r\n        const now = new Date();\r\n        const lagSeconds = (now - insertedAt) / 1000;\r\n        return lagSeconds;\r\n      }\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Outbox lag check failed:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Helper function to check DLQ health\r\nasync function checkDLQHealth() {\r\n  try {\r\n    const response = http.get(`${SUPABASE_URL}/rest/v1/dead_letter_queue?select=count&created_at=gte.${new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()}`, {\r\n      headers: {\r\n        'apikey': SUPABASE_ANON_KEY,\r\n        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.status === 200 && response.body) {\r\n      const data = JSON.parse(response.body);\r\n      return { count: data.length };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('DLQ health check failed:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Helper function to check agent success rate\r\nasync function checkAgentSuccessRate() {\r\n  try {\r\n    const fifteenMinutesAgo = new Date(Date.now() - 15 * 60 * 1000).toISOString();\r\n    const response = http.get(`${SUPABASE_URL}/rest/v1/agent_tasks?select=status&updated_at=gte.${fifteenMinutesAgo}`, {\r\n      headers: {\r\n        'apikey': SUPABASE_ANON_KEY,\r\n        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.status === 200 && response.body) {\r\n      const data = JSON.parse(response.body);\r\n      const completed = data.filter(task => task.status === 'completed').length;\r\n      const failed = data.filter(task => task.status === 'failed').length;\r\n      const total = completed + failed;\r\n      \r\n      if (total > 0) {\r\n        const successRate = completed / total;\r\n        return { success_rate: successRate };\r\n      }\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Agent success rate check failed:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Post-test verification (runs once at the end)\r\nexport function handleSummary(data) {\r\n  // Check if any critical thresholds were breached\r\n  const criticalIssues = [];\r\n  \r\n  if (data.metrics.outbox_lag_seconds?.values?.p95 > 2) {\r\n    criticalIssues.push('Outbox lag exceeded 2 seconds');\r\n  }\r\n  \r\n  if (data.metrics.agent_success_rate?.values?.rate < 0.98) {\r\n    criticalIssues.push('Agent success rate below 98%');\r\n  }\r\n  \r\n  if (data.metrics.dlq_items_count?.values?.count > 10) {\r\n    criticalIssues.push('DLQ items count too high');\r\n  }\r\n  \r\n  if (criticalIssues.length > 0) {\r\n    console.error('üö® CRITICAL ISSUES DETECTED:', criticalIssues.join(', '));\r\n    \r\n    // In a real deployment, this would trigger an incident\r\n    if (__ENV.SLACK_WEBHOOK_URL) {\r\n      http.post(__ENV.SLACK_WEBHOOK_URL, JSON.stringify({\r\n        text: 'üö® Post-deploy verification failed',\r\n        attachments: [{\r\n          color: 'danger',\r\n          fields: criticalIssues.map(issue => ({\r\n            title: 'Issue',\r\n            value: issue,\r\n            short: false\r\n          }))\r\n        }]\r\n      }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n  \r\n  return {\r\n    'stdout': JSON.stringify(data, null, 2),\r\n    [`smoke-test-${new Date().toISOString().split('T')[0]}.json`]: JSON.stringify(data, null, 2)\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\k6\\smoke.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\k6\\website-builder.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\app\\layout.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":10,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":10,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next'\r\nimport { Inter } from 'next/font/google'\r\nimport './globals.css'\r\nimport { ThemeProvider } from '@/components/theme-provider'\r\nimport { Header } from '@/components/Header'\r\nimport { Footer } from '@/components/Footer'\r\n\r\nconst inter = Inter({ subsets: ['latin'] })\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Logistics Lynx - Autonomous TMS Platform',\r\n  description: 'Next-generation Transportation Management System with AI-powered automation, real-time tracking, and comprehensive logistics solutions.',\r\n  keywords: 'TMS, transportation management, logistics, AI, automation, freight, shipping, tracking',\r\n  authors: [{ name: 'Logistics Lynx Team' }],\r\n  openGraph: {\r\n    title: 'Logistics Lynx - Autonomous TMS Platform',\r\n    description: 'Next-generation Transportation Management System with AI-powered automation.',\r\n    type: 'website',\r\n    locale: 'en_US',\r\n  },\r\n  twitter: {\r\n    card: 'summary_large_image',\r\n    title: 'Logistics Lynx - Autonomous TMS Platform',\r\n    description: 'Next-generation Transportation Management System with AI-powered automation.',\r\n  },\r\n  robots: {\r\n    index: true,\r\n    follow: true,\r\n  },\r\n}\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) {\r\n  return (\r\n    <html lang=\"en\" suppressHydrationWarning>\r\n      <body className={inter.className}>\r\n        <ThemeProvider\r\n          attribute=\"class\"\r\n          defaultTheme=\"system\"\r\n          enableSystem\r\n          disableTransitionOnChange\r\n        >\r\n          <div className=\"min-h-screen flex flex-col\">\r\n            <Header />\r\n            <main className=\"flex-1\">\r\n              {children}\r\n            </main>\r\n            <Footer />\r\n          </div>\r\n        </ThemeProvider>\r\n      </body>\r\n    </html>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\CTASection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\FeaturesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\SolutionsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\TestimonialsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\public-website\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\autonomous-agent-continuous.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\autonomous-build.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\check-portals-simple.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\check-portals.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\ci\\lint-ratchet.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\dev-agents.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\dev-watchers.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\emergency-stop.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\green-posture-script.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\health-check.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\portal-fix.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\portal-scan-and-queue.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\scaffold-portals.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\sign-dlq-body.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[886,889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[886,889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n/**\r\n * üîê DLQ Replay HMAC Signer Utility\r\n * \r\n * Generates HMAC signatures for DLQ replay operations\r\n * Usage: npx ts-node scripts/sign-dlq-body.ts [options]\r\n */\r\n\r\nimport { createHmac } from 'crypto';\r\n\r\ninterface SignOptions {\r\n  companyId: string;\r\n  max?: number;\r\n  idempotencyKey?: string;\r\n  dryRun?: boolean;\r\n  force?: boolean;\r\n  dlqIds?: string[];\r\n  errorType?: string;\r\n  secret: string;\r\n  verbose?: boolean;\r\n}\r\n\r\nfunction generateSignature(payload: string, secret: string): string {\r\n  return createHmac('sha256', secret)\r\n    .update(payload)\r\n    .digest('hex');\r\n}\r\n\r\nfunction signDlqBody(options: SignOptions): void {\r\n  const {\r\n    companyId,\r\n    max = 25,\r\n    idempotencyKey,\r\n    dryRun = false,\r\n    force = false,\r\n    dlqIds,\r\n    errorType,\r\n    secret,\r\n    verbose = false\r\n  } = options;\r\n\r\n  // Build payload\r\n  const payload: any = {\r\n    company_id: companyId,\r\n    max\r\n  };\r\n\r\n  if (idempotencyKey) {\r\n    payload.idempotency_key = idempotencyKey;\r\n  }\r\n\r\n  if (dryRun) {\r\n    payload.dry_run = true;\r\n  }\r\n\r\n  if (force) {\r\n    payload.force = true;\r\n  }\r\n\r\n  if (dlqIds && dlqIds.length > 0) {\r\n    payload.dlq_ids = dlqIds;\r\n  }\r\n\r\n  if (errorType) {\r\n    payload.error_type = errorType;\r\n  }\r\n\r\n  const payloadString = JSON.stringify(payload);\r\n  const signature = generateSignature(payloadString, secret);\r\n\r\n  if (verbose) {\r\n    console.log('üîê DLQ Replay HMAC Signature Generator');\r\n    console.log('=====================================');\r\n    console.log(`Company ID: ${companyId}`);\r\n    console.log(`Max Items: ${max}`);\r\n    console.log(`Dry Run: ${dryRun}`);\r\n    console.log(`Force: ${force}`);\r\n    if (idempotencyKey) console.log(`Idempotency Key: ${idempotencyKey}`);\r\n    if (dlqIds) console.log(`DLQ IDs: ${dlqIds.join(', ')}`);\r\n    if (errorType) console.log(`Error Type: ${errorType}`);\r\n    console.log('');\r\n    console.log('üì¶ Payload:');\r\n    console.log(payloadString);\r\n    console.log('');\r\n    console.log('üîë Signature:');\r\n    console.log(signature);\r\n    console.log('');\r\n    console.log('üìã cURL Command:');\r\n  }\r\n\r\n  // Generate cURL command\r\n  const curlCommand = `curl -X POST https://your-project.supabase.co/functions/v1/dlq-replay \\\\\r\n  -H \"X-Transbot-Signature: ${signature}\" \\\\\r\n  -H \"Content-Type: application/json\" \\\\\r\n  -d '${payloadString}'`;\r\n\r\n  console.log(curlCommand);\r\n\r\n  if (verbose) {\r\n    console.log('');\r\n    console.log('üí° Tips:');\r\n    console.log('- Replace \"your-project\" with your actual Supabase project');\r\n    console.log('- Set TRANSBOT_HMAC_SECRET environment variable for security');\r\n    console.log('- Use --dry-run flag to test without executing');\r\n    console.log('- Monitor audit logs for replay operations');\r\n  }\r\n}\r\n\r\n// CLI argument parsing\r\nfunction parseArgs(): SignOptions {\r\n  const args = process.argv.slice(2);\r\n  const options: Partial<SignOptions> = {};\r\n\r\n  for (let i = 0; i < args.length; i++) {\r\n    const arg = args[i];\r\n    const nextArg = args[i + 1];\r\n\r\n    switch (arg) {\r\n      case '--company-id':\r\n      case '-c':\r\n        options.companyId = nextArg;\r\n        i++;\r\n        break;\r\n      case '--max':\r\n      case '-m':\r\n        options.max = parseInt(nextArg);\r\n        i++;\r\n        break;\r\n      case '--idempotency-key':\r\n      case '-k':\r\n        options.idempotencyKey = nextArg;\r\n        i++;\r\n        break;\r\n      case '--dry-run':\r\n      case '-d':\r\n        options.dryRun = true;\r\n        break;\r\n      case '--force':\r\n      case '-f':\r\n        options.force = true;\r\n        break;\r\n      case '--dlq-ids':\r\n        options.dlqIds = nextArg.split(',');\r\n        i++;\r\n        break;\r\n      case '--error-type':\r\n      case '-e':\r\n        options.errorType = nextArg;\r\n        i++;\r\n        break;\r\n      case '--secret':\r\n      case '-s':\r\n        options.secret = nextArg;\r\n        i++;\r\n        break;\r\n      case '--verbose':\r\n      case '-v':\r\n        options.verbose = true;\r\n        break;\r\n      case '--help':\r\n      case '-h':\r\n        showHelp();\r\n        process.exit(0);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Validate required options\r\n  if (!options.companyId) {\r\n    console.error('‚ùå Error: --company-id is required');\r\n    showHelp();\r\n    process.exit(1);\r\n  }\r\n\r\n  if (!options.secret) {\r\n    options.secret = process.env.TRANSBOT_HMAC_SECRET;\r\n    if (!options.secret) {\r\n      console.error('‚ùå Error: --secret or TRANSBOT_HMAC_SECRET environment variable is required');\r\n      showHelp();\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  return options as SignOptions;\r\n}\r\n\r\nfunction showHelp(): void {\r\n  console.log(`\r\nüîê DLQ Replay HMAC Signer Utility\r\n\r\nUsage: npx ts-node scripts/sign-dlq-body.ts [options]\r\n\r\nRequired Options:\r\n  -c, --company-id <id>     Company ID for the replay operation\r\n  -s, --secret <secret>     HMAC secret (or set TRANSBOT_HMAC_SECRET env var)\r\n\r\nOptional Options:\r\n  -m, --max <number>        Maximum items to replay (default: 25)\r\n  -k, --idempotency-key <key>  Idempotency key for deduplication\r\n  -d, --dry-run            Test mode - don't execute replay\r\n  -f, --force              Force replay ignoring retry_after timestamps\r\n  --dlq-ids <ids>          Comma-separated list of specific DLQ IDs\r\n  -e, --error-type <type>  Filter by error type\r\n  -v, --verbose            Show detailed output\r\n  -h, --help               Show this help message\r\n\r\nExamples:\r\n  # Basic replay for a company\r\n  npx ts-node scripts/sign-dlq-body.ts -c \"00000000-0000-4000-8000-000000000001\"\r\n\r\n  # Dry run with custom max\r\n  npx ts-node scripts/sign-dlq-body.ts -c \"company-id\" -m 10 -d -v\r\n\r\n  # Replay specific DLQ items\r\n  npx ts-node scripts/sign-dlq-body.ts -c \"company-id\" --dlq-ids \"id1,id2,id3\"\r\n\r\n  # Force replay with idempotency key\r\n  npx ts-node scripts/sign-dlq-body.ts -c \"company-id\" -f -k \"INC-2025-01-13-001\"\r\n\r\nEnvironment Variables:\r\n  TRANSBOT_HMAC_SECRET     HMAC secret for signature generation\r\n`);\r\n}\r\n\r\n// Main execution\r\nif (require.main === module) {\r\n  try {\r\n    const options = parseArgs();\r\n    signDlqBody(options);\r\n  } catch (error) {\r\n    console.error('‚ùå Error:', error.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nexport { signDlqBody, generateSignature };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\sign-v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\start-autonomous-full-dev.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\start-autonomous-website-dev.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\scripts\\util\\lockfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\server\\dev-server.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\server\\middleware-410.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\AppAuthenticated.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\AutonomousCommitAgent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\PortalDevelopmentAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1033,1036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1033,1036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":490,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":490,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20298,20301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20298,20301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":539,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21874,21877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21874,21877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":588,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23217,23220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23217,23220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":799,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30032,30035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30032,30035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":815,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":815,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30448,30451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30448,30451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":826,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":826,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30808,30811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30808,30811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":949,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":949,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34234,34237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34234,34237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from '../../autonomous-system/LogManager';\r\n\r\ninterface PortalTemplate {\r\n  id: string;\r\n  name: string;\r\n  type: PortalType;\r\n  roles: UserRole[];\r\n  path: string;\r\n  component: string;\r\n  features: PortalFeature[];\r\n  permissions: string[];\r\n  metadata: {\r\n    title: string;\r\n    description: string;\r\n    keywords: string[];\r\n    author: string;\r\n    lastModified: Date;\r\n  };\r\n}\r\n\r\ninterface PortalFeature {\r\n  id: string;\r\n  name: string;\r\n  component: string;\r\n  permissions: string[];\r\n  config: any;\r\n}\r\n\r\ninterface PortalInstance {\r\n  id: string;\r\n  name: string;\r\n  type: PortalType;\r\n  roles: UserRole[];\r\n  path: string;\r\n  component: string;\r\n  features: PortalFeature[];\r\n  status: 'draft' | 'published' | 'archived' | 'maintenance';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  metadata: {\r\n    title: string;\r\n    description: string;\r\n    keywords: string[];\r\n    author: string;\r\n    lastModified: Date;\r\n  };\r\n  config: {\r\n    theme: string;\r\n    layout: string;\r\n    features: Record<string, any>;\r\n    permissions: Record<string, boolean>;\r\n  };\r\n}\r\n\r\ntype PortalType = \r\n  | 'carrier'\r\n  | 'broker'\r\n  | 'shipper'\r\n  | 'driver'\r\n  | 'owner-operator'\r\n  | 'admin'\r\n  | 'super-admin'\r\n  | 'enterprise'\r\n  | 'marketplace'\r\n  | 'analytics'\r\n  | 'billing'\r\n  | 'support';\r\n\r\ntype UserRole = \r\n  | 'carrier'\r\n  | 'broker'\r\n  | 'shipper'\r\n  | 'driver'\r\n  | 'owner-operator'\r\n  | 'admin'\r\n  | 'super-admin'\r\n  | 'enterprise'\r\n  | 'analyst'\r\n  | 'billing'\r\n  | 'support';\r\n\r\n/**\r\n * üè¢ Autonomous Portal Development Agent\r\n * Creates, modifies, and manages portals for all role types and portal types\r\n * with full production access and role-based development capabilities\r\n */\r\nexport class PortalDevelopmentAgent {\r\n  private logManager: LogManager;\r\n  private isRunning: boolean = false;\r\n  private portals: Map<string, PortalInstance> = new Map();\r\n  private templates: Map<string, PortalTemplate> = new Map();\r\n  private productionAccess: boolean = true;\r\n  private rolePermissions: Map<UserRole, string[]> = new Map();\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n    this.initializeTemplates();\r\n    this.initializeRolePermissions();\r\n  }\r\n\r\n  /**\r\n   * Initialize portal templates for all portal types\r\n   */\r\n  private initializeTemplates(): void {\r\n    const defaultTemplates: PortalTemplate[] = [\r\n      // Carrier Portal\r\n      {\r\n        id: 'carrier-portal',\r\n        name: 'Carrier Portal',\r\n        type: 'carrier',\r\n        roles: ['carrier', 'driver'],\r\n        path: '/carrier',\r\n        component: 'CarrierPortal',\r\n        features: [\r\n          { id: 'load-board', name: 'Load Board', component: 'LoadBoard', permissions: ['view_loads', 'bid_loads'], config: {} },\r\n          { id: 'fleet-management', name: 'Fleet Management', component: 'FleetManagement', permissions: ['manage_fleet'], config: {} },\r\n          { id: 'dispatch', name: 'Dispatch', component: 'Dispatch', permissions: ['manage_dispatch'], config: {} },\r\n          { id: 'analytics', name: 'Analytics', component: 'Analytics', permissions: ['view_analytics'], config: {} }\r\n        ],\r\n        permissions: ['view_loads', 'bid_loads', 'manage_fleet', 'manage_dispatch', 'view_analytics'],\r\n        metadata: {\r\n          title: 'Carrier Portal',\r\n          description: 'Complete carrier management portal',\r\n          keywords: ['carrier', 'fleet', 'dispatch', 'loads'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Broker Portal\r\n      {\r\n        id: 'broker-portal',\r\n        name: 'Broker Portal',\r\n        type: 'broker',\r\n        roles: ['broker', 'admin'],\r\n        path: '/broker',\r\n        component: 'BrokerPortal',\r\n        features: [\r\n          { id: 'load-management', name: 'Load Management', component: 'LoadManagement', permissions: ['manage_loads'], config: {} },\r\n          { id: 'carrier-directory', name: 'Carrier Directory', component: 'CarrierDirectory', permissions: ['view_carriers'], config: {} },\r\n          { id: 'rate-negotiation', name: 'Rate Negotiation', component: 'RateNegotiation', permissions: ['negotiate_rates'], config: {} },\r\n          { id: 'analytics', name: 'Analytics', component: 'Analytics', permissions: ['view_analytics'], config: {} }\r\n        ],\r\n        permissions: ['manage_loads', 'view_carriers', 'negotiate_rates', 'view_analytics'],\r\n        metadata: {\r\n          title: 'Broker Portal',\r\n          description: 'Complete broker management portal',\r\n          keywords: ['broker', 'loads', 'carriers', 'rates'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Shipper Portal\r\n      {\r\n        id: 'shipper-portal',\r\n        name: 'Shipper Portal',\r\n        type: 'shipper',\r\n        roles: ['shipper', 'admin'],\r\n        path: '/shipper',\r\n        component: 'ShipperPortal',\r\n        features: [\r\n          { id: 'shipment-management', name: 'Shipment Management', component: 'ShipmentManagement', permissions: ['manage_shipments'], config: {} },\r\n          { id: 'rate-quotes', name: 'Rate Quotes', component: 'RateQuotes', permissions: ['request_quotes'], config: {} },\r\n          { id: 'tracking', name: 'Tracking', component: 'Tracking', permissions: ['track_shipments'], config: {} },\r\n          { id: 'analytics', name: 'Analytics', component: 'Analytics', permissions: ['view_analytics'], config: {} }\r\n        ],\r\n        permissions: ['manage_shipments', 'request_quotes', 'track_shipments', 'view_analytics'],\r\n        metadata: {\r\n          title: 'Shipper Portal',\r\n          description: 'Complete shipper management portal',\r\n          keywords: ['shipper', 'shipments', 'quotes', 'tracking'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Driver Portal\r\n      {\r\n        id: 'driver-portal',\r\n        name: 'Driver Portal',\r\n        type: 'driver',\r\n        roles: ['driver'],\r\n        path: '/driver',\r\n        component: 'DriverPortal',\r\n        features: [\r\n          { id: 'load-assignments', name: 'Load Assignments', component: 'LoadAssignments', permissions: ['view_assignments'], config: {} },\r\n          { id: 'route-planning', name: 'Route Planning', component: 'RoutePlanning', permissions: ['plan_routes'], config: {} },\r\n          { id: 'time-tracking', name: 'Time Tracking', component: 'TimeTracking', permissions: ['track_time'], config: {} },\r\n          { id: 'documents', name: 'Documents', component: 'Documents', permissions: ['view_documents'], config: {} }\r\n        ],\r\n        permissions: ['view_assignments', 'plan_routes', 'track_time', 'view_documents'],\r\n        metadata: {\r\n          title: 'Driver Portal',\r\n          description: 'Complete driver management portal',\r\n          keywords: ['driver', 'assignments', 'routes', 'tracking'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Owner-Operator Portal\r\n      {\r\n        id: 'owner-operator-portal',\r\n        name: 'Owner-Operator Portal',\r\n        type: 'owner-operator',\r\n        roles: ['owner-operator'],\r\n        path: '/owner-operator',\r\n        component: 'OwnerOperatorPortal',\r\n        features: [\r\n          { id: 'business-management', name: 'Business Management', component: 'BusinessManagement', permissions: ['manage_business'], config: {} },\r\n          { id: 'financial-tracking', name: 'Financial Tracking', component: 'FinancialTracking', permissions: ['track_finances'], config: {} },\r\n          { id: 'load-opportunities', name: 'Load Opportunities', component: 'LoadOpportunities', permissions: ['view_opportunities'], config: {} },\r\n          { id: 'compliance', name: 'Compliance', component: 'Compliance', permissions: ['manage_compliance'], config: {} }\r\n        ],\r\n        permissions: ['manage_business', 'track_finances', 'view_opportunities', 'manage_compliance'],\r\n        metadata: {\r\n          title: 'Owner-Operator Portal',\r\n          description: 'Complete owner-operator management portal',\r\n          keywords: ['owner-operator', 'business', 'finances', 'compliance'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Admin Portal\r\n      {\r\n        id: 'admin-portal',\r\n        name: 'Admin Portal',\r\n        type: 'admin',\r\n        roles: ['admin', 'super-admin'],\r\n        path: '/admin',\r\n        component: 'AdminPortal',\r\n        features: [\r\n          { id: 'user-management', name: 'User Management', component: 'UserManagement', permissions: ['manage_users'], config: {} },\r\n          { id: 'system-configuration', name: 'System Configuration', component: 'SystemConfiguration', permissions: ['configure_system'], config: {} },\r\n          { id: 'monitoring', name: 'System Monitoring', component: 'Monitoring', permissions: ['monitor_system'], config: {} },\r\n          { id: 'reports', name: 'Reports', component: 'Reports', permissions: ['view_reports'], config: {} }\r\n        ],\r\n        permissions: ['manage_users', 'configure_system', 'monitor_system', 'view_reports'],\r\n        metadata: {\r\n          title: 'Admin Portal',\r\n          description: 'Complete admin management portal',\r\n          keywords: ['admin', 'users', 'system', 'monitoring'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Enterprise Portal\r\n      {\r\n        id: 'enterprise-portal',\r\n        name: 'Enterprise Portal',\r\n        type: 'enterprise',\r\n        roles: ['enterprise', 'admin'],\r\n        path: '/enterprise',\r\n        component: 'EnterprisePortal',\r\n        features: [\r\n          { id: 'multi-tenant-management', name: 'Multi-Tenant Management', component: 'MultiTenantManagement', permissions: ['manage_tenants'], config: {} },\r\n          { id: 'advanced-analytics', name: 'Advanced Analytics', component: 'AdvancedAnalytics', permissions: ['view_advanced_analytics'], config: {} },\r\n          { id: 'custom-integrations', name: 'Custom Integrations', component: 'CustomIntegrations', permissions: ['manage_integrations'], config: {} },\r\n          { id: 'white-label', name: 'White Label', component: 'WhiteLabel', permissions: ['customize_branding'], config: {} }\r\n        ],\r\n        permissions: ['manage_tenants', 'view_advanced_analytics', 'manage_integrations', 'customize_branding'],\r\n        metadata: {\r\n          title: 'Enterprise Portal',\r\n          description: 'Complete enterprise management portal',\r\n          keywords: ['enterprise', 'multi-tenant', 'analytics', 'integrations'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Marketplace Portal\r\n      {\r\n        id: 'marketplace-portal',\r\n        name: 'Marketplace Portal',\r\n        type: 'marketplace',\r\n        roles: ['carrier', 'broker', 'shipper'],\r\n        path: '/marketplace',\r\n        component: 'MarketplacePortal',\r\n        features: [\r\n          { id: 'load-board', name: 'Load Board', component: 'LoadBoard', permissions: ['view_loads', 'post_loads'], config: {} },\r\n          { id: 'rate-quotes', name: 'Rate Quotes', component: 'RateQuotes', permissions: ['request_quotes', 'provide_quotes'], config: {} },\r\n          { id: 'auctions', name: 'Auctions', component: 'Auctions', permissions: ['participate_auctions'], config: {} },\r\n          { id: 'reviews', name: 'Reviews & Ratings', component: 'Reviews', permissions: ['view_reviews', 'post_reviews'], config: {} }\r\n        ],\r\n        permissions: ['view_loads', 'post_loads', 'request_quotes', 'provide_quotes', 'participate_auctions', 'view_reviews', 'post_reviews'],\r\n        metadata: {\r\n          title: 'Marketplace Portal',\r\n          description: 'Complete marketplace portal',\r\n          keywords: ['marketplace', 'loads', 'quotes', 'auctions'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Analytics Portal\r\n      {\r\n        id: 'analytics-portal',\r\n        name: 'Analytics Portal',\r\n        type: 'analytics',\r\n        roles: ['analyst', 'admin', 'super-admin'],\r\n        path: '/analytics',\r\n        component: 'AnalyticsPortal',\r\n        features: [\r\n          { id: 'data-visualization', name: 'Data Visualization', component: 'DataVisualization', permissions: ['view_visualizations'], config: {} },\r\n          { id: 'reporting', name: 'Reporting', component: 'Reporting', permissions: ['generate_reports'], config: {} },\r\n          { id: 'predictive-analytics', name: 'Predictive Analytics', component: 'PredictiveAnalytics', permissions: ['view_predictions'], config: {} },\r\n          { id: 'business-intelligence', name: 'Business Intelligence', component: 'BusinessIntelligence', permissions: ['view_bi'], config: {} }\r\n        ],\r\n        permissions: ['view_visualizations', 'generate_reports', 'view_predictions', 'view_bi'],\r\n        metadata: {\r\n          title: 'Analytics Portal',\r\n          description: 'Complete analytics portal',\r\n          keywords: ['analytics', 'reports', 'predictions', 'business-intelligence'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Billing Portal\r\n      {\r\n        id: 'billing-portal',\r\n        name: 'Billing Portal',\r\n        type: 'billing',\r\n        roles: ['billing', 'admin'],\r\n        path: '/billing',\r\n        component: 'BillingPortal',\r\n        features: [\r\n          { id: 'invoice-management', name: 'Invoice Management', component: 'InvoiceManagement', permissions: ['manage_invoices'], config: {} },\r\n          { id: 'payment-processing', name: 'Payment Processing', component: 'PaymentProcessing', permissions: ['process_payments'], config: {} },\r\n          { id: 'financial-reports', name: 'Financial Reports', component: 'FinancialReports', permissions: ['view_financial_reports'], config: {} },\r\n          { id: 'subscription-management', name: 'Subscription Management', component: 'SubscriptionManagement', permissions: ['manage_subscriptions'], config: {} }\r\n        ],\r\n        permissions: ['manage_invoices', 'process_payments', 'view_financial_reports', 'manage_subscriptions'],\r\n        metadata: {\r\n          title: 'Billing Portal',\r\n          description: 'Complete billing management portal',\r\n          keywords: ['billing', 'invoices', 'payments', 'subscriptions'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      // Support Portal\r\n      {\r\n        id: 'support-portal',\r\n        name: 'Support Portal',\r\n        type: 'support',\r\n        roles: ['support', 'admin'],\r\n        path: '/support',\r\n        component: 'SupportPortal',\r\n        features: [\r\n          { id: 'ticket-management', name: 'Ticket Management', component: 'TicketManagement', permissions: ['manage_tickets'], config: {} },\r\n          { id: 'knowledge-base', name: 'Knowledge Base', component: 'KnowledgeBase', permissions: ['manage_knowledge_base'], config: {} },\r\n          { id: 'live-chat', name: 'Live Chat', component: 'LiveChat', permissions: ['manage_chat'], config: {} },\r\n          { id: 'customer-feedback', name: 'Customer Feedback', component: 'CustomerFeedback', permissions: ['view_feedback'], config: {} }\r\n        ],\r\n        permissions: ['manage_tickets', 'manage_knowledge_base', 'manage_chat', 'view_feedback'],\r\n        metadata: {\r\n          title: 'Support Portal',\r\n          description: 'Complete support management portal',\r\n          keywords: ['support', 'tickets', 'knowledge-base', 'chat'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      }\r\n    ];\r\n\r\n    defaultTemplates.forEach(template => {\r\n      this.templates.set(template.id, template);\r\n    });\r\n\r\n    this.logManager.log(`‚úÖ Initialized ${defaultTemplates.length} portal templates`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Initialize role-based permissions\r\n   */\r\n  private initializeRolePermissions(): void {\r\n    const rolePermissions: Record<UserRole, string[]> = {\r\n      'carrier': ['view_loads', 'bid_loads', 'manage_fleet', 'manage_dispatch', 'view_analytics'],\r\n      'broker': ['manage_loads', 'view_carriers', 'negotiate_rates', 'view_analytics'],\r\n      'shipper': ['manage_shipments', 'request_quotes', 'track_shipments', 'view_analytics'],\r\n      'driver': ['view_assignments', 'plan_routes', 'track_time', 'view_documents'],\r\n      'owner-operator': ['manage_business', 'track_finances', 'view_opportunities', 'manage_compliance'],\r\n      'admin': ['manage_users', 'configure_system', 'monitor_system', 'view_reports'],\r\n      'super-admin': ['manage_users', 'configure_system', 'monitor_system', 'view_reports', 'manage_all_portals'],\r\n      'enterprise': ['manage_tenants', 'view_advanced_analytics', 'manage_integrations', 'customize_branding'],\r\n      'analyst': ['view_visualizations', 'generate_reports', 'view_predictions', 'view_bi'],\r\n      'billing': ['manage_invoices', 'process_payments', 'view_financial_reports', 'manage_subscriptions'],\r\n      'support': ['manage_tickets', 'manage_knowledge_base', 'manage_chat', 'view_feedback']\r\n    };\r\n\r\n    Object.entries(rolePermissions).forEach(([role, permissions]) => {\r\n      this.rolePermissions.set(role as UserRole, permissions);\r\n    });\r\n\r\n    this.logManager.log(`‚úÖ Initialized permissions for ${Object.keys(rolePermissions).length} roles`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Start the portal development agent\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Portal Development Agent is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.logManager.log('üè¢ Starting Portal Development Agent...', 'info');\r\n\r\n    // Start autonomous portal creation and management\r\n    this.startAutonomousPortalManagement();\r\n\r\n    this.logManager.log('‚úÖ Portal Development Agent started successfully', 'success');\r\n  }\r\n\r\n  /**\r\n   * Stop the portal development agent\r\n   */\r\n  async stop(): Promise<void> {\r\n    this.isRunning = false;\r\n    this.logManager.log('üõë Stopping Portal Development Agent...', 'info');\r\n    this.logManager.log('‚úÖ Portal Development Agent stopped', 'success');\r\n  }\r\n\r\n  /**\r\n   * Start autonomous portal management\r\n   */\r\n  private startAutonomousPortalManagement(): void {\r\n    if (!this.isRunning) return;\r\n\r\n    // Autonomous portal creation cycle\r\n    setInterval(async () => {\r\n      if (!this.isRunning) return;\r\n\r\n      try {\r\n        await this.autonomousPortalCreationCycle();\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in autonomous portal creation cycle: ${error}`, 'error');\r\n      }\r\n    }, 60000); // 1 minute\r\n\r\n    // Autonomous portal optimization cycle\r\n    setInterval(async () => {\r\n      if (!this.isRunning) return;\r\n\r\n      try {\r\n        await this.autonomousPortalOptimizationCycle();\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in autonomous portal optimization cycle: ${error}`, 'error');\r\n      }\r\n    }, 180000); // 3 minutes\r\n  }\r\n\r\n  /**\r\n   * Autonomous portal creation cycle\r\n   */\r\n  private async autonomousPortalCreationCycle(): Promise<void> {\r\n    this.logManager.log('üîÑ Starting autonomous portal creation cycle...', 'info');\r\n\r\n    // Analyze current portals and identify gaps\r\n    const portalGaps = await this.analyzePortalGaps();\r\n    \r\n    // Create new portals based on gaps\r\n    for (const gap of portalGaps) {\r\n      await this.createPortalFromGap(gap);\r\n    }\r\n\r\n    // Update existing portals\r\n    await this.updateExistingPortals();\r\n\r\n    this.logManager.log('‚úÖ Autonomous portal creation cycle completed', 'success');\r\n  }\r\n\r\n  /**\r\n   * Autonomous portal optimization cycle\r\n   */\r\n  private async autonomousPortalOptimizationCycle(): Promise<void> {\r\n    this.logManager.log('üîÑ Starting autonomous portal optimization cycle...', 'info');\r\n\r\n    // Optimize portal performance\r\n    await this.optimizePortalPerformance();\r\n\r\n    // Improve user experience\r\n    await this.improvePortalUserExperience();\r\n\r\n    // Update portal features\r\n    await this.updatePortalFeatures();\r\n\r\n    this.logManager.log('‚úÖ Autonomous portal optimization cycle completed', 'success');\r\n  }\r\n\r\n  /**\r\n   * Analyze portal gaps\r\n   */\r\n  private async analyzePortalGaps(): Promise<any[]> {\r\n    const gaps = [];\r\n    const existingPortalTypes = Array.from(this.portals.values()).map(portal => portal.type);\r\n\r\n    // Check for missing essential portal types\r\n    const essentialPortalTypes: PortalType[] = ['carrier', 'broker', 'shipper', 'admin', 'marketplace'];\r\n    for (const portalType of essentialPortalTypes) {\r\n      if (!existingPortalTypes.includes(portalType)) {\r\n        gaps.push({\r\n          type: 'missing_essential',\r\n          portalType,\r\n          priority: 'high',\r\n          template: this.getTemplateForPortalType(portalType)\r\n        });\r\n      }\r\n    }\r\n\r\n    // Check for role-based portal gaps\r\n    const roleGaps = await this.identifyRoleBasedGaps();\r\n    gaps.push(...roleGaps);\r\n\r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Get template for portal type\r\n   */\r\n  private getTemplateForPortalType(portalType: PortalType): string {\r\n    const portalTypeToTemplate: Record<PortalType, string> = {\r\n      'carrier': 'carrier-portal',\r\n      'broker': 'broker-portal',\r\n      'shipper': 'shipper-portal',\r\n      'driver': 'driver-portal',\r\n      'owner-operator': 'owner-operator-portal',\r\n      'admin': 'admin-portal',\r\n      'super-admin': 'admin-portal',\r\n      'enterprise': 'enterprise-portal',\r\n      'marketplace': 'marketplace-portal',\r\n      'analytics': 'analytics-portal',\r\n      'billing': 'billing-portal',\r\n      'support': 'support-portal'\r\n    };\r\n\r\n    return portalTypeToTemplate[portalType] || 'admin-portal';\r\n  }\r\n\r\n  /**\r\n   * Identify role-based portal gaps\r\n   */\r\n  private async identifyRoleBasedGaps(): Promise<any[]> {\r\n    const gaps = [];\r\n\r\n    // Analyze user roles and identify missing portal access\r\n    const userRoleData = await this.getUserRoleData();\r\n    \r\n    // Check for roles without dedicated portals\r\n    for (const role of userRoleData.roles) {\r\n      const hasPortal = Array.from(this.portals.values()).some(portal => \r\n        portal.roles.includes(role)\r\n      );\r\n      \r\n      if (!hasPortal) {\r\n        gaps.push({\r\n          type: 'missing_role_access',\r\n          role,\r\n          priority: 'medium',\r\n          template: this.getTemplateForRole(role)\r\n        });\r\n      }\r\n    }\r\n\r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Get template for role\r\n   */\r\n  private getTemplateForRole(role: UserRole): string {\r\n    const roleToTemplate: Record<UserRole, string> = {\r\n      'carrier': 'carrier-portal',\r\n      'broker': 'broker-portal',\r\n      'shipper': 'shipper-portal',\r\n      'driver': 'driver-portal',\r\n      'owner-operator': 'owner-operator-portal',\r\n      'admin': 'admin-portal',\r\n      'super-admin': 'admin-portal',\r\n      'enterprise': 'enterprise-portal',\r\n      'analyst': 'analytics-portal',\r\n      'billing': 'billing-portal',\r\n      'support': 'support-portal'\r\n    };\r\n\r\n    return roleToTemplate[role] || 'admin-portal';\r\n  }\r\n\r\n  /**\r\n   * Create portal from gap\r\n   */\r\n  private async createPortalFromGap(gap: any): Promise<void> {\r\n    try {\r\n      const template = this.templates.get(gap.template);\r\n      if (!template) {\r\n        this.logManager.log(`‚ùå Template not found: ${gap.template}`, 'error');\r\n        return;\r\n      }\r\n\r\n      const portal: PortalInstance = {\r\n        id: `portal-${Date.now()}`,\r\n        name: gap.type === 'missing_essential' ? this.getPortalNameFromType(gap.portalType) : this.getPortalNameFromRole(gap.role),\r\n        type: gap.type === 'missing_essential' ? gap.portalType : this.getPortalTypeFromRole(gap.role),\r\n        roles: gap.type === 'missing_essential' ? template.roles : [gap.role],\r\n        path: gap.type === 'missing_essential' ? template.path : `/${gap.role}`,\r\n        component: template.component,\r\n        features: [...template.features],\r\n        status: 'draft',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        metadata: {\r\n          ...template.metadata,\r\n          title: gap.type === 'missing_essential' ? this.getPortalTitleFromType(gap.portalType) : this.getPortalTitleFromRole(gap.role),\r\n          description: `Auto-generated portal for ${gap.type === 'missing_essential' ? gap.portalType : gap.role}`,\r\n          lastModified: new Date()\r\n        },\r\n        config: {\r\n          theme: 'default',\r\n          layout: 'standard',\r\n          features: {},\r\n          permissions: this.getPermissionsForRoles(gap.type === 'missing_essential' ? template.roles : [gap.role])\r\n        }\r\n      };\r\n\r\n      this.portals.set(portal.id, portal);\r\n      \r\n      // Deploy portal to production if production access is enabled\r\n      if (this.productionAccess) {\r\n        await this.deployPortal(portal);\r\n      }\r\n\r\n      this.logManager.log(`‚úÖ Created portal: ${portal.name} (${portal.path})`, 'success');\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to create portal from gap: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get portal name from type\r\n   */\r\n  private getPortalNameFromType(portalType: PortalType): string {\r\n    const portalTypeToName: Record<PortalType, string> = {\r\n      'carrier': 'Carrier Portal',\r\n      'broker': 'Broker Portal',\r\n      'shipper': 'Shipper Portal',\r\n      'driver': 'Driver Portal',\r\n      'owner-operator': 'Owner-Operator Portal',\r\n      'admin': 'Admin Portal',\r\n      'super-admin': 'Super Admin Portal',\r\n      'enterprise': 'Enterprise Portal',\r\n      'marketplace': 'Marketplace Portal',\r\n      'analytics': 'Analytics Portal',\r\n      'billing': 'Billing Portal',\r\n      'support': 'Support Portal'\r\n    };\r\n\r\n    return portalTypeToName[portalType] || 'Custom Portal';\r\n  }\r\n\r\n  /**\r\n   * Get portal name from role\r\n   */\r\n  private getPortalNameFromRole(role: UserRole): string {\r\n    return `${role.charAt(0).toUpperCase() + role.slice(1)} Portal`;\r\n  }\r\n\r\n  /**\r\n   * Get portal type from role\r\n   */\r\n  private getPortalTypeFromRole(role: UserRole): PortalType {\r\n    const roleToPortalType: Record<UserRole, PortalType> = {\r\n      'carrier': 'carrier',\r\n      'broker': 'broker',\r\n      'shipper': 'shipper',\r\n      'driver': 'driver',\r\n      'owner-operator': 'owner-operator',\r\n      'admin': 'admin',\r\n      'super-admin': 'super-admin',\r\n      'enterprise': 'enterprise',\r\n      'analyst': 'analytics',\r\n      'billing': 'billing',\r\n      'support': 'support'\r\n    };\r\n\r\n    return roleToPortalType[role] || 'admin';\r\n  }\r\n\r\n  /**\r\n   * Get portal title from type\r\n   */\r\n  private getPortalTitleFromType(portalType: PortalType): string {\r\n    return this.getPortalNameFromType(portalType);\r\n  }\r\n\r\n  /**\r\n   * Get portal title from role\r\n   */\r\n  private getPortalTitleFromRole(role: UserRole): string {\r\n    return this.getPortalNameFromRole(role);\r\n  }\r\n\r\n  /**\r\n   * Get permissions for roles\r\n   */\r\n  private getPermissionsForRoles(roles: UserRole[]): Record<string, boolean> {\r\n    const permissions: Record<string, boolean> = {};\r\n    \r\n    roles.forEach(role => {\r\n      const rolePerms = this.rolePermissions.get(role) || [];\r\n      rolePerms.forEach(perm => {\r\n        permissions[perm] = true;\r\n      });\r\n    });\r\n\r\n    return permissions;\r\n  }\r\n\r\n  /**\r\n   * Update existing portals\r\n   */\r\n  private async updateExistingPortals(): Promise<void> {\r\n    for (const [id, portal] of this.portals) {\r\n      try {\r\n        // Update portal features based on latest requirements\r\n        await this.updatePortalFeatures(portal);\r\n        \r\n        // Optimize portal performance\r\n        await this.optimizePortalPerformance(portal);\r\n        \r\n        portal.updatedAt = new Date();\r\n        portal.metadata.lastModified = new Date();\r\n        \r\n        this.logManager.log(`‚úÖ Updated portal: ${portal.name}`, 'success');\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Failed to update portal ${portal.name}: ${error}`, 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deploy portal to production\r\n   */\r\n  private async deployPortal(portal: PortalInstance): Promise<void> {\r\n    try {\r\n      this.logManager.log(`üöÄ Deploying portal to production: ${portal.name}`, 'info');\r\n      \r\n      // Simulate deployment process\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      portal.status = 'published';\r\n      \r\n      this.logManager.log(`‚úÖ Portal deployed successfully: ${portal.name}`, 'success');\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to deploy portal ${portal.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize portal performance\r\n   */\r\n  private async optimizePortalPerformance(portal?: PortalInstance): Promise<void> {\r\n    if (portal) {\r\n      // Optimize specific portal\r\n      this.logManager.log(`‚ö° Optimizing performance for: ${portal.name}`, 'info');\r\n    } else {\r\n      // Optimize all portals\r\n      this.logManager.log('‚ö° Optimizing performance for all portals...', 'info');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Improve portal user experience\r\n   */\r\n  private async improvePortalUserExperience(): Promise<void> {\r\n    this.logManager.log('üé® Improving portal user experience...', 'info');\r\n    \r\n    // Analyze user interactions and improve UX\r\n    const userInteractions = await this.getUserInteractions();\r\n    \r\n    // Apply UX improvements based on data\r\n    for (const interaction of userInteractions) {\r\n      await this.applyPortalUXImprovement(interaction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update portal features\r\n   */\r\n  private async updatePortalFeatures(portal?: PortalInstance): Promise<void> {\r\n    if (portal) {\r\n      // Update specific portal features\r\n      this.logManager.log(`üîß Updating features for: ${portal.name}`, 'info');\r\n    } else {\r\n      // Update all portal features\r\n      this.logManager.log('üîß Updating features for all portals...', 'info');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user role data (simulated)\r\n   */\r\n  private async getUserRoleData(): Promise<any> {\r\n    return {\r\n      roles: ['carrier', 'broker', 'shipper', 'driver', 'owner-operator', 'admin', 'analyst', 'billing', 'support'],\r\n      roleDistribution: {\r\n        'carrier': 25,\r\n        'broker': 20,\r\n        'shipper': 15,\r\n        'driver': 30,\r\n        'owner-operator': 10\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get user interactions (simulated)\r\n   */\r\n  private async getUserInteractions(): Promise<any[]> {\r\n    return [\r\n      { type: 'portal_access', portal: 'carrier', action: 'login' },\r\n      { type: 'feature_usage', portal: 'broker', feature: 'load_management' },\r\n      { type: 'navigation', portal: 'shipper', path: '/shipments' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Apply portal UX improvement\r\n   */\r\n  private async applyPortalUXImprovement(interaction: any): Promise<void> {\r\n    this.logManager.log(`üéØ Applying portal UX improvement for: ${interaction.type}`, 'info');\r\n  }\r\n\r\n  /**\r\n   * Create custom portal\r\n   */\r\n  async createCustomPortal(portalData: Partial<PortalInstance>): Promise<PortalInstance> {\r\n    const portal: PortalInstance = {\r\n      id: `portal-${Date.now()}`,\r\n      name: portalData.name || 'Custom Portal',\r\n      type: portalData.type || 'admin',\r\n      roles: portalData.roles || ['admin'],\r\n      path: portalData.path || '/custom',\r\n      component: portalData.component || 'CustomPortal',\r\n      features: portalData.features || [],\r\n      status: 'draft',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      metadata: {\r\n        title: portalData.metadata?.title || 'Custom Portal',\r\n        description: portalData.metadata?.description || 'Auto-generated custom portal',\r\n        keywords: portalData.metadata?.keywords || ['custom'],\r\n        author: 'Autonomous Agent',\r\n        lastModified: new Date()\r\n      },\r\n      config: {\r\n        theme: 'default',\r\n        layout: 'standard',\r\n        features: {},\r\n        permissions: this.getPermissionsForRoles(portalData.roles || ['admin'])\r\n      }\r\n    };\r\n\r\n    this.portals.set(portal.id, portal);\r\n    \r\n    if (this.productionAccess) {\r\n      await this.deployPortal(portal);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Created custom portal: ${portal.name}`, 'success');\r\n    return portal;\r\n  }\r\n\r\n  /**\r\n   * Get all portals\r\n   */\r\n  getAllPortals(): PortalInstance[] {\r\n    return Array.from(this.portals.values());\r\n  }\r\n\r\n  /**\r\n   * Get portal by ID\r\n   */\r\n  getPortal(id: string): PortalInstance | undefined {\r\n    return this.portals.get(id);\r\n  }\r\n\r\n  /**\r\n   * Get portal by path\r\n   */\r\n  getPortalByPath(path: string): PortalInstance | undefined {\r\n    return Array.from(this.portals.values()).find(portal => portal.path === path);\r\n  }\r\n\r\n  /**\r\n   * Get portals by type\r\n   */\r\n  getPortalsByType(type: PortalType): PortalInstance[] {\r\n    return Array.from(this.portals.values()).filter(portal => portal.type === type);\r\n  }\r\n\r\n  /**\r\n   * Get portals by role\r\n   */\r\n  getPortalsByRole(role: UserRole): PortalInstance[] {\r\n    return Array.from(this.portals.values()).filter(portal => portal.roles.includes(role));\r\n  }\r\n\r\n  /**\r\n   * Update portal\r\n   */\r\n  async updatePortal(id: string, updates: Partial<PortalInstance>): Promise<void> {\r\n    const portal = this.portals.get(id);\r\n    if (!portal) {\r\n      throw new Error(`Portal not found: ${id}`);\r\n    }\r\n\r\n    Object.assign(portal, updates);\r\n    portal.updatedAt = new Date();\r\n    portal.metadata.lastModified = new Date();\r\n\r\n    if (this.productionAccess) {\r\n      await this.deployPortal(portal);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Updated portal: ${portal.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Delete portal\r\n   */\r\n  async deletePortal(id: string): Promise<void> {\r\n    const portal = this.portals.get(id);\r\n    if (!portal) {\r\n      throw new Error(`Portal not found: ${id}`);\r\n    }\r\n\r\n    this.portals.delete(id);\r\n    this.logManager.log(`‚úÖ Deleted portal: ${portal.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Enable/disable production access\r\n   */\r\n  setProductionAccess(enabled: boolean): void {\r\n    this.productionAccess = enabled;\r\n    this.logManager.log(`üîß Production access ${enabled ? 'enabled' : 'disabled'}`, 'info');\r\n  }\r\n\r\n  /**\r\n   * Get agent status\r\n   */\r\n  getStatus(): any {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      totalPortals: this.portals.size,\r\n      publishedPortals: Array.from(this.portals.values()).filter(p => p.status === 'published').length,\r\n      draftPortals: Array.from(this.portals.values()).filter(p => p.status === 'draft').length,\r\n      productionAccess: this.productionAccess,\r\n      portalTypes: Array.from(new Set(Array.from(this.portals.values()).map(p => p.type))),\r\n      supportedRoles: Array.from(this.rolePermissions.keys()),\r\n      lastActivity: new Date()\r\n    };\r\n  }\r\n}\r\n\r\nexport default PortalDevelopmentAgent;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\PortalManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\TransBotAIWebsiteBuilder.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":433,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":433,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":434,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":434,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from '../../autonomous-system/LogManager';\r\nimport { DatabaseManager } from '../../autonomous-system/DatabaseManager';\r\nimport { NotificationManager } from '../../autonomous-system/NotificationManager';\r\n\r\nexport interface PageTemplate {\r\n  name: string;\r\n  path: string;\r\n  component: string;\r\n  content: string;\r\n  priority: number;\r\n}\r\n\r\nexport interface WebsitePage {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  component: string;\r\n  content: string;\r\n  status: 'draft' | 'in-progress' | 'completed' | 'published';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport class TransBotAIWebsiteBuilder {\r\n  private logManager: LogManager;\r\n  private databaseManager: DatabaseManager;\r\n  private notificationManager: NotificationManager;\r\n  private isRunning: boolean = false;\r\n  private buildInterval: NodeJS.Timeout | null = null;\r\n  private pagesBuilt: number = 0;\r\n  private targetPages: number = 50;\r\n\r\n  // Page templates for autonomous generation\r\n  private pageTemplates: PageTemplate[] = [\r\n    {\r\n      name: 'Home',\r\n      path: '/',\r\n      component: 'HomePage',\r\n      content: 'Landing page with hero section, features, and CTA',\r\n      priority: 1\r\n    },\r\n    {\r\n      name: 'About',\r\n      path: '/about',\r\n      component: 'AboutPage',\r\n      content: 'Company information, mission, values, and team',\r\n      priority: 2\r\n    },\r\n    {\r\n      name: 'Features',\r\n      path: '/features',\r\n      component: 'FeaturesPage',\r\n      content: 'Detailed feature showcase with AI capabilities',\r\n      priority: 3\r\n    },\r\n    {\r\n      name: 'Pricing',\r\n      path: '/pricing',\r\n      component: 'PricingPage',\r\n      content: 'Pricing plans and comparison table',\r\n      priority: 4\r\n    },\r\n    {\r\n      name: 'Contact',\r\n      path: '/contact',\r\n      component: 'ContactPage',\r\n      content: 'Contact form and company information',\r\n      priority: 5\r\n    },\r\n    {\r\n      name: 'Blog',\r\n      path: '/blog',\r\n      component: 'BlogPage',\r\n      content: 'Blog listing with articles and insights',\r\n      priority: 6\r\n    },\r\n    {\r\n      name: 'Solutions',\r\n      path: '/solutions',\r\n      component: 'SolutionsPage',\r\n      content: 'Industry-specific solutions and use cases',\r\n      priority: 7\r\n    },\r\n    {\r\n      name: 'Resources',\r\n      path: '/resources',\r\n      component: 'ResourcesPage',\r\n      content: 'Whitepapers, guides, and educational content',\r\n      priority: 8\r\n    },\r\n    {\r\n      name: 'Support',\r\n      path: '/support',\r\n      component: 'SupportPage',\r\n      content: 'Help center, documentation, and support options',\r\n      priority: 9\r\n    },\r\n    {\r\n      name: 'Careers',\r\n      path: '/careers',\r\n      component: 'CareersPage',\r\n      content: 'Job openings and company culture',\r\n      priority: 10\r\n    }\r\n  ];\r\n\r\n  // Additional pages for comprehensive website\r\n  private additionalPages: string[] = [\r\n    'Privacy Policy',\r\n    'Terms of Service',\r\n    'Security',\r\n    'Compliance',\r\n    'API Documentation',\r\n    'Integration Guide',\r\n    'Case Studies',\r\n    'Customer Stories',\r\n    'Press Kit',\r\n    'Partners',\r\n    'Investors',\r\n    'News',\r\n    'Events',\r\n    'Webinars',\r\n    'Training',\r\n    'Certification',\r\n    'Community',\r\n    'Developer Hub',\r\n    'Marketplace',\r\n    'Roadmap',\r\n    'Changelog',\r\n    'Status',\r\n    'Trust Center',\r\n    'Sustainability',\r\n    'Diversity',\r\n    'Accessibility',\r\n    'Legal',\r\n    'Cookie Policy',\r\n    'GDPR',\r\n    'CCPA',\r\n    'HIPAA',\r\n    'SOC2',\r\n    'ISO27001',\r\n    'FedRAMP',\r\n    'Enterprise',\r\n    'SMB',\r\n    'Startups',\r\n    'Government',\r\n    'Healthcare',\r\n    'Retail',\r\n    'Manufacturing',\r\n    'Logistics',\r\n    'E-commerce',\r\n    'Food & Beverage',\r\n    'Pharmaceuticals',\r\n    'Automotive',\r\n    'Aerospace',\r\n    'Energy',\r\n    'Construction'\r\n  ];\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n    this.databaseManager = new DatabaseManager();\r\n    this.notificationManager = new NotificationManager();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.logManager.log('ü§ñ Initializing Trans Bot AI Website Builder...', 'info');\r\n      \r\n      await this.databaseManager.initialize();\r\n      await this.notificationManager.initialize();\r\n      \r\n      // Initialize website pages table\r\n      await this.initializeWebsitePagesTable();\r\n      \r\n      this.logManager.log('‚úÖ Trans Bot AI Website Builder initialized successfully', 'success');\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to initialize Website Builder: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Website Builder is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = true;\r\n      this.logManager.log('üöÄ Starting Trans Bot AI Website Builder...', 'info');\r\n      \r\n      // Start autonomous page building\r\n      await this.startAutonomousPageBuilding();\r\n      \r\n      this.logManager.log('‚úÖ Trans Bot AI Website Builder started successfully', 'success');\r\n      this.logManager.log('üéØ Building 50+ pages for Trans Bot AI website...', 'info');\r\n      this.logManager.log('ü§ñ No human intervention required - system is fully autonomous', 'info');\r\n      \r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to start Website Builder: ${error}`, 'error');\r\n      this.isRunning = false;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Website Builder is not running', 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = false;\r\n      \r\n      if (this.buildInterval) {\r\n        clearInterval(this.buildInterval);\r\n        this.buildInterval = null;\r\n      }\r\n      \r\n      this.logManager.log('üõë Trans Bot AI Website Builder stopped successfully', 'success');\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to stop Website Builder: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async initializeWebsitePagesTable(): Promise<void> {\r\n    const createTableQuery = `\r\n      CREATE TABLE IF NOT EXISTS website_pages (\r\n        id SERIAL PRIMARY KEY,\r\n        name VARCHAR(255) NOT NULL,\r\n        path VARCHAR(255) NOT NULL UNIQUE,\r\n        component VARCHAR(255) NOT NULL,\r\n        content TEXT,\r\n        status VARCHAR(50) DEFAULT 'draft',\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n      );\r\n    `;\r\n\r\n    await this.databaseManager.executeQuery(createTableQuery);\r\n    this.logManager.log('‚úÖ Website pages table initialized', 'success');\r\n  }\r\n\r\n  private async startAutonomousPageBuilding(): Promise<void> {\r\n    // Start building pages immediately\r\n    await this.buildNextPage();\r\n    \r\n    // Set up continuous building every 30 seconds\r\n    this.buildInterval = setInterval(async () => {\r\n      if (this.isRunning && this.pagesBuilt < this.targetPages) {\r\n        await this.buildNextPage();\r\n      } else if (this.pagesBuilt >= this.targetPages) {\r\n        this.logManager.log('üéâ Target of 50+ pages reached! Website building complete.', 'success');\r\n        await this.stop();\r\n      }\r\n    }, 30000); // 30 seconds\r\n  }\r\n\r\n  private async buildNextPage(): Promise<void> {\r\n    try {\r\n      // Determine which page to build next\r\n      const nextPage = await this.getNextPageToBuild();\r\n      \r\n      if (nextPage) {\r\n        await this.buildPage(nextPage);\r\n        this.pagesBuilt++;\r\n        \r\n        this.logManager.log(`üìÑ Built page ${this.pagesBuilt}/${this.targetPages}: ${nextPage.name}`, 'success');\r\n        \r\n        // Send notification every 10 pages\r\n        if (this.pagesBuilt % 10 === 0) {\r\n          await this.notificationManager.sendNotification({\r\n            type: 'info',\r\n            title: 'Website Building Progress',\r\n            message: `Successfully built ${this.pagesBuilt} pages for Trans Bot AI website`,\r\n            priority: 'low'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error building page: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  private async getNextPageToBuild(): Promise<PageTemplate | null> {\r\n    try {\r\n      // First, build core template pages\r\n      for (const template of this.pageTemplates) {\r\n        const exists = await this.pageExists(template.path);\r\n        if (!exists) {\r\n          return template;\r\n        }\r\n      }\r\n      \r\n      // Then build additional pages\r\n      for (const pageName of this.additionalPages) {\r\n        const path = `/${pageName.toLowerCase().replace(/\\s+/g, '-')}`;\r\n        const exists = await this.pageExists(path);\r\n        if (!exists) {\r\n          return {\r\n            name: pageName,\r\n            path: path,\r\n            component: `${pageName.replace(/\\s+/g, '')}Page`,\r\n            content: `Content for ${pageName} page`,\r\n            priority: 11\r\n          };\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting next page: ${error}`, 'error');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async pageExists(path: string): Promise<boolean> {\r\n    try {\r\n      const query = 'SELECT COUNT(*) as count FROM website_pages WHERE path = $1';\r\n      const result = await this.databaseManager.executeQuery(query, [path]);\r\n      return parseInt(result.rows[0]?.count || '0') > 0;\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error checking page existence: ${error}`, 'error');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async buildPage(template: PageTemplate): Promise<void> {\r\n    try {\r\n      // Generate page content based on template\r\n      const content = await this.generatePageContent(template);\r\n      \r\n      // Create the page file\r\n      await this.createPageFile(template, content);\r\n      \r\n      // Save to database\r\n      await this.savePageToDatabase(template, content);\r\n      \r\n      this.logManager.log(`‚úÖ Successfully built page: ${template.name}`, 'success');\r\n      \r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error building page ${template.name}: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async generatePageContent(template: PageTemplate): Promise<string> {\r\n    // Generate content based on page type\r\n    switch (template.name.toLowerCase()) {\r\n      case 'home':\r\n        return this.generateHomePageContent();\r\n      case 'about':\r\n        return this.generateAboutPageContent();\r\n      case 'features':\r\n        return this.generateFeaturesPageContent();\r\n      case 'pricing':\r\n        return this.generatePricingPageContent();\r\n      case 'contact':\r\n        return this.generateContactPageContent();\r\n      case 'blog':\r\n        return this.generateBlogPageContent();\r\n      default:\r\n        return this.generateGenericPageContent(template);\r\n    }\r\n  }\r\n\r\n  private generateHomePageContent(): string {\r\n    return `\r\n      // Home page content with hero section, features, and CTA\r\n      // AI-generated content for Trans Bot AI landing page\r\n      // Includes compelling copy, statistics, and conversion elements\r\n    `;\r\n  }\r\n\r\n  private generateAboutPageContent(): string {\r\n    return `\r\n      // About page content with company story, mission, values\r\n      // Team information and company achievements\r\n      // AI-generated content optimized for trust and credibility\r\n    `;\r\n  }\r\n\r\n  private generateFeaturesPageContent(): string {\r\n    return `\r\n      // Features page content showcasing AI capabilities\r\n      // Detailed feature descriptions with benefits and use cases\r\n      // Interactive elements and technical specifications\r\n    `;\r\n  }\r\n\r\n  private generatePricingPageContent(): string {\r\n    return `\r\n      // Pricing page content with plans and comparison\r\n      // Transparent pricing structure with value propositions\r\n      // FAQ section and trial information\r\n    `;\r\n  }\r\n\r\n  private generateContactPageContent(): string {\r\n    return `\r\n      // Contact page content with form and company information\r\n      // Multiple contact methods and department routing\r\n      // Location information and business hours\r\n    `;\r\n  }\r\n\r\n  private generateBlogPageContent(): string {\r\n    return `\r\n      // Blog page content with article listings and categories\r\n      // Search functionality and filtering options\r\n      // Newsletter signup and related content\r\n    `;\r\n  }\r\n\r\n  private generateGenericPageContent(template: PageTemplate): string {\r\n    return `\r\n      // Generic page content for ${template.name}\r\n      // AI-generated content optimized for SEO and user experience\r\n      // Includes relevant information and call-to-action elements\r\n    `;\r\n  }\r\n\r\n  private async createPageFile(template: PageTemplate, content: string): Promise<void> {\r\n    try {\r\n      const filePath = `src/pages/${template.component}.tsx`;\r\n      \r\n      // Create the actual React component file\r\n      this.logManager.log(`üìù Creating file: ${filePath}`, 'info');\r\n      \r\n      // Import fs module for file operations\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // Ensure the directory exists\r\n      const dir = path.dirname(filePath);\r\n      if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir, { recursive: true });\r\n      }\r\n      \r\n      // Write the file to disk\r\n      fs.writeFileSync(filePath, content, 'utf8');\r\n      \r\n      this.logManager.log(`‚úÖ Successfully created file: ${filePath}`, 'success');\r\n      \r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error creating page file: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async savePageToDatabase(template: PageTemplate, content: string): Promise<void> {\r\n    try {\r\n      const query = `\r\n        INSERT INTO website_pages (name, path, component, content, status)\r\n        VALUES ($1, $2, $3, $4, $5)\r\n        ON CONFLICT (path) DO UPDATE SET\r\n          name = EXCLUDED.name,\r\n          component = EXCLUDED.component,\r\n          content = EXCLUDED.content,\r\n          status = EXCLUDED.status,\r\n          updated_at = CURRENT_TIMESTAMP\r\n      `;\r\n      \r\n      await this.databaseManager.executeQuery(query, [\r\n        template.name,\r\n        template.path,\r\n        template.component,\r\n        content,\r\n        'completed'\r\n      ]);\r\n      \r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error saving page to database: ${error}`, 'error');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getBuildProgress(): Promise<{ built: number; total: number; percentage: number }> {\r\n    const total = this.targetPages;\r\n    const built = this.pagesBuilt;\r\n    const percentage = Math.round((built / total) * 100);\r\n    \r\n    return { built, total, percentage };\r\n  }\r\n\r\n  async getBuiltPages(): Promise<WebsitePage[]> {\r\n    try {\r\n      const query = 'SELECT * FROM website_pages ORDER BY created_at DESC';\r\n      const result = await this.databaseManager.executeQuery(query);\r\n      return result.rows.map(row => ({\r\n        id: row.id.toString(),\r\n        name: row.name,\r\n        path: row.path,\r\n        component: row.component,\r\n        content: row.content,\r\n        status: row.status,\r\n        createdAt: new Date(row.created_at),\r\n        updatedAt: new Date(row.updated_at)\r\n      }));\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Error getting built pages: ${error}`, 'error');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.databaseManager.isReady() && this.notificationManager.isReady();\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\WebsiteDevelopmentAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176,179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176,179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6115,6118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6115,6118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7295,7298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7295,7298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":295,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8020,8023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8020,8023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":440,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12555,12558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12555,12558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13304,13307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13304,13307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":473,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13627,13630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13627,13630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16249,16252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16249,16252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogManager } from '../../autonomous-system/LogManager';\r\n\r\ninterface PageTemplate {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  component: string;\r\n  content: any;\r\n  metadata: {\r\n    title: string;\r\n    description: string;\r\n    keywords: string[];\r\n    author: string;\r\n    lastModified: Date;\r\n  };\r\n}\r\n\r\ninterface WebsitePage {\r\n  id: string;\r\n  name: string;\r\n  path: string;\r\n  component: string;\r\n  content: any;\r\n  status: 'draft' | 'published' | 'archived';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  metadata: {\r\n    title: string;\r\n    description: string;\r\n    keywords: string[];\r\n    author: string;\r\n    lastModified: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * üåê Autonomous Website Development Agent\r\n * Creates, modifies, and deploys website pages with full production access\r\n */\r\nexport class WebsiteDevelopmentAgent {\r\n  private logManager: LogManager;\r\n  private isRunning: boolean = false;\r\n  private pages: Map<string, WebsitePage> = new Map();\r\n  private templates: Map<string, PageTemplate> = new Map();\r\n  private productionAccess: boolean = true;\r\n\r\n  constructor() {\r\n    this.logManager = new LogManager();\r\n    this.initializeTemplates();\r\n  }\r\n\r\n  /**\r\n   * Initialize page templates\r\n   */\r\n  private initializeTemplates(): void {\r\n    const defaultTemplates: PageTemplate[] = [\r\n      {\r\n        id: 'landing-page',\r\n        name: 'Landing Page',\r\n        path: '/landing',\r\n        component: 'LandingPage',\r\n        content: {\r\n          hero: {\r\n            title: 'Welcome to Our Platform',\r\n            subtitle: 'Discover amazing features',\r\n            cta: 'Get Started'\r\n          },\r\n          features: [],\r\n          testimonials: []\r\n        },\r\n        metadata: {\r\n          title: 'Landing Page',\r\n          description: 'Main landing page',\r\n          keywords: ['landing', 'home', 'welcome'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      {\r\n        id: 'dashboard-page',\r\n        name: 'Dashboard Page',\r\n        path: '/dashboard',\r\n        component: 'DashboardPage',\r\n        content: {\r\n          widgets: [],\r\n          charts: [],\r\n          metrics: []\r\n        },\r\n        metadata: {\r\n          title: 'Dashboard',\r\n          description: 'User dashboard',\r\n          keywords: ['dashboard', 'analytics', 'metrics'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      },\r\n      {\r\n        id: 'about-page',\r\n        name: 'About Page',\r\n        path: '/about',\r\n        component: 'AboutPage',\r\n        content: {\r\n          company: {\r\n            name: 'Our Company',\r\n            description: 'Company description',\r\n            mission: 'Our mission',\r\n            vision: 'Our vision'\r\n          },\r\n          team: [],\r\n          history: []\r\n        },\r\n        metadata: {\r\n          title: 'About Us',\r\n          description: 'Learn about our company',\r\n          keywords: ['about', 'company', 'team'],\r\n          author: 'Autonomous Agent',\r\n          lastModified: new Date()\r\n        }\r\n      }\r\n    ];\r\n\r\n    defaultTemplates.forEach(template => {\r\n      this.templates.set(template.id, template);\r\n    });\r\n\r\n    this.logManager.log(`‚úÖ Initialized ${defaultTemplates.length} page templates`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Start the website development agent\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      this.logManager.log('‚ö†Ô∏è Website Development Agent is already running', 'warning');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.logManager.log('üåê Starting Website Development Agent...', 'info');\r\n\r\n    // Start autonomous page creation and management\r\n    this.startAutonomousPageManagement();\r\n\r\n    this.logManager.log('‚úÖ Website Development Agent started successfully', 'success');\r\n  }\r\n\r\n  /**\r\n   * Stop the website development agent\r\n   */\r\n  async stop(): Promise<void> {\r\n    this.isRunning = false;\r\n    this.logManager.log('üõë Stopping Website Development Agent...', 'info');\r\n    this.logManager.log('‚úÖ Website Development Agent stopped', 'success');\r\n  }\r\n\r\n  /**\r\n   * Start autonomous page management\r\n   */\r\n  private startAutonomousPageManagement(): void {\r\n    if (!this.isRunning) return;\r\n\r\n    // Autonomous page creation cycle\r\n    setInterval(async () => {\r\n      if (!this.isRunning) return;\r\n\r\n      try {\r\n        await this.autonomousPageCreationCycle();\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in autonomous page creation cycle: ${error}`, 'error');\r\n      }\r\n    }, 45000); // 45 seconds\r\n\r\n    // Autonomous page optimization cycle\r\n    setInterval(async () => {\r\n      if (!this.isRunning) return;\r\n\r\n      try {\r\n        await this.autonomousPageOptimizationCycle();\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Error in autonomous page optimization cycle: ${error}`, 'error');\r\n      }\r\n    }, 120000); // 2 minutes\r\n  }\r\n\r\n  /**\r\n   * Autonomous page creation cycle\r\n   */\r\n  private async autonomousPageCreationCycle(): Promise<void> {\r\n    this.logManager.log('üîÑ Starting autonomous page creation cycle...', 'info');\r\n\r\n    // Analyze current pages and identify gaps\r\n    const pageGaps = await this.analyzePageGaps();\r\n    \r\n    // Create new pages based on gaps\r\n    for (const gap of pageGaps) {\r\n      await this.createPageFromGap(gap);\r\n    }\r\n\r\n    // Update existing pages\r\n    await this.updateExistingPages();\r\n\r\n    this.logManager.log('‚úÖ Autonomous page creation cycle completed', 'success');\r\n  }\r\n\r\n  /**\r\n   * Autonomous page optimization cycle\r\n   */\r\n  private async autonomousPageOptimizationCycle(): Promise<void> {\r\n    this.logManager.log('üîÑ Starting autonomous page optimization cycle...', 'info');\r\n\r\n    // Optimize page performance\r\n    await this.optimizePagePerformance();\r\n\r\n    // Improve user experience\r\n    await this.improveUserExperience();\r\n\r\n    // Update content\r\n    await this.updatePageContent();\r\n\r\n    this.logManager.log('‚úÖ Autonomous page optimization cycle completed', 'success');\r\n  }\r\n\r\n  /**\r\n   * Analyze page gaps\r\n   */\r\n  private async analyzePageGaps(): Promise<any[]> {\r\n    const gaps = [];\r\n    const existingPaths = Array.from(this.pages.values()).map(page => page.path);\r\n\r\n    // Check for missing essential pages\r\n    const essentialPages = ['/about', '/contact', '/services', '/pricing', '/blog'];\r\n    for (const path of essentialPages) {\r\n      if (!existingPaths.includes(path)) {\r\n        gaps.push({\r\n          type: 'missing_essential',\r\n          path,\r\n          priority: 'high',\r\n          template: this.getTemplateForPath(path)\r\n        });\r\n      }\r\n    }\r\n\r\n    // Check for content gaps\r\n    const contentGaps = await this.identifyContentGaps();\r\n    gaps.push(...contentGaps);\r\n\r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Get template for path\r\n   */\r\n  private getTemplateForPath(path: string): string {\r\n    const pathToTemplate: Record<string, string> = {\r\n      '/about': 'about-page',\r\n      '/contact': 'contact-page',\r\n      '/services': 'services-page',\r\n      '/pricing': 'pricing-page',\r\n      '/blog': 'blog-page',\r\n      '/dashboard': 'dashboard-page'\r\n    };\r\n\r\n    return pathToTemplate[path] || 'landing-page';\r\n  }\r\n\r\n  /**\r\n   * Identify content gaps\r\n   */\r\n  private async identifyContentGaps(): Promise<any[]> {\r\n    const gaps = [];\r\n\r\n    // Analyze user behavior and identify missing content\r\n    const userBehaviorData = await this.getUserBehaviorData();\r\n    \r\n    // Check for high-demand but missing content\r\n    if (userBehaviorData.searchTerms && userBehaviorData.searchTerms.length > 0) {\r\n      for (const term of userBehaviorData.searchTerms.slice(0, 5)) {\r\n        if (!this.hasContentForTerm(term)) {\r\n          gaps.push({\r\n            type: 'missing_content',\r\n            searchTerm: term,\r\n            priority: 'medium',\r\n            template: 'content-page'\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return gaps;\r\n  }\r\n\r\n  /**\r\n   * Create page from gap\r\n   */\r\n  private async createPageFromGap(gap: any): Promise<void> {\r\n    try {\r\n      const template = this.templates.get(gap.template);\r\n      if (!template) {\r\n        this.logManager.log(`‚ùå Template not found: ${gap.template}`, 'error');\r\n        return;\r\n      }\r\n\r\n      const page: WebsitePage = {\r\n        id: `page-${Date.now()}`,\r\n        name: gap.type === 'missing_essential' ? this.getPageNameFromPath(gap.path) : gap.searchTerm,\r\n        path: gap.path || `/${gap.searchTerm?.toLowerCase().replace(/\\s+/g, '-')}`,\r\n        component: template.component,\r\n        content: { ...template.content },\r\n        status: 'draft',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        metadata: {\r\n          ...template.metadata,\r\n          title: gap.type === 'missing_essential' ? this.getPageTitleFromPath(gap.path) : gap.searchTerm,\r\n          description: `Auto-generated page for ${gap.type === 'missing_essential' ? gap.path : gap.searchTerm}`,\r\n          lastModified: new Date()\r\n        }\r\n      };\r\n\r\n      this.pages.set(page.id, page);\r\n      \r\n      // Deploy page to production if production access is enabled\r\n      if (this.productionAccess) {\r\n        await this.deployPage(page);\r\n      }\r\n\r\n      this.logManager.log(`‚úÖ Created page: ${page.name} (${page.path})`, 'success');\r\n\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to create page from gap: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get page name from path\r\n   */\r\n  private getPageNameFromPath(path: string): string {\r\n    const pathToName: Record<string, string> = {\r\n      '/about': 'About Us',\r\n      '/contact': 'Contact',\r\n      '/services': 'Services',\r\n      '/pricing': 'Pricing',\r\n      '/blog': 'Blog'\r\n    };\r\n\r\n    return pathToName[path] || path.substring(1).charAt(0).toUpperCase() + path.substring(2);\r\n  }\r\n\r\n  /**\r\n   * Get page title from path\r\n   */\r\n  private getPageTitleFromPath(path: string): string {\r\n    return this.getPageNameFromPath(path);\r\n  }\r\n\r\n  /**\r\n   * Update existing pages\r\n   */\r\n  private async updateExistingPages(): Promise<void> {\r\n    for (const [id, page] of this.pages) {\r\n      try {\r\n        // Update page content based on latest data\r\n        await this.updatePageContent(page);\r\n        \r\n        // Optimize page performance\r\n        await this.optimizePagePerformance(page);\r\n        \r\n        page.updatedAt = new Date();\r\n        page.metadata.lastModified = new Date();\r\n        \r\n        this.logManager.log(`‚úÖ Updated page: ${page.name}`, 'success');\r\n      } catch (error) {\r\n        this.logManager.log(`‚ùå Failed to update page ${page.name}: ${error}`, 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deploy page to production\r\n   */\r\n  private async deployPage(page: WebsitePage): Promise<void> {\r\n    try {\r\n      this.logManager.log(`üöÄ Deploying page to production: ${page.name}`, 'info');\r\n      \r\n      // Simulate deployment process\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      page.status = 'published';\r\n      \r\n      this.logManager.log(`‚úÖ Page deployed successfully: ${page.name}`, 'success');\r\n    } catch (error) {\r\n      this.logManager.log(`‚ùå Failed to deploy page ${page.name}: ${error}`, 'error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize page performance\r\n   */\r\n  private async optimizePagePerformance(page?: WebsitePage): Promise<void> {\r\n    if (page) {\r\n      // Optimize specific page\r\n      this.logManager.log(`‚ö° Optimizing performance for: ${page.name}`, 'info');\r\n    } else {\r\n      // Optimize all pages\r\n      this.logManager.log('‚ö° Optimizing performance for all pages...', 'info');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Improve user experience\r\n   */\r\n  private async improveUserExperience(): Promise<void> {\r\n    this.logManager.log('üé® Improving user experience...', 'info');\r\n    \r\n    // Analyze user interactions and improve UX\r\n    const userInteractions = await this.getUserInteractions();\r\n    \r\n    // Apply UX improvements based on data\r\n    for (const interaction of userInteractions) {\r\n      await this.applyUXImprovement(interaction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update page content\r\n   */\r\n  private async updatePageContent(page?: WebsitePage): Promise<void> {\r\n    if (page) {\r\n      // Update specific page content\r\n      this.logManager.log(`üìù Updating content for: ${page.name}`, 'info');\r\n    } else {\r\n      // Update all pages content\r\n      this.logManager.log('üìù Updating content for all pages...', 'info');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user behavior data (simulated)\r\n   */\r\n  private async getUserBehaviorData(): Promise<any> {\r\n    return {\r\n      searchTerms: ['logistics', 'transportation', 'shipping', 'freight', 'delivery'],\r\n      popularPages: ['/dashboard', '/load-board', '/rates'],\r\n      userJourneys: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if content exists for search term\r\n   */\r\n  private hasContentForTerm(term: string): boolean {\r\n    return Array.from(this.pages.values()).some(page => \r\n      page.metadata.title.toLowerCase().includes(term.toLowerCase()) ||\r\n      page.metadata.description.toLowerCase().includes(term.toLowerCase()) ||\r\n      page.metadata.keywords.some(keyword => keyword.toLowerCase().includes(term.toLowerCase()))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get user interactions (simulated)\r\n   */\r\n  private async getUserInteractions(): Promise<any[]> {\r\n    return [\r\n      { type: 'click', element: 'button', page: '/dashboard' },\r\n      { type: 'scroll', direction: 'down', page: '/load-board' },\r\n      { type: 'search', query: 'logistics', page: '/search' }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Apply UX improvement\r\n   */\r\n  private async applyUXImprovement(interaction: any): Promise<void> {\r\n    this.logManager.log(`üéØ Applying UX improvement for: ${interaction.type}`, 'info');\r\n  }\r\n\r\n  /**\r\n   * Get all pages\r\n   */\r\n  getAllPages(): WebsitePage[] {\r\n    return Array.from(this.pages.values());\r\n  }\r\n\r\n  /**\r\n   * Get page by ID\r\n   */\r\n  getPage(id: string): WebsitePage | undefined {\r\n    return this.pages.get(id);\r\n  }\r\n\r\n  /**\r\n   * Get page by path\r\n   */\r\n  getPageByPath(path: string): WebsitePage | undefined {\r\n    return Array.from(this.pages.values()).find(page => page.path === path);\r\n  }\r\n\r\n  /**\r\n   * Create custom page\r\n   */\r\n  async createCustomPage(pageData: Partial<WebsitePage>): Promise<WebsitePage> {\r\n    const page: WebsitePage = {\r\n      id: `page-${Date.now()}`,\r\n      name: pageData.name || 'Custom Page',\r\n      path: pageData.path || '/custom',\r\n      component: pageData.component || 'CustomPage',\r\n      content: pageData.content || {},\r\n      status: 'draft',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      metadata: {\r\n        title: pageData.metadata?.title || 'Custom Page',\r\n        description: pageData.metadata?.description || 'Auto-generated custom page',\r\n        keywords: pageData.metadata?.keywords || ['custom'],\r\n        author: 'Autonomous Agent',\r\n        lastModified: new Date()\r\n      }\r\n    };\r\n\r\n    this.pages.set(page.id, page);\r\n    \r\n    if (this.productionAccess) {\r\n      await this.deployPage(page);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Created custom page: ${page.name}`, 'success');\r\n    return page;\r\n  }\r\n\r\n  /**\r\n   * Update page\r\n   */\r\n  async updatePage(id: string, updates: Partial<WebsitePage>): Promise<void> {\r\n    const page = this.pages.get(id);\r\n    if (!page) {\r\n      throw new Error(`Page not found: ${id}`);\r\n    }\r\n\r\n    Object.assign(page, updates);\r\n    page.updatedAt = new Date();\r\n    page.metadata.lastModified = new Date();\r\n\r\n    if (this.productionAccess) {\r\n      await this.deployPage(page);\r\n    }\r\n\r\n    this.logManager.log(`‚úÖ Updated page: ${page.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Delete page\r\n   */\r\n  async deletePage(id: string): Promise<void> {\r\n    const page = this.pages.get(id);\r\n    if (!page) {\r\n      throw new Error(`Page not found: ${id}`);\r\n    }\r\n\r\n    this.pages.delete(id);\r\n    this.logManager.log(`‚úÖ Deleted page: ${page.name}`, 'success');\r\n  }\r\n\r\n  /**\r\n   * Enable/disable production access\r\n   */\r\n  setProductionAccess(enabled: boolean): void {\r\n    this.productionAccess = enabled;\r\n    this.logManager.log(`üîß Production access ${enabled ? 'enabled' : 'disabled'}`, 'info');\r\n  }\r\n\r\n  /**\r\n   * Get agent status\r\n   */\r\n  getStatus(): any {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      totalPages: this.pages.size,\r\n      publishedPages: Array.from(this.pages.values()).filter(p => p.status === 'published').length,\r\n      draftPages: Array.from(this.pages.values()).filter(p => p.status === 'draft').length,\r\n      productionAccess: this.productionAccess,\r\n      lastActivity: new Date()\r\n    };\r\n  }\r\n}\r\n\r\nexport default WebsiteDevelopmentAgent;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\WebsitePageAgent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2669,2672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2669,2672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3808,3811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3808,3811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4919,4922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4919,4922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6319,6322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6319,6322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":245,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":245,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":246,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":246,"endColumn":35},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":307,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":307,"endColumn":33},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":308,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":308,"endColumn":37}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface PageTemplate {\r\n  name: string;\r\n  path: string;\r\n  component: string;\r\n  content: string;\r\n  type: 'page' | 'component' | 'layout';\r\n  priority: number;\r\n}\r\n\r\ninterface PageUpdate {\r\n  path: string;\r\n  updates: {\r\n    content?: string;\r\n    metadata?: Record<string, any>;\r\n    status?: 'active' | 'inactive' | 'draft';\r\n  };\r\n}\r\n\r\nexport class WebsitePageAgent {\r\n  private agentId: string;\r\n  private isActive: boolean = false;\r\n\r\n  constructor(agentId: string = 'website-page-agent') {\r\n    this.agentId = agentId;\r\n  }\r\n\r\n  async activate(): Promise<void> {\r\n    this.isActive = true;\r\n    console.log(`ü§ñ Website Page Agent ${this.agentId} activated`);\r\n    \r\n    // Start monitoring for page creation/update requests\r\n    this.startMonitoring();\r\n  }\r\n\r\n  async deactivate(): Promise<void> {\r\n    this.isActive = false;\r\n    console.log(`ü§ñ Website Page Agent ${this.agentId} deactivated`);\r\n  }\r\n\r\n  private async startMonitoring(): Promise<void> {\r\n    if (!this.isActive) return;\r\n\r\n    // Monitor for page creation requests\r\n    setInterval(async () => {\r\n      if (!this.isActive) return;\r\n      \r\n      try {\r\n        await this.checkForPageRequests();\r\n        await this.checkForPageUpdates();\r\n      } catch (error) {\r\n        console.error('Website Page Agent monitoring error:', error);\r\n      }\r\n    }, 30000); // Check every 30 seconds\r\n  }\r\n\r\n  private async checkForPageRequests(): Promise<void> {\r\n    try {\r\n      // Check for pending page creation requests\r\n      const { data: requests, error } = await supabase\r\n        .from('autonomous_tasks')\r\n        .select('*')\r\n        .eq('agent_type', 'frontend')\r\n        .eq('status', 'pending')\r\n        .like('task_name', '%page%')\r\n        .limit(5);\r\n\r\n      if (error) throw error;\r\n\r\n      for (const request of requests || []) {\r\n        await this.processPageRequest(request);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking page requests:', error);\r\n    }\r\n  }\r\n\r\n  private async checkForPageUpdates(): Promise<void> {\r\n    try {\r\n      // Check for page update requests\r\n      const { data: updates, error } = await supabase\r\n        .from('autonomous_tasks')\r\n        .select('*')\r\n        .eq('agent_type', 'frontend')\r\n        .eq('status', 'pending')\r\n        .like('task_name', '%update%')\r\n        .limit(5);\r\n\r\n      if (error) throw error;\r\n\r\n      for (const update of updates || []) {\r\n        await this.processPageUpdate(update);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking page updates:', error);\r\n    }\r\n  }\r\n\r\n  private async processPageRequest(request: any): Promise<void> {\r\n    try {\r\n      console.log(`üìù Processing page request: ${request.task_name}`);\r\n\r\n      // Mark as processing\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ status: 'processing' })\r\n        .eq('id', request.id);\r\n\r\n      // Generate page content based on request\r\n      const pageTemplate = await this.generatePageTemplate(request);\r\n      \r\n      // Create the page\r\n      await this.createPage(pageTemplate);\r\n\r\n      // Mark as completed\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ \r\n          status: 'completed',\r\n          result: { page_created: pageTemplate.path }\r\n        })\r\n        .eq('id', request.id);\r\n\r\n      console.log(`‚úÖ Page created: ${pageTemplate.path}`);\r\n\r\n    } catch (error) {\r\n      console.error('Error processing page request:', error);\r\n      \r\n      // Mark as failed\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ \r\n          status: 'failed',\r\n          result: { error: error.message }\r\n        })\r\n        .eq('id', request.id);\r\n    }\r\n  }\r\n\r\n  private async processPageUpdate(update: any): Promise<void> {\r\n    try {\r\n      console.log(`üîÑ Processing page update: ${update.task_name}`);\r\n\r\n      // Mark as processing\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ status: 'processing' })\r\n        .eq('id', update.id);\r\n\r\n      // Extract update information\r\n      const pageUpdate = await this.parsePageUpdate(update);\r\n      \r\n      // Update the page\r\n      await this.updatePage(pageUpdate);\r\n\r\n      // Mark as completed\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ \r\n          status: 'completed',\r\n          result: { page_updated: pageUpdate.path }\r\n        })\r\n        .eq('id', update.id);\r\n\r\n      console.log(`‚úÖ Page updated: ${pageUpdate.path}`);\r\n\r\n    } catch (error) {\r\n      console.error('Error processing page update:', error);\r\n      \r\n      // Mark as failed\r\n      await supabase\r\n        .from('autonomous_tasks')\r\n        .update({ \r\n          status: 'failed',\r\n          result: { error: error.message }\r\n        })\r\n        .eq('id', update.id);\r\n    }\r\n  }\r\n\r\n  private async generatePageTemplate(request: any): Promise<PageTemplate> {\r\n    // Extract page information from request\r\n    const taskName = request.task_name.toLowerCase();\r\n    \r\n    let pageTemplate: PageTemplate;\r\n\r\n    if (taskName.includes('user management')) {\r\n      pageTemplate = {\r\n        name: 'User Management',\r\n        path: '/admin/users',\r\n        component: 'UserManagement',\r\n        type: 'page',\r\n        priority: 8,\r\n        content: this.generateUserManagementContent()\r\n      };\r\n    } else if (taskName.includes('settings')) {\r\n      pageTemplate = {\r\n        name: 'Settings Dashboard',\r\n        path: '/admin/settings',\r\n        component: 'SettingsDashboard',\r\n        type: 'page',\r\n        priority: 7,\r\n        content: this.generateSettingsContent()\r\n      };\r\n    } else if (taskName.includes('analytics')) {\r\n      pageTemplate = {\r\n        name: 'Analytics Dashboard',\r\n        path: '/admin/analytics',\r\n        component: 'AnalyticsDashboard',\r\n        type: 'page',\r\n        priority: 9,\r\n        content: this.generateAnalyticsContent()\r\n      };\r\n    } else {\r\n      // Generic page template\r\n      pageTemplate = {\r\n        name: 'Generic Page',\r\n        path: '/admin/generic',\r\n        component: 'GenericPage',\r\n        type: 'page',\r\n        priority: 5,\r\n        content: this.generateGenericContent()\r\n      };\r\n    }\r\n\r\n    return pageTemplate;\r\n  }\r\n\r\n  private async parsePageUpdate(update: any): Promise<PageUpdate> {\r\n    // Parse the update request to extract what needs to be updated\r\n    const taskName = update.task_name.toLowerCase();\r\n    \r\n    return {\r\n      path: '/admin/example', // Extract from task\r\n      updates: {\r\n        content: 'Updated content...',\r\n        status: 'active'\r\n      }\r\n    };\r\n  }\r\n\r\n  private async createPage(template: PageTemplate): Promise<void> {\r\n    try {\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // Determine file path\r\n      let filePath: string;\r\n      switch (template.type) {\r\n        case 'page':\r\n          filePath = `src/pages/${template.component}.tsx`;\r\n          break;\r\n        case 'component':\r\n          filePath = `src/components/${template.component}.tsx`;\r\n          break;\r\n        case 'layout':\r\n          filePath = `src/components/layout/${template.component}.tsx`;\r\n          break;\r\n        default:\r\n          filePath = `src/pages/${template.component}.tsx`;\r\n      }\r\n      \r\n      // Ensure directory exists\r\n      const dir = path.dirname(filePath);\r\n      if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir, { recursive: true });\r\n      }\r\n      \r\n      // Write the file\r\n      fs.writeFileSync(filePath, template.content, 'utf8');\r\n      \r\n      // Save to database\r\n      await supabase.from('website_pages').upsert({\r\n        name: template.name,\r\n        path: template.path,\r\n        component: template.component,\r\n        content: template.content,\r\n        status: 'active',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      });\r\n      \r\n      console.log(`‚úÖ Page created successfully: ${filePath}`);\r\n      \r\n    } catch (error) {\r\n      console.error('Error creating page:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async updatePage(pageUpdate: PageUpdate): Promise<void> {\r\n    try {\r\n      // Find the page in database\r\n      const { data: page, error } = await supabase\r\n        .from('website_pages')\r\n        .select('*')\r\n        .eq('path', pageUpdate.path)\r\n        .single();\r\n\r\n      if (error || !page) {\r\n        throw new Error(`Page not found: ${pageUpdate.path}`);\r\n      }\r\n\r\n      // Update the page content\r\n      if (pageUpdate.updates.content) {\r\n        const fs = require('fs');\r\n        const path = require('path');\r\n        \r\n        const filePath = `src/pages/${page.component}.tsx`;\r\n        fs.writeFileSync(filePath, pageUpdate.updates.content, 'utf8');\r\n      }\r\n\r\n      // Update database record\r\n      await supabase\r\n        .from('website_pages')\r\n        .update({\r\n          content: pageUpdate.updates.content || page.content,\r\n          status: pageUpdate.updates.status || page.status,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('path', pageUpdate.path);\r\n\r\n      console.log(`‚úÖ Page updated successfully: ${pageUpdate.path}`);\r\n      \r\n    } catch (error) {\r\n      console.error('Error updating page:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private generateUserManagementContent(): string {\r\n    return `import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Users, Plus, Search, Edit, Trash2 } from 'lucide-react';\r\n\r\nconst UserManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Load users data\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">User Management</h1>\r\n          <p className=\"text-muted-foreground\">Manage system users and permissions</p>\r\n        </div>\r\n        <Button>\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          Add User\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Users</CardTitle>\r\n          <CardDescription>Manage all system users</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Search users...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"max-w-sm\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              {users.length === 0 && !loading && (\r\n                <p className=\"text-muted-foreground\">No users found</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;`;\r\n  }\r\n\r\n  private generateSettingsContent(): string {\r\n    return `import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Settings, Shield, Database, Bell, Globe } from 'lucide-react';\r\n\r\nconst SettingsDashboard = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\r\n        <p className=\"text-muted-foreground\">Configure system settings and preferences</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Shield className=\"h-5 w-5 mr-2\" />\r\n              Security\r\n            </CardTitle>\r\n            <CardDescription>Manage security settings and permissions</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Database className=\"h-5 w-5 mr-2\" />\r\n              Database\r\n            </CardTitle>\r\n            <CardDescription>Database configuration and maintenance</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Bell className=\"h-5 w-5 mr-2\" />\r\n              Notifications\r\n            </CardTitle>\r\n            <CardDescription>Configure notification preferences</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsDashboard;`;\r\n  }\r\n\r\n  private generateAnalyticsContent(): string {\r\n    return `import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { BarChart, LineChart, PieChart, TrendingUp } from 'lucide-react';\r\n\r\nconst AnalyticsDashboard = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold\">Analytics Dashboard</h1>\r\n        <p className=\"text-muted-foreground\">View system analytics and performance metrics</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\r\n            <BarChart className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">1,234</div>\r\n            <p className=\"text-xs text-muted-foreground\">+20.1% from last month</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Sessions</CardTitle>\r\n            <LineChart className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">567</div>\r\n            <p className=\"text-xs text-muted-foreground\">+12.5% from last month</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">System Load</CardTitle>\r\n            <PieChart className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">78%</div>\r\n            <p className=\"text-xs text-muted-foreground\">Optimal performance</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Uptime</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">99.9%</div>\r\n            <p className=\"text-xs text-muted-foreground\">Last 30 days</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsDashboard;`;\r\n  }\r\n\r\n  private generateGenericContent(): string {\r\n    return `import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n\r\nconst GenericPage = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold\">Generic Page</h1>\r\n        <p className=\"text-muted-foreground\">This is a generic page template</p>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Content</CardTitle>\r\n          <CardDescription>Page content goes here</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p>This is a placeholder for page content.</p>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenericPage;`;\r\n  }\r\n\r\n  // Public method to manually create a page\r\n  async createPageManually(template: PageTemplate): Promise<void> {\r\n    await this.createPage(template);\r\n  }\r\n\r\n  // Public method to manually update a page\r\n  async updatePageManually(pageUpdate: PageUpdate): Promise<void> {\r\n    await this.updatePage(pageUpdate);\r\n  }\r\n\r\n  // Get agent status\r\n  getStatus(): { active: boolean; agentId: string } {\r\n    return {\r\n      active: this.isActive,\r\n      agentId: this.agentId\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\agents\\agent001.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\api\\routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\api\\website-builder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\auth\\RequireAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\CTASection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\DeprecatedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\FeaturesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\LazyPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\SolutionsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\TestimonialsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\access\\RolesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\access\\UsersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\admin\\AdminPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\admin\\UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\AIConfidenceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\AIConfidenceFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\AIConfidenceLogCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\AIConfidenceStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\DecisionLogsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\LowConfidenceAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ai-confidence\\RealtimeConfidenceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\alerts\\AlertCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\alerts\\AlertDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\alerts\\AlertStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analysis\\PortalAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\AILearningMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\AnalyticsPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\PerformanceMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\RoleSpecificMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\SystemHealthMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\UserBehaviorTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\user-behavior\\FeatureUsageCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\user-behavior\\SessionActivityTimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\user-behavior\\UserActivityOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\user-behavior\\UserJourneyInsights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\analytics\\user-behavior\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIErrorTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIErrors.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIKeys.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIKeysManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APILogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APILogsViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\APIOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\api\\EdgeFunctionMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\ComplianceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\FleetTrackerTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\FuelAuditTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\TrailersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\TrucksTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\assets\\UnitsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\auth\\RoleSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AIAgentManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AIInsightsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AdvancedFeatureCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AgentDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1240,1243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1240,1243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\nimport { Loader2, Play, AlertTriangle, CheckCircle, XCircle, RefreshCw, Eye } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useAutonomousFeature } from \"@/hooks/useEntitlement\";\r\n\r\ninterface AgentTask {\r\n  id: string;\r\n  fn_name: string;\r\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'quarantined';\r\n  attempts: number;\r\n  max_attempts: number;\r\n  last_error?: string;\r\n  created_at: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n}\r\n\r\ninterface AgentRun {\r\n  id: string;\r\n  task_id: string;\r\n  status: 'started' | 'completed' | 'failed';\r\n  result?: any;\r\n  error?: string;\r\n  duration_ms: number;\r\n  started_at: string;\r\n  completed_at?: string;\r\n}\r\n\r\ninterface QuarantinedTask {\r\n  id: string;\r\n  task_id: string;\r\n  reason: string;\r\n  last_error: string;\r\n  quarantine_date: string;\r\n  resolved_at?: string;\r\n}\r\n\r\nexport function AgentDashboard() {\r\n  const { toast } = useToast();\r\n  const queryClient = useQueryClient();\r\n  const hasAutonomousFeature = useAutonomousFeature();\r\n  const [selectedTask, setSelectedTask] = useState<AgentTask | null>(null);\r\n\r\n  // Fetch agent tasks\r\n  const { data: tasks, isLoading: tasksLoading } = useQuery({\r\n    queryKey: [\"agent-tasks\"],\r\n    queryFn: async () => {\r\n      const response = await fetch(\"/api/agent/tasks\");\r\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\r\n      return response.json() as AgentTask[];\r\n    },\r\n    refetchInterval: 5000, // Refresh every 5 seconds\r\n  });\r\n\r\n  // Fetch agent runs\r\n  const { data: runs, isLoading: runsLoading } = useQuery({\r\n    queryKey: [\"agent-runs\"],\r\n    queryFn: async () => {\r\n      const response = await fetch(\"/api/agent/runs\");\r\n      if (!response.ok) throw new Error(\"Failed to fetch runs\");\r\n      return response.json() as AgentRun[];\r\n    },\r\n    refetchInterval: 10000, // Refresh every 10 seconds\r\n  });\r\n\r\n  // Fetch quarantined tasks\r\n  const { data: quarantined, isLoading: quarantineLoading } = useQuery({\r\n    queryKey: [\"agent-quarantine\"],\r\n    queryFn: async () => {\r\n      const response = await fetch(\"/api/agent/quarantine\");\r\n      if (!response.ok) throw new Error(\"Failed to fetch quarantine\");\r\n      return response.json() as QuarantinedTask[];\r\n    },\r\n    refetchInterval: 15000, // Refresh every 15 seconds\r\n  });\r\n\r\n  // Retry quarantined task mutation\r\n  const retryMutation = useMutation({\r\n    mutationFn: async (taskId: string) => {\r\n      const response = await fetch(`/api/agent/quarantine/${taskId}/retry`, {\r\n        method: \"POST\",\r\n      });\r\n      if (!response.ok) throw new Error(\"Failed to retry task\");\r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"agent-tasks\"] });\r\n      queryClient.invalidateQueries({ queryKey: [\"agent-quarantine\"] });\r\n      toast({\r\n        title: \"Task Retried\",\r\n        description: \"The task has been moved back to the queue.\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Retry Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n\r\n  // Manual task execution mutation\r\n  const executeMutation = useMutation({\r\n    mutationFn: async (taskId: string) => {\r\n      const response = await fetch(`/api/agent/tasks/${taskId}/execute`, {\r\n        method: \"POST\",\r\n      });\r\n      if (!response.ok) throw new Error(\"Failed to execute task\");\r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"agent-tasks\"] });\r\n      queryClient.invalidateQueries({ queryKey: [\"agent-runs\"] });\r\n      toast({\r\n        title: \"Task Executed\",\r\n        description: \"The task has been executed successfully.\",\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Execution Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n\r\n  if (!hasAutonomousFeature) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            Autonomous Agent Dashboard\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage and monitor autonomous agent tasks\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center gap-2 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n            <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\r\n            <div>\r\n              <p className=\"font-medium text-yellow-800\">Feature Not Available</p>\r\n              <p className=\"text-sm text-yellow-700\">\r\n                Autonomous agents are not available in your current plan. Upgrade to access this feature.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'pending':\r\n        return <Badge variant=\"secondary\">Pending</Badge>;\r\n      case 'running':\r\n        return <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">Running</Badge>;\r\n      case 'completed':\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Completed</Badge>;\r\n      case 'failed':\r\n        return <Badge variant=\"destructive\">Failed</Badge>;\r\n      case 'quarantined':\r\n        return <Badge variant=\"outline\" className=\"border-red-200 text-red-700\">Quarantined</Badge>;\r\n      default:\r\n        return <Badge variant=\"secondary\">{status}</Badge>;\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'pending':\r\n        return <Loader2 className=\"h-4 w-4 animate-spin\" />;\r\n      case 'running':\r\n        return <Play className=\"h-4 w-4\" />;\r\n      case 'completed':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'failed':\r\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\r\n      case 'quarantined':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <RefreshCw className=\"h-5 w-5\" />\r\n            Autonomous Agent Dashboard\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage and monitor autonomous agent tasks and execution\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"tasks\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"tasks\">Active Tasks</TabsTrigger>\r\n              <TabsTrigger value=\"runs\">Execution History</TabsTrigger>\r\n              <TabsTrigger value=\"quarantine\">Quarantine</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"tasks\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Active Tasks</h3>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => queryClient.invalidateQueries({ queryKey: [\"agent-tasks\"] })}\r\n                >\r\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                  Refresh\r\n                </Button>\r\n              </div>\r\n\r\n              {tasksLoading ? (\r\n                <div className=\"flex items-center justify-center p-8\">\r\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Function</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Attempts</TableHead>\r\n                      <TableHead>Created</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {tasks?.map((task) => (\r\n                      <TableRow key={task.id}>\r\n                        <TableCell className=\"font-mono text-sm\">{task.fn_name}</TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getStatusIcon(task.status)}\r\n                            {getStatusBadge(task.status)}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {task.attempts}/{task.max_attempts}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {new Date(task.created_at).toLocaleString()}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex gap-2\">\r\n                            <Dialog>\r\n                              <DialogTrigger asChild>\r\n                                <Button variant=\"outline\" size=\"sm\">\r\n                                  <Eye className=\"h-4 w-4\" />\r\n                                </Button>\r\n                              </DialogTrigger>\r\n                              <DialogContent>\r\n                                <DialogHeader>\r\n                                  <DialogTitle>Task Details</DialogTitle>\r\n                                  <DialogDescription>\r\n                                    Detailed information about task {task.id}\r\n                                  </DialogDescription>\r\n                                </DialogHeader>\r\n                                <div className=\"space-y-4\">\r\n                                  <div>\r\n                                    <strong>Function:</strong> {task.fn_name}\r\n                                  </div>\r\n                                  <div>\r\n                                    <strong>Status:</strong> {task.status}\r\n                                  </div>\r\n                                  <div>\r\n                                    <strong>Attempts:</strong> {task.attempts}/{task.max_attempts}\r\n                                  </div>\r\n                                  {task.last_error && (\r\n                                    <div>\r\n                                      <strong>Last Error:</strong>\r\n                                      <pre className=\"mt-2 p-2 bg-red-50 text-red-700 rounded text-sm\">\r\n                                        {task.last_error}\r\n                                      </pre>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              </DialogContent>\r\n                            </Dialog>\r\n                            \r\n                            {task.status === 'pending' && (\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => executeMutation.mutate(task.id)}\r\n                                disabled={executeMutation.isPending}\r\n                              >\r\n                                <Play className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"runs\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Execution History</h3>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => queryClient.invalidateQueries({ queryKey: [\"agent-runs\"] })}\r\n                >\r\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                  Refresh\r\n                </Button>\r\n              </div>\r\n\r\n              {runsLoading ? (\r\n                <div className=\"flex items-center justify-center p-8\">\r\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Task ID</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Duration</TableHead>\r\n                      <TableHead>Started</TableHead>\r\n                      <TableHead>Completed</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {runs?.slice(0, 20).map((run) => (\r\n                      <TableRow key={run.id}>\r\n                        <TableCell className=\"font-mono text-sm\">{run.task_id.slice(0, 8)}...</TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getStatusIcon(run.status)}\r\n                            {getStatusBadge(run.status)}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>{run.duration_ms}ms</TableCell>\r\n                        <TableCell>\r\n                          {new Date(run.started_at).toLocaleString()}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {run.completed_at ? new Date(run.completed_at).toLocaleString() : '-'}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"quarantine\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Quarantined Tasks</h3>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => queryClient.invalidateQueries({ queryKey: [\"agent-quarantine\"] })}\r\n                >\r\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                  Refresh\r\n                </Button>\r\n              </div>\r\n\r\n              {quarantineLoading ? (\r\n                <div className=\"flex items-center justify-center p-8\">\r\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Task ID</TableHead>\r\n                      <TableHead>Reason</TableHead>\r\n                      <TableHead>Error</TableHead>\r\n                      <TableHead>Quarantined</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {quarantined?.map((item) => (\r\n                      <TableRow key={item.id}>\r\n                        <TableCell className=\"font-mono text-sm\">{item.task_id.slice(0, 8)}...</TableCell>\r\n                        <TableCell>{item.reason}</TableCell>\r\n                        <TableCell>\r\n                          <div className=\"max-w-xs truncate\" title={item.last_error}>\r\n                            {item.last_error}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {new Date(item.quarantine_date).toLocaleString()}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => retryMutation.mutate(item.task_id)}\r\n                            disabled={retryMutation.isPending}\r\n                          >\r\n                            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                            Retry\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AgentTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AllAgentsActive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousAIController.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousActivationControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousAgentCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousAgentDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousAgentFleet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousAgentStatusDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousDesignEngine.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'triggerNewOptimization'. Either include it or remove the dependency array.","line":228,"column":6,"nodeType":"ArrayExpression","endLine":228,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [isEngineActive, triggerNewOptimization]","fix":{"range":[8193,8209],"text":"[isEngineActive, triggerNewOptimization]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { \r\n  Palette, \r\n  Eye, \r\n  TrendingUp, \r\n  Brush, \r\n  Layout, \r\n  Monitor,\r\n  Sparkles,\r\n  RefreshCw,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Activity,\r\n  Brain,\r\n  Target,\r\n  Zap,\r\n  Shield,\r\n  Users,\r\n  MousePointer,\r\n  Accessibility,\r\n  Contrast,\r\n  Type,\r\n  Smartphone,\r\n  Tablet,\r\n  Laptop,\r\n  Settings,\r\n  BarChart3,\r\n  Lightbulb,\r\n  Wand2,\r\n  Cpu,\r\n  Globe,\r\n  Layers\r\n} from 'lucide-react';\r\n\r\ninterface DesignAgent {\r\n  id: string;\r\n  name: string;\r\n  type: 'ui' | 'ux' | 'accessibility' | 'performance' | 'responsive' | 'visual';\r\n  status: 'active' | 'optimizing' | 'idle' | 'analyzing';\r\n  tasksCompleted: number;\r\n  efficiency: number;\r\n  lastAction: string;\r\n  icon: React.ComponentType<unknown>;\r\n}\r\n\r\ninterface DesignOptimization {\r\n  id: string;\r\n  portal: 'driver' | 'carrier' | 'broker' | 'shipper' | 'super_admin' | 'owner_operator' | 'all';\r\n  category: 'colors' | 'typography' | 'spacing' | 'layout' | 'interactions' | 'accessibility';\r\n  description: string;\r\n  impact: 'low' | 'medium' | 'high' | 'critical';\r\n  confidence: number;\r\n  autoApply: boolean;\r\n  status: 'pending' | 'applied' | 'testing' | 'reverted';\r\n  timestamp: string;\r\n  metrics?: {\r\n    userSatisfaction?: number;\r\n    performanceImpact?: number;\r\n    accessibilityScore?: number;\r\n  };\r\n}\r\n\r\ninterface PortalDesignScore {\r\n  portal: string;\r\n  overall: number;\r\n  categories: {\r\n    visual: number;\r\n    usability: number;\r\n    accessibility: number;\r\n    performance: number;\r\n    mobile: number;\r\n  };\r\n  lastUpdated: string;\r\n  trend: 'improving' | 'stable' | 'declining';\r\n}\r\n\r\nconst AutonomousDesignEngine = () => {\r\n  const { toast } = useToast();\r\n  \r\n  const [designAgents, setDesignAgents] = useState<DesignAgent[]>([\r\n    { id: '1', name: 'Color Harmony AI', type: 'visual', status: 'active', tasksCompleted: 47, efficiency: 94, lastAction: 'Optimizing driver portal color contrast', icon: Palette },\r\n    { id: '2', name: 'Layout Intelligence', type: 'ui', status: 'optimizing', tasksCompleted: 31, efficiency: 89, lastAction: 'Adjusting responsive breakpoints', icon: Layout },\r\n    { id: '3', name: 'Accessibility Sentinel', type: 'accessibility', status: 'active', tasksCompleted: 52, efficiency: 96, lastAction: 'ARIA labels optimization', icon: Accessibility },\r\n    { id: '4', name: 'Performance Optimizer', type: 'performance', status: 'analyzing', tasksCompleted: 28, efficiency: 91, lastAction: 'CSS optimization analysis', icon: Zap },\r\n    { id: '5', name: 'Mobile Experience AI', type: 'responsive', status: 'active', tasksCompleted: 39, efficiency: 87, lastAction: 'Touch target optimization', icon: Smartphone },\r\n    { id: '6', name: 'UX Flow Analyzer', type: 'ux', status: 'idle', tasksCompleted: 24, efficiency: 85, lastAction: 'User journey mapping', icon: MousePointer }\r\n  ]);\r\n\r\n  const [designOptimizations, setDesignOptimizations] = useState<DesignOptimization[]>([\r\n    {\r\n      id: '1',\r\n      portal: 'driver',\r\n      category: 'colors',\r\n      description: 'Enhance primary color contrast for better visibility in bright environments',\r\n      impact: 'high',\r\n      confidence: 92,\r\n      autoApply: true,\r\n      status: 'applied',\r\n      timestamp: new Date().toISOString(),\r\n      metrics: { userSatisfaction: 89, accessibilityScore: 96 }\r\n    },\r\n    {\r\n      id: '2',\r\n      portal: 'all',\r\n      category: 'typography',\r\n      description: 'Implement consistent font-size scaling across all portals',\r\n      impact: 'medium',\r\n      confidence: 87,\r\n      autoApply: false,\r\n      status: 'pending',\r\n      timestamp: new Date().toISOString()\r\n    },\r\n    {\r\n      id: '3',\r\n      portal: 'carrier',\r\n      category: 'layout',\r\n      description: 'Optimize dashboard card spacing for better information hierarchy',\r\n      impact: 'medium',\r\n      confidence: 83,\r\n      autoApply: true,\r\n      status: 'testing',\r\n      timestamp: new Date().toISOString(),\r\n      metrics: { performanceImpact: 94 }\r\n    }\r\n  ]);\r\n\r\n  const [portalScores, setPortalScores] = useState<PortalDesignScore[]>([\r\n    {\r\n      portal: 'Driver Portal',\r\n      overall: 92,\r\n      categories: { visual: 94, usability: 91, accessibility: 96, performance: 89, mobile: 93 },\r\n      lastUpdated: new Date().toISOString(),\r\n      trend: 'improving'\r\n    },\r\n    {\r\n      portal: 'Carrier Portal',\r\n      overall: 87,\r\n      categories: { visual: 89, usability: 86, accessibility: 92, performance: 84, mobile: 85 },\r\n      lastUpdated: new Date().toISOString(),\r\n      trend: 'stable'\r\n    },\r\n    {\r\n      portal: 'Broker Portal',\r\n      overall: 84,\r\n      categories: { visual: 82, usability: 87, accessibility: 88, performance: 81, mobile: 82 },\r\n      lastUpdated: new Date().toISOString(),\r\n      trend: 'improving'\r\n    },\r\n    {\r\n      portal: 'Shipper Portal',\r\n      overall: 81,\r\n      categories: { visual: 79, usability: 83, accessibility: 85, performance: 78, mobile: 80 },\r\n      lastUpdated: new Date().toISOString(),\r\n      trend: 'declining'\r\n    }\r\n  ]);\r\n\r\n  const [systemSettings, setSystemSettings] = useState({\r\n    autoApplyOptimizations: true,\r\n    realTimeMonitoring: true,\r\n    performanceTracking: true,\r\n    accessibilityChecks: true,\r\n    mobileOptimization: true,\r\n    crossPortalConsistency: true\r\n  });\r\n\r\n  const [isEngineActive, setIsEngineActive] = useState(true);\r\n  const [currentOptimization, setCurrentOptimization] = useState<string | null>(null);\r\n\r\n  // Real-time optimization simulation\r\n  useEffect(() => {\r\n    if (!isEngineActive) return;\r\n\r\n    const interval = setInterval(() => {\r\n      // Simulate agent activities\r\n      setDesignAgents(prev => prev.map(agent => {\r\n        const shouldUpdate = Math.random() < 0.3;\r\n        if (!shouldUpdate) return agent;\r\n\r\n        const activities = {\r\n          ui: ['Optimizing component spacing', 'Refining button styles', 'Adjusting card layouts'],\r\n          ux: ['Analyzing user flows', 'Optimizing navigation paths', 'Improving form interactions'],\r\n          accessibility: ['Checking ARIA labels', 'Validating color contrast', 'Testing keyboard navigation'],\r\n          performance: ['Optimizing CSS delivery', 'Reducing paint operations', 'Improving animations'],\r\n          responsive: ['Testing mobile layouts', 'Optimizing touch targets', 'Adjusting breakpoints'],\r\n          visual: ['Harmonizing color palettes', 'Refining typography', 'Enhancing visual hierarchy']\r\n        };\r\n\r\n        const newActivity = activities[agent.type][Math.floor(Math.random() * activities[agent.type].length)];\r\n        const statusOptions: Array<'active' | 'optimizing' | 'idle' | 'analyzing'> = ['active', 'optimizing', 'analyzing'];\r\n        \r\n        return {\r\n          ...agent,\r\n          status: statusOptions[Math.floor(Math.random() * statusOptions.length)],\r\n          lastAction: newActivity,\r\n          tasksCompleted: agent.tasksCompleted + (Math.random() < 0.2 ? 1 : 0),\r\n          efficiency: Math.min(100, agent.efficiency + (Math.random() - 0.5) * 2)\r\n        };\r\n      }));\r\n\r\n      // Update portal scores\r\n      setPortalScores(prev => prev.map(portal => ({\r\n        ...portal,\r\n        overall: Math.min(100, Math.max(70, portal.overall + (Math.random() - 0.5) * 2)),\r\n        categories: Object.fromEntries(\r\n          Object.entries(portal.categories).map(([key, value]) => [\r\n            key,\r\n            Math.min(100, Math.max(60, value + (Math.random() - 0.5) * 3))\r\n          ])\r\n        ) as unknown\r\n      })));\r\n\r\n      // Occasionally add new optimizations\r\n      if (Math.random() < 0.1) {\r\n        triggerNewOptimization();\r\n      }\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isEngineActive]);\r\n\r\n  const triggerNewOptimization = useCallback(() => {\r\n    const optimizations = [\r\n      'Enhancing visual consistency across portals',\r\n      'Optimizing mobile touch interactions',\r\n      'Improving dark mode color schemes',\r\n      'Refining loading state animations',\r\n      'Enhancing form validation feedback',\r\n      'Optimizing table responsive behaviors'\r\n    ];\r\n\r\n    const randomOptimization = optimizations[Math.floor(Math.random() * optimizations.length)];\r\n    setCurrentOptimization(randomOptimization);\r\n\r\n    setTimeout(() => {\r\n      setCurrentOptimization(null);\r\n      toast({\r\n        title: \"Design Optimization Applied\",\r\n        description: randomOptimization,\r\n        duration: 3000,\r\n      });\r\n    }, 2500);\r\n  }, [toast]);\r\n\r\n  const applyOptimization = (id: string) => {\r\n    setDesignOptimizations(prev => \r\n      prev.map(opt => \r\n        opt.id === id ? { ...opt, status: 'applied' as const } : opt\r\n      )\r\n    );\r\n    toast({\r\n      title: \"Optimization Applied\",\r\n      description: \"Design changes have been implemented successfully\",\r\n      duration: 3000,\r\n    });\r\n  };\r\n\r\n  const revertOptimization = (id: string) => {\r\n    setDesignOptimizations(prev => \r\n      prev.map(opt => \r\n        opt.id === id ? { ...opt, status: 'reverted' as const } : opt\r\n      )\r\n    );\r\n    toast({\r\n      title: \"Optimization Reverted\",\r\n      description: \"Changes have been rolled back\",\r\n      duration: 3000,\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'bg-green-500';\r\n      case 'optimizing': return 'bg-blue-500 animate-pulse';\r\n      case 'analyzing': return 'bg-yellow-500';\r\n      case 'idle': return 'bg-gray-400';\r\n      default: return 'bg-gray-400';\r\n    }\r\n  };\r\n\r\n  const getImpactColor = (impact: string) => {\r\n    switch (impact) {\r\n      case 'critical': return 'bg-red-500';\r\n      case 'high': return 'bg-orange-500';\r\n      case 'medium': return 'bg-yellow-500';\r\n      case 'low': return 'bg-blue-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getOptimizationStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'applied': return 'bg-green-100 text-green-800';\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      case 'testing': return 'bg-blue-100 text-blue-800';\r\n      case 'reverted': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getTrendColor = (trend: string) => {\r\n    switch (trend) {\r\n      case 'improving': return 'text-green-600';\r\n      case 'stable': return 'text-blue-600';\r\n      case 'declining': return 'text-red-600';\r\n      default: return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"p-3 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl\">\r\n            <Brain className=\"h-8 w-8 text-white\" />\r\n          </div>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\r\n              Autonomous Design Engine\r\n            </h1>\r\n            <p className=\"text-muted-foreground text-lg\">\r\n              AI-powered UI/UX optimization across all TMS portals\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-4\">\r\n          <Badge \r\n            variant={isEngineActive ? \"default\" : \"secondary\"} \r\n            className=\"px-4 py-2 text-sm font-semibold\"\r\n          >\r\n            {isEngineActive ? \"Active\" : \"Inactive\"}\r\n          </Badge>\r\n          <Switch\r\n            checked={isEngineActive}\r\n            onCheckedChange={setIsEngineActive}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Current Optimization Alert */}\r\n      {currentOptimization && (\r\n        <Alert className=\"border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50\">\r\n          <RefreshCw className=\"h-4 w-4 animate-spin text-blue-600\" />\r\n          <AlertDescription className=\"font-medium text-blue-800\">\r\n            ü§ñ {currentOptimization}...\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      <Tabs defaultValue=\"agents\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-5\">\r\n          <TabsTrigger value=\"agents\">Design Agents</TabsTrigger>\r\n          <TabsTrigger value=\"portals\">Portal Scores</TabsTrigger>\r\n          <TabsTrigger value=\"optimizations\">Optimizations</TabsTrigger>\r\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\r\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"agents\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {designAgents.map((agent) => {\r\n              const IconComponent = agent.icon;\r\n              return (\r\n                <Card key={agent.id} className=\"relative overflow-hidden\">\r\n                  <div className=\"absolute top-0 right-0 p-2\">\r\n                    <div className={`w-3 h-3 rounded-full ${getStatusColor(agent.status)}`} />\r\n                  </div>\r\n                  <CardHeader className=\"pb-4\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"p-2 bg-primary/10 rounded-lg\">\r\n                        <IconComponent className=\"h-5 w-5 text-primary\" />\r\n                      </div>\r\n                      <div>\r\n                        <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {agent.type.toUpperCase()}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span>Efficiency</span>\r\n                        <span className=\"font-medium\">{agent.efficiency.toFixed(1)}%</span>\r\n                      </div>\r\n                      <Progress value={agent.efficiency} className=\"h-2\" />\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span>Tasks Completed</span>\r\n                        <span className=\"font-bold text-primary\">{agent.tasksCompleted}</span>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground bg-muted/50 p-2 rounded\">\r\n                        <span className=\"font-medium\">Last Action:</span> {agent.lastAction}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"portals\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {portalScores.map((portal, index) => (\r\n              <Card key={index} className=\"overflow-hidden\">\r\n                <CardHeader>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <CardTitle className=\"text-xl\">{portal.portal}</CardTitle>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-2xl font-bold text-primary\">\r\n                        {portal.overall}\r\n                      </span>\r\n                      <TrendingUp className={`h-4 w-4 ${getTrendColor(portal.trend)}`} />\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  {Object.entries(portal.categories).map(([category, score]) => (\r\n                    <div key={category} className=\"space-y-2\">\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span className=\"capitalize font-medium\">{category}</span>\r\n                        <span className=\"font-semibold\">{score}%</span>\r\n                      </div>\r\n                      <Progress \r\n                        value={score} \r\n                        className=\"h-2\"\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"optimizations\" className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            {designOptimizations.map((optimization) => (\r\n              <Card key={optimization.id} className=\"overflow-hidden\">\r\n                <CardContent className=\"p-6\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex-1 space-y-3\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <Badge variant=\"outline\" className=\"capitalize\">\r\n                          {optimization.portal}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\" className=\"capitalize\">\r\n                          {optimization.category}\r\n                        </Badge>\r\n                        <div className={`w-2 h-2 rounded-full ${getImpactColor(optimization.impact)}`} />\r\n                        <span className=\"text-xs text-muted-foreground capitalize\">\r\n                          {optimization.impact} impact\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <p className=\"text-sm font-medium\">{optimization.description}</p>\r\n                      \r\n                      <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\r\n                        <span>Confidence: {optimization.confidence}%</span>\r\n                        <span>Auto-apply: {optimization.autoApply ? 'Yes' : 'No'}</span>\r\n                        {optimization.metrics && (\r\n                          <span>\r\n                            Impact: {optimization.metrics.userSatisfaction || optimization.metrics.performanceImpact || 'N/A'}%\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge className={getOptimizationStatusColor(optimization.status)}>\r\n                        {optimization.status}\r\n                      </Badge>\r\n                      {optimization.status === 'pending' && (\r\n                        <Button \r\n                          size=\"sm\" \r\n                          onClick={() => applyOptimization(optimization.id)}\r\n                        >\r\n                          Apply\r\n                        </Button>\r\n                      )}\r\n                      {optimization.status === 'applied' && (\r\n                        <Button \r\n                          size=\"sm\" \r\n                          variant=\"outline\"\r\n                          onClick={() => revertOptimization(optimization.id)}\r\n                        >\r\n                          Revert\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"insights\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\r\n                  <span>AI Recommendations</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"p-4 rounded-lg bg-blue-50 border border-blue-200\">\r\n                  <p className=\"text-sm font-medium text-blue-900\">Cross-Portal Consistency</p>\r\n                  <p className=\"text-xs text-blue-700 mt-1\">\r\n                    Implementing unified color tokens across all portals could improve brand consistency by 23%\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 rounded-lg bg-green-50 border border-green-200\">\r\n                  <p className=\"text-sm font-medium text-green-900\">Mobile Optimization</p>\r\n                  <p className=\"text-xs text-green-700 mt-1\">\r\n                    Touch target optimization shows 15% improvement in mobile user satisfaction\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 rounded-lg bg-purple-50 border border-purple-200\">\r\n                  <p className=\"text-sm font-medium text-purple-900\">Performance Enhancement</p>\r\n                  <p className=\"text-xs text-purple-700 mt-1\">\r\n                    CSS optimization could reduce initial paint time by 280ms across all portals\r\n                  </p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <BarChart3 className=\"h-5 w-5 text-blue-500\" />\r\n                  <span>Performance Metrics</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Overall Design Score</span>\r\n                    <span className=\"font-bold text-primary\">86%</span>\r\n                  </div>\r\n                  <Progress value={86} className=\"h-2\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>User Satisfaction</span>\r\n                    <span className=\"font-bold text-green-600\">91%</span>\r\n                  </div>\r\n                  <Progress value={91} className=\"h-2\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Accessibility Compliance</span>\r\n                    <span className=\"font-bold text-blue-600\">94%</span>\r\n                  </div>\r\n                  <Progress value={94} className=\"h-2\" />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Mobile Performance</span>\r\n                    <span className=\"font-bold text-purple-600\">88%</span>\r\n                  </div>\r\n                  <Progress value={88} className=\"h-2\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"settings\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Autonomous Design Settings</CardTitle>\r\n              <CardDescription>\r\n                Configure how the AI design engine operates across all portals\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Auto-apply Optimizations</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Automatically implement high-confidence improvements\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.autoApplyOptimizations}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, autoApplyOptimizations: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Real-time Monitoring</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Continuously monitor user interactions and performance\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.realTimeMonitoring}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, realTimeMonitoring: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Performance Tracking</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Track and optimize CSS and rendering performance\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.performanceTracking}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, performanceTracking: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Accessibility Checks</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Automatically validate and fix accessibility issues\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.accessibilityChecks}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, accessibilityChecks: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Mobile Optimization</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Optimize designs for mobile and tablet devices\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.mobileOptimization}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, mobileOptimization: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">Cross-Portal Consistency</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Ensure design consistency across all TMS portals\r\n                      </p>\r\n                    </div>\r\n                    <Switch\r\n                      checked={systemSettings.crossPortalConsistency}\r\n                      onCheckedChange={(checked) => \r\n                        setSystemSettings(prev => ({ ...prev, crossPortalConsistency: checked }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutonomousDesignEngine;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousForecastDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousKnowledgeBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousOrchestrator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousPerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousTaskCoordinator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousTaskManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousTaskProcessor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":220,"column":6,"nodeType":"ArrayExpression","endLine":220,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [tasks, toast]","fix":{"range":[7212,7219],"text":"[tasks, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useTaskExecution } from './task-coordinator/useTaskExecution';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Activity, CheckCircle, Clock, AlertCircle } from 'lucide-react';\r\n\r\ninterface AutonomousTask {\r\n  id: string;\r\n  task_id: string;\r\n  agent_type: string;\r\n  portal: string;\r\n  task_name: string;\r\n  description: string;\r\n  status: string;\r\n  priority: number;\r\n  dependencies: string[];\r\n  estimated_duration_minutes: number;\r\n  assigned_agent_id: string | null;\r\n  started_at: string | null;\r\n  completed_at: string | null;\r\n  result: unknown;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport const AutonomousTaskProcessor = () => {\r\n  const [tasks, setTasks] = useState<AutonomousTask[]>([]);\r\n  const [processingActivity, setProcessingActivity] = useState<string[]>([]);\r\n  const [stats, setStats] = useState({\r\n    totalTasks: 0,\r\n    completedTasks: 0,\r\n    activeTasks: 0,\r\n    failedTasks: 0\r\n  });\r\n  const { toast } = useToast();\r\n  const { executeAgentTask, startAutonomousGeneration } = useTaskExecution();\r\n\r\n  // Load tasks from database\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      const { data, error } = await supabase\r\n        .from('autonomous_tasks')\r\n        .select('*')\r\n        .order('priority', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error loading autonomous tasks:', error);\r\n        return;\r\n      }\r\n\r\n      setTasks(data || []);\r\n      updateStats(data || []);\r\n    };\r\n\r\n    loadTasks();\r\n    \r\n    // Set up real-time updates\r\n    const channel = supabase\r\n      .channel('autonomous_tasks_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'autonomous_tasks' },\r\n        () => loadTasks()\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  // Update task status\r\n  const updateTaskStatus = async (taskId: string, updates: Partial<AutonomousTask>) => {\r\n    const { error } = await supabase\r\n      .from('autonomous_tasks')\r\n      .update(updates)\r\n      .eq('id', taskId);\r\n\r\n    if (error) {\r\n      console.error('Error updating task:', error);\r\n    }\r\n  };\r\n\r\n  // Update statistics\r\n  const updateStats = (taskList: AutonomousTask[]) => {\r\n    setStats({\r\n      totalTasks: taskList.length,\r\n      completedTasks: taskList.filter(t => t.status === 'completed').length,\r\n      activeTasks: taskList.filter(t => t.status === 'in_progress').length,\r\n      failedTasks: taskList.filter(t => t.status === 'failed').length\r\n    });\r\n  };\r\n\r\n  // Add activity log\r\n  const addActivity = (message: string) => {\r\n    setProcessingActivity(prev => [\r\n      `${new Date().toLocaleTimeString()}: ${message}`,\r\n      ...prev.slice(0, 9)\r\n    ]);\r\n  };\r\n\r\n  // Continuous 24/7 processing\r\n  useEffect(() => {\r\n    let processingInterval: NodeJS.Timeout;\r\n    \r\n    const startContinuousProcessing = async () => {\r\n      addActivity('üöÄ Starting 24/7 Autonomous Processing System');\r\n      \r\n      processingInterval = setInterval(async () => {\r\n        const pendingTasks = tasks.filter(t => t.status === 'pending');\r\n        \r\n        if (pendingTasks.length > 0) {\r\n          // Process highest priority task\r\n          const nextTask = pendingTasks[0];\r\n          addActivity(`ü§ñ Processing: ${nextTask.task_name} (${nextTask.agent_type})`);\r\n          \r\n          try {\r\n            // Update task to in_progress\r\n            await supabase\r\n              .from('autonomous_tasks')\r\n              .update({\r\n                status: 'in_progress',\r\n                started_at: new Date().toISOString()\r\n              })\r\n              .eq('id', nextTask.id);\r\n\r\n            // Simulate task execution with realistic processing\r\n            await new Promise(resolve => setTimeout(resolve, 3000));\r\n            \r\n            // Update task to completed\r\n            await supabase\r\n              .from('autonomous_tasks')\r\n              .update({\r\n                status: 'completed',\r\n                completed_at: new Date().toISOString(),\r\n                result: { \r\n                  success: true, \r\n                  message: `${nextTask.agent_type} task completed successfully`,\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              })\r\n              .eq('id', nextTask.id);\r\n\r\n            addActivity(`‚úÖ Completed: ${nextTask.task_name}`);\r\n            \r\n            toast({\r\n              title: \"Autonomous Task Completed\",\r\n              description: `${nextTask.agent_type}: ${nextTask.task_name}`,\r\n              duration: 3000,\r\n            });\r\n\r\n          } catch (error) {\r\n            console.error('Task execution failed:', error);\r\n            \r\n            await supabase\r\n              .from('autonomous_tasks')\r\n              .update({\r\n                status: 'failed',\r\n                completed_at: new Date().toISOString(),\r\n                result: { error: String(error) }\r\n              })\r\n              .eq('id', nextTask.id);\r\n\r\n            addActivity(`‚ùå Failed: ${nextTask.task_name} - ${error}`);\r\n          }\r\n        } else {\r\n          // Generate new development tasks when queue is empty\r\n          addActivity('üîÑ Generating new development tasks...');\r\n          \r\n          const newTasks = [\r\n            {\r\n              task_id: `auto_gen_${Date.now()}_1`,\r\n              agent_type: 'frontend',\r\n              portal: 'all',\r\n              task_name: 'Enhance Portal UI Components',\r\n              description: 'Improve user interface components across all portals with better UX',\r\n              priority: 7,\r\n              estimated_duration_minutes: 45,\r\n              status: 'pending' as const\r\n            },\r\n            {\r\n              task_id: `auto_gen_${Date.now()}_2`,\r\n              agent_type: 'backend',\r\n              portal: 'all',\r\n              task_name: 'Optimize API Performance',\r\n              description: 'Enhance API response times and database query optimization',\r\n              priority: 6,\r\n              estimated_duration_minutes: 60,\r\n              status: 'pending' as const\r\n            },\r\n            {\r\n              task_id: `auto_gen_${Date.now()}_3`,\r\n              agent_type: 'database',\r\n              portal: 'all',\r\n              task_name: 'Database Maintenance',\r\n              description: 'Clean up unused data and optimize database performance',\r\n              priority: 5,\r\n              estimated_duration_minutes: 30,\r\n              status: 'pending' as const\r\n            }\r\n          ];\r\n\r\n          for (const task of newTasks) {\r\n            await supabase.from('autonomous_tasks').insert(task);\r\n          }\r\n\r\n          addActivity(`‚ûï Generated ${newTasks.length} new development tasks`);\r\n        }\r\n      }, 8000); // Process every 8 seconds\r\n    };\r\n\r\n    startContinuousProcessing();\r\n\r\n    return () => {\r\n      if (processingInterval) {\r\n        clearInterval(processingInterval);\r\n      }\r\n    };\r\n  }, [tasks]);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-500';\r\n      case 'in_progress': return 'bg-blue-500';\r\n      case 'failed': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'in_progress': return <Activity className=\"h-4 w-4\" />;\r\n      case 'failed': return <AlertCircle className=\"h-4 w-4\" />;\r\n      default: return <Clock className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid gap-4 md:grid-cols-2\">\r\n      {/* Live Activity Feed */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5 text-blue-500\" />\r\n            Live Autonomous Activity\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n            {processingActivity.map((activity, index) => (\r\n              <div key={index} className=\"text-sm font-mono bg-muted p-2 rounded\">\r\n                {activity}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Task Statistics */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>24/7 Processing Stats</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{stats.completedTasks}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Completed</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.activeTasks}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Active</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-orange-600\">{tasks.filter(t => t.status === 'pending').length}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Pending</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{stats.failedTasks}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Failed</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Current Tasks */}\r\n      <Card className=\"md:col-span-2\">\r\n        <CardHeader>\r\n          <CardTitle>Current Autonomous Tasks</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n            {tasks.slice(0, 10).map((task) => (\r\n              <div key={task.id} className=\"flex items-center justify-between p-3 bg-muted rounded\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  {getStatusIcon(task.status)}\r\n                  <div>\r\n                    <div className=\"font-medium\">{task.task_name}</div>\r\n                    <div className=\"text-sm text-muted-foreground\">{task.agent_type} ‚Ä¢ {task.portal}</div>\r\n                  </div>\r\n                </div>\r\n                <Badge className={`${getStatusColor(task.status)} text-white`}>\r\n                  {task.status}\r\n                </Badge>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousUIDesignDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\AutonomousUITimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\ContinuousAgentSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\FeatureDeploymentTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\FrontendChangeAgent.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'frontendEnhancements'. Either include it or remove the dependency array.","line":163,"column":6,"nodeType":"ArrayExpression","endLine":163,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [frontendEnhancements]","fix":{"range":[5622,5624],"text":"[frontendEnhancements]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Activity, \r\n  Wifi, \r\n  CheckCircle, \r\n  AlertTriangle,\r\n  Clock,\r\n  Zap,\r\n  Brain,\r\n  Code,\r\n  Palette,\r\n  Sparkles,\r\n  Eye,\r\n  Settings\r\n} from 'lucide-react';\r\n\r\ninterface FrontendChange {\r\n  id: string;\r\n  type: 'ui_enhancement' | 'feature_addition' | 'style_update' | 'component_creation';\r\n  title: string;\r\n  description: string;\r\n  timestamp: Date;\r\n  status: 'applied' | 'pending' | 'failed';\r\n  changes: string[];\r\n  visualEffect?: string;\r\n}\r\n\r\nexport const FrontendChangeAgent = () => {\r\n  const [frontendChanges, setFrontendChanges] = useState<FrontendChange[]>([]);\r\n  const [changeCounter, setChangeCounter] = useState(0);\r\n  const [lastChangeTime, setLastChangeTime] = useState(new Date());\r\n  const [appliedChanges, setAppliedChanges] = useState<string[]>([]);\r\n  const [currentTheme, setCurrentTheme] = useState('default');\r\n  const [animationsEnabled, setAnimationsEnabled] = useState(true);\r\n\r\n  // Real frontend changes that will be applied\r\n  const frontendEnhancements = [\r\n    {\r\n      type: 'ui_enhancement' as const,\r\n      title: 'Enhanced Button Styling',\r\n      description: 'Applied modern gradient effects to primary buttons',\r\n      changes: ['Added gradient backgrounds', 'Improved hover effects', 'Enhanced shadow depth'],\r\n      visualEffect: 'button-gradient'\r\n    },\r\n    {\r\n      type: 'feature_addition' as const,\r\n      title: 'Added Loading Animations',\r\n      description: 'Implemented smooth loading states for better UX',\r\n      changes: ['Added spinner components', 'Enhanced loading states', 'Improved transitions'],\r\n      visualEffect: 'loading-animations'\r\n    },\r\n    {\r\n      type: 'style_update' as const,\r\n      title: 'Updated Color Scheme',\r\n      description: 'Applied dynamic color palette improvements',\r\n      changes: ['Enhanced contrast ratios', 'Updated primary colors', 'Improved accessibility'],\r\n      visualEffect: 'color-update'\r\n    },\r\n    {\r\n      type: 'component_creation' as const,\r\n      title: 'Created Notification System',\r\n      description: 'Built real-time notification components',\r\n      changes: ['Added toast notifications', 'Implemented alert system', 'Enhanced user feedback'],\r\n      visualEffect: 'notifications'\r\n    },\r\n    {\r\n      type: 'ui_enhancement' as const,\r\n      title: 'Improved Card Design',\r\n      description: 'Enhanced card components with better shadows',\r\n      changes: ['Added depth effects', 'Improved border radius', 'Enhanced hover states'],\r\n      visualEffect: 'card-enhancement'\r\n    },\r\n    {\r\n      type: 'feature_addition' as const,\r\n      title: 'Added Dark Mode Toggle',\r\n      description: 'Implemented theme switching functionality',\r\n      changes: ['Added theme context', 'Created toggle component', 'Applied theme styles'],\r\n      visualEffect: 'dark-mode'\r\n    }\r\n  ];\r\n\r\n  // Apply real frontend changes\r\n  const applyFrontendChange = (change: FrontendChange) => {\r\n    // Apply the visual effect\r\n    if (change.visualEffect) {\r\n      document.body.classList.add(`change-${change.visualEffect}`);\r\n      setTimeout(() => {\r\n        document.body.classList.remove(`change-${change.visualEffect}`);\r\n      }, 2000);\r\n    }\r\n\r\n    // Update applied changes\r\n    setAppliedChanges(prev => [...prev, change.title]);\r\n    \r\n    // Apply specific changes based on type\r\n    switch (change.type) {\r\n      case 'ui_enhancement': {\r\n        // Add CSS classes for visual enhancements\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n          .enhanced-ui { \r\n            transition: all 0.3s ease; \r\n            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); \r\n          }\r\n          .enhanced-ui:hover { \r\n            transform: translateY(-2px); \r\n            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); \r\n          }\r\n        `;\r\n        document.head.appendChild(style);\r\n        break;\r\n      }\r\n      \r\n      case 'style_update': {\r\n        // Update theme\r\n        const themes = ['default', 'modern', 'elegant'];\r\n        const newTheme = themes[Math.floor(Math.random() * themes.length)];\r\n        setCurrentTheme(newTheme);\r\n        document.documentElement.setAttribute('data-theme', newTheme);\r\n        break;\r\n      }\r\n      \r\n      case 'feature_addition': {\r\n        // Enable animations\r\n        setAnimationsEnabled(true);\r\n        document.body.style.setProperty('--animation-duration', '0.3s');\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Generate and apply frontend changes\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      setLastChangeTime(now);\r\n      setChangeCounter(prev => prev + 1);\r\n\r\n      // Select a random enhancement\r\n      const enhancement = frontendEnhancements[Math.floor(Math.random() * frontendEnhancements.length)];\r\n      \r\n      const newChange: FrontendChange = {\r\n        id: `change-${Date.now()}`,\r\n        type: enhancement.type,\r\n        title: enhancement.title,\r\n        description: enhancement.description,\r\n        timestamp: now,\r\n        status: 'applied',\r\n        changes: enhancement.changes,\r\n        visualEffect: enhancement.visualEffect\r\n      };\r\n\r\n      // Apply the change immediately\r\n      applyFrontendChange(newChange);\r\n\r\n      setFrontendChanges(prev => [newChange, ...prev.slice(0, 9)]);\r\n    }, 5000); // Apply changes every 5 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getStatusIcon = (status: FrontendChange['status']) => {\r\n    switch (status) {\r\n      case 'applied': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'pending': return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'failed': return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n      default: return <Activity className=\"h-4 w-4 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: FrontendChange['status']) => {\r\n    switch (status) {\r\n      case 'applied': return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'failed': return 'bg-red-100 text-red-800 border-red-200';\r\n      default: return 'bg-blue-100 text-blue-800 border-blue-200';\r\n    }\r\n  };\r\n\r\n  const formatTime = (date: Date) => {\r\n    return date.toLocaleTimeString('en-US', { \r\n      hour12: false, \r\n      hour: '2-digit', \r\n      minute: '2-digit', \r\n      second: '2-digit' \r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Live Status Header */}\r\n      <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\r\n                <Code className=\"h-5 w-5 text-blue-600\" />\r\n                <span className=\"font-semibold text-blue-800\">Frontend Change Agent Active</span>\r\n              </div>\r\n              <Badge variant=\"default\" className=\"bg-blue-600\">\r\n                APPLYING CHANGES\r\n              </Badge>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className=\"text-sm font-medium text-blue-800\">\r\n                Last Change: {formatTime(lastChangeTime)}\r\n              </div>\r\n              <div className=\"text-sm text-blue-600\">\r\n                Change #{changeCounter}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      {/* Current Theme and Settings */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Palette className=\"h-4 w-4 text-purple-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">Current Theme</div>\r\n                <div className=\"text-lg font-bold capitalize\">{currentTheme}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Sparkles className=\"h-4 w-4 text-pink-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">Animations</div>\r\n                <div className=\"text-lg font-bold\">{animationsEnabled ? 'Enabled' : 'Disabled'}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Eye className=\"h-4 w-4 text-indigo-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">Applied Changes</div>\r\n                <div className=\"text-lg font-bold\">{appliedChanges.length}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Frontend Changes Feed */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Code className=\"h-5 w-5\" />\r\n            Real Frontend Changes Applied\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-3\">\r\n          {frontendChanges.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Code className=\"h-8 w-8 mx-auto mb-2\" />\r\n              <p>Initializing frontend change agent...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n              {frontendChanges.map((change) => (\r\n                <div\r\n                  key={change.id}\r\n                  className={`p-3 rounded-lg border ${getStatusColor(change.status)} transition-all duration-300 hover:shadow-md`}\r\n                >\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex items-start gap-3 flex-1\">\r\n                      {getStatusIcon(change.status)}\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-1\">\r\n                          <span className=\"font-medium\">{change.title}</span>\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {change.type.replace('_', ' ')}\r\n                          </Badge>\r\n                        </div>\r\n                        <p className=\"text-sm opacity-90\">{change.description}</p>\r\n                        <div className=\"mt-2 space-y-1\">\r\n                          {change.changes.map((changeItem, index) => (\r\n                            <div key={index} className=\"text-xs opacity-75 flex items-center gap-1\">\r\n                              <CheckCircle className=\"h-3 w-3 text-green-500\" />\r\n                              {changeItem}\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                        <div className=\"flex items-center gap-4 mt-2 text-xs opacity-75\">\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Clock className=\"h-3 w-3\" />\r\n                            {formatTime(change.timestamp)}\r\n                          </span>\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Code className=\"h-3 w-3\" />\r\n                            Applied\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\FullAutonomyAuthorization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\LiveBuildMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\LiveFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4190,4193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4190,4193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  Activity, \r\n  Globe, \r\n  Building2, \r\n  Truck, \r\n  Users, \r\n  FileText, \r\n  Settings, \r\n  AlertCircle,\r\n  CheckCircle,\r\n  Clock,\r\n  Zap,\r\n  Eye,\r\n  EyeOff\r\n} from 'lucide-react';\r\n\r\ninterface LiveOperation {\r\n  id: string;\r\n  timestamp: Date;\r\n  type: 'portal_health' | 'website_build' | 'autonomous_action' | 'system_event' | 'error' | 'success';\r\n  portal?: string;\r\n  action: string;\r\n  status: 'running' | 'completed' | 'failed' | 'pending';\r\n  details: string;\r\n  duration?: number;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\ninterface PortalStatus {\r\n  name: string;\r\n  key: string;\r\n  status: 'active' | 'inactive' | 'maintenance' | 'error';\r\n  lastHealthCheck: Date;\r\n  responseTime: number;\r\n  uptime: number;\r\n  activeUsers: number;\r\n}\r\n\r\nexport default function LiveFeed() {\r\n  const [operations, setOperations] = useState<LiveOperation[]>([]);\r\n  const [portalStatuses, setPortalStatuses] = useState<PortalStatus[]>([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [showDetails, setShowDetails] = useState(true);\r\n  const [autoScroll, setAutoScroll] = useState(true);\r\n\r\n  // Simulate real-time autonomous operations\r\n  useEffect(() => {\r\n    setIsConnected(true);\r\n    \r\n    const portals = [\r\n      { name: 'Super Admin', key: 'superAdmin', icon: Settings },\r\n      { name: 'Admin', key: 'admin', icon: Users },\r\n      { name: 'TMS Admin', key: 'tmsAdmin', icon: Building2 },\r\n      { name: 'Onboarding', key: 'onboarding', icon: Users },\r\n      { name: 'Broker', key: 'broker', icon: Truck },\r\n      { name: 'Shipper', key: 'shipper', icon: Building2 },\r\n      { name: 'Carrier', key: 'carrier', icon: Truck },\r\n      { name: 'Driver', key: 'driver', icon: Users },\r\n      { name: 'Owner Operator', key: 'ownerOperator', icon: Users },\r\n      { name: 'Factoring', key: 'factoring', icon: FileText },\r\n      { name: 'Load Board', key: 'loadBoard', icon: Globe },\r\n      { name: 'CRM', key: 'crm', icon: Users },\r\n      { name: 'Financials', key: 'financials', icon: FileText },\r\n      { name: 'EDI', key: 'edi', icon: FileText },\r\n      { name: 'Marketplace', key: 'marketplace', icon: Globe },\r\n      { name: 'Analytics', key: 'analytics', icon: Activity },\r\n      { name: 'Autonomous', key: 'autonomous', icon: Zap },\r\n      { name: 'Workers', key: 'workers', icon: Settings },\r\n      { name: 'Rates', key: 'rates', icon: FileText },\r\n      { name: 'Directory', key: 'directory', icon: Users }\r\n    ];\r\n\r\n    // Initialize portal statuses\r\n    setPortalStatuses(portals.map(portal => ({\r\n      name: portal.name,\r\n      key: portal.key,\r\n      status: 'active' as const,\r\n      lastHealthCheck: new Date(),\r\n      responseTime: Math.random() * 200 + 50,\r\n      uptime: 99.5 + Math.random() * 0.5,\r\n      activeUsers: Math.floor(Math.random() * 50) + 1\r\n    })));\r\n\r\n    // Generate real-time operations\r\n    const operationTypes = [\r\n      { type: 'portal_health', actions: ['Health check completed', 'Performance optimized', 'Cache refreshed'] },\r\n      { type: 'website_build', actions: ['Page generated', 'Content updated', 'SEO optimized', 'Image processed'] },\r\n      { type: 'autonomous_action', actions: ['Load matched', 'Rate calculated', 'Route optimized', 'Invoice processed'] },\r\n      { type: 'system_event', actions: ['Backup completed', 'Security scan finished', 'Update deployed'] }\r\n    ];\r\n\r\n    const addOperation = () => {\r\n      const operationType = operationTypes[Math.floor(Math.random() * operationTypes.length)];\r\n      const portal = portals[Math.floor(Math.random() * portals.length)];\r\n      const action = operationType.actions[Math.floor(Math.random() * operationType.actions.length)];\r\n      \r\n      const newOperation: LiveOperation = {\r\n        id: Date.now().toString(),\r\n        timestamp: new Date(),\r\n        type: operationType.type as any,\r\n        portal: portal.name,\r\n        action,\r\n        status: Math.random() > 0.1 ? 'completed' : 'running',\r\n        details: `Autonomous operation executed successfully for ${portal.name}`,\r\n        duration: Math.floor(Math.random() * 5000) + 100,\r\n        priority: Math.random() > 0.8 ? 'high' : 'medium'\r\n      };\r\n\r\n      setOperations(prev => [newOperation, ...prev.slice(0, 99)]); // Keep last 100 operations\r\n    };\r\n\r\n    // Add operations every 2-5 seconds\r\n    const operationInterval = setInterval(addOperation, Math.random() * 3000 + 2000);\r\n    \r\n    // Update portal statuses every 10 seconds\r\n    const statusInterval = setInterval(() => {\r\n      setPortalStatuses(prev => prev.map(portal => ({\r\n        ...portal,\r\n        lastHealthCheck: new Date(),\r\n        responseTime: Math.random() * 200 + 50,\r\n        uptime: 99.5 + Math.random() * 0.5,\r\n        activeUsers: Math.floor(Math.random() * 50) + 1,\r\n        status: Math.random() > 0.95 ? 'maintenance' : 'active'\r\n      })));\r\n    }, 10000);\r\n\r\n    return () => {\r\n      clearInterval(operationInterval);\r\n      clearInterval(statusInterval);\r\n    };\r\n  }, []);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'bg-green-500';\r\n      case 'maintenance': return 'bg-yellow-500';\r\n      case 'error': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'critical': return 'bg-red-500';\r\n      case 'high': return 'bg-orange-500';\r\n      case 'medium': return 'bg-blue-500';\r\n      case 'low': return 'bg-gray-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'portal_health': return <Activity className=\"w-4 h-4\" />;\r\n      case 'website_build': return <Building2 className=\"w-4 h-4\" />;\r\n      case 'autonomous_action': return <Zap className=\"w-4 h-4\" />;\r\n      case 'system_event': return <Settings className=\"w-4 h-4\" />;\r\n      case 'error': return <AlertCircle className=\"w-4 h-4\" />;\r\n      case 'success': return <CheckCircle className=\"w-4 h-4\" />;\r\n      default: return <Clock className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  const formatDuration = (ms: number) => {\r\n    if (ms < 1000) return `${ms}ms`;\r\n    return `${(ms / 1000).toFixed(1)}s`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Activity className=\"w-6 h-6 text-green-500\" />\r\n          <h2 className=\"text-2xl font-bold\">Live Autonomous Operations</h2>\r\n          <Badge variant={isConnected ? \"default\" : \"secondary\"}>\r\n            {isConnected ? \"Connected\" : \"Disconnected\"}\r\n          </Badge>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setShowDetails(!showDetails)}\r\n          >\r\n            {showDetails ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n            {showDetails ? \"Hide Details\" : \"Show Details\"}\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setAutoScroll(!autoScroll)}\r\n          >\r\n            Auto-scroll {autoScroll ? \"ON\" : \"OFF\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Portal Status Grid */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Globe className=\"w-5 h-5\" />\r\n            <span>Portal Health Status (20 Portals)</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4\">\r\n            {portalStatuses.map((portal) => (\r\n              <div key={portal.key} className=\"flex items-center space-x-2 p-3 border rounded-lg\">\r\n                <div className={`w-3 h-3 rounded-full ${getStatusColor(portal.status)}`} />\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <p className=\"text-sm font-medium truncate\">{portal.name}</p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {portal.responseTime.toFixed(0)}ms ‚Ä¢ {portal.uptime.toFixed(1)}%\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Live Operations Feed */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Zap className=\"w-5 h-5\" />\r\n            <span>Real-Time Operations Feed</span>\r\n            <Badge variant=\"outline\">{operations.length} operations</Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ScrollArea className=\"h-96\">\r\n            <div className=\"space-y-2\">\r\n              {operations.map((operation) => (\r\n                <div\r\n                  key={operation.id}\r\n                  className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                >\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    {getTypeIcon(operation.type)}\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"font-medium text-sm\">\r\n                        {operation.portal && `${operation.portal}: `}\r\n                        {operation.action}\r\n                      </span>\r\n                      <Badge \r\n                        variant=\"outline\" \r\n                        className={`w-2 h-2 p-0 ${getPriorityColor(operation.priority)}`}\r\n                      />\r\n                      {operation.status === 'running' && (\r\n                        <Badge variant=\"secondary\" className=\"text-xs\">\r\n                          Running\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                    {showDetails && (\r\n                      <div className=\"mt-1 space-y-1\">\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          {operation.details}\r\n                        </p>\r\n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\r\n                          <span>{operation.timestamp.toLocaleTimeString()}</span>\r\n                          {operation.duration && (\r\n                            <span>Duration: {formatDuration(operation.duration)}</span>\r\n                          )}\r\n                          <span className=\"capitalize\">{operation.type.replace('_', ' ')}</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* System Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Activity className=\"w-5 h-5 text-green-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Active Operations</p>\r\n                <p className=\"text-2xl font-bold\">{operations.filter(op => op.status === 'running').length}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <CheckCircle className=\"w-5 h-5 text-blue-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Success Rate</p>\r\n                <p className=\"text-2xl font-bold\">\r\n                  {((operations.filter(op => op.status === 'completed').length / operations.length) * 100).toFixed(1)}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Globe className=\"w-5 h-5 text-purple-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Portals Online</p>\r\n                <p className=\"text-2xl font-bold\">\r\n                  {portalStatuses.filter(p => p.status === 'active').length}/20\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\LivePageUpdater.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2930,2933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2930,2933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { ScrollArea } from '../ui/scroll-area';\r\n\r\ninterface LiveUpdate {\r\n  id: number;\r\n  agent: string;\r\n  action: string;\r\n  file: string;\r\n  timestamp: string;\r\n}\r\n\r\ninterface PageFile {\r\n  name: string;\r\n  path: string;\r\n  type: 'page' | 'component' | 'style';\r\n  lastModified: string;\r\n  status: 'updated' | 'created' | 'modifying';\r\n  agent: string;\r\n}\r\n\r\nconst LivePageUpdater: React.FC = () => {\r\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\r\n  const [pageFiles, setPageFiles] = useState<PageFile[]>([]);\r\n  const [liveUpdates, setLiveUpdates] = useState<LiveUpdate[]>([]);\r\n  const [totalUpdates, setTotalUpdates] = useState(0);\r\n  const [activeAgents, setActiveAgents] = useState(0);\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n\r\n  useEffect(() => {\r\n    const connectWebSocket = () => {\r\n      const ws = new WebSocket('ws://localhost:8086');\r\n      wsRef.current = ws;\r\n\r\n      ws.onopen = () => {\r\n        setConnectionStatus('connected');\r\n        console.log('üîå Connected to live website updater');\r\n        \r\n        // Request initial live updates\r\n        ws.send(JSON.stringify({ type: 'request_live_update' }));\r\n      };\r\n\r\n      ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          \r\n          if (data.type === 'live_page_update') {\r\n            // Add new live update\r\n            setLiveUpdates(prev => [{\r\n              id: Date.now(),\r\n              agent: data.agent,\r\n              action: data.action,\r\n              file: data.file,\r\n              timestamp: data.timestamp\r\n            }, ...prev.slice(0, 19)]); // Keep last 20 updates\r\n\r\n            // Update page files\r\n            const fileName = data.file.split('/').pop() || 'Unknown';\r\n            const fileType = getFileType(fileName);\r\n            \r\n            setPageFiles(prev => {\r\n              const existingFileIndex = prev.findIndex(f => f.name === fileName);\r\n              const newFile: PageFile = {\r\n                name: fileName,\r\n                path: data.file,\r\n                type: fileType,\r\n                lastModified: new Date().toLocaleTimeString(),\r\n                status: 'updated',\r\n                agent: data.agent\r\n              };\r\n\r\n              if (existingFileIndex >= 0) {\r\n                const updated = [...prev];\r\n                updated[existingFileIndex] = { ...newFile, status: 'updated' };\r\n                return updated;\r\n              } else {\r\n                return [newFile, ...prev];\r\n              }\r\n            });\r\n          }\r\n\r\n          if (data.type === 'live_update_status') {\r\n            setActiveAgents(data.data.filter((agent: any) => agent.status === 'updating').length);\r\n          }\r\n\r\n          if (data.systemStatus) {\r\n            setTotalUpdates(data.systemStatus.totalUpdates || 0);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      ws.onclose = () => {\r\n        setConnectionStatus('disconnected');\r\n        console.log('üîå Disconnected from live website updater');\r\n        \r\n        // Try to reconnect after 5 seconds\r\n        setTimeout(connectWebSocket, 5000);\r\n      };\r\n\r\n      ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        setConnectionStatus('disconnected');\r\n      };\r\n    };\r\n\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getFileType = (fileName: string): 'page' | 'component' | 'style' => {\r\n    if (fileName.includes('Page.tsx') || fileName.includes('page')) return 'page';\r\n    if (fileName.includes('Component') || fileName.includes('component')) return 'component';\r\n    if (fileName.includes('.css') || fileName.includes('style')) return 'style';\r\n    return 'page';\r\n  };\r\n\r\n  const getFileIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'page': return 'üìÑ';\r\n      case 'component': return 'üß©';\r\n      case 'style': return 'üé®';\r\n      default: return 'üìÅ';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'created': return 'bg-green-100 text-green-800';\r\n      case 'updated': return 'bg-blue-100 text-blue-800';\r\n      case 'modifying': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const triggerLiveUpdate = () => {\r\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify({ type: 'request_live_update' }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">‚ö° Live Page Updater</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Watch autonomous agents modify website pages in real-time\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className={`w-3 h-3 rounded-full ${\r\n              connectionStatus === 'connected' ? 'bg-green-500' : \r\n              connectionStatus === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'\r\n            }`}></div>\r\n            <span className=\"text-sm capitalize\">{connectionStatus}</span>\r\n          </div>\r\n          <Button onClick={triggerLiveUpdate} size=\"sm\">\r\n            üîÑ Trigger Live Update\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Updates</p>\r\n                <p className=\"text-2xl font-bold\">{totalUpdates}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">‚ö°</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Agents</p>\r\n                <p className=\"text-2xl font-bold\">{activeAgents}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">ü§ñ</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Pages Modified</p>\r\n                <p className=\"text-2xl font-bold\">{pageFiles.length}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">üìÑ</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Live Updates</p>\r\n                <p className=\"text-2xl font-bold\">{liveUpdates.length}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">üîÑ</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Page Files */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              üìÑ Pages Being Modified Live\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-80\">\r\n              <div className=\"space-y-3\">\r\n                {pageFiles.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <div className=\"text-4xl mb-2\">‚ö°</div>\r\n                    <p>Waiting for live page updates...</p>\r\n                    <p className=\"text-sm\">Pages will appear here as they are modified</p>\r\n                  </div>\r\n                ) : (\r\n                  pageFiles.map((file, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <span className=\"text-xl\">{getFileIcon(file.type)}</span>\r\n                        <div>\r\n                          <p className=\"font-medium\">{file.name}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">{file.path}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge className={getStatusColor(file.status)}>\r\n                          {file.status}\r\n                        </Badge>\r\n                        <span className=\"text-xs text-muted-foreground\">\r\n                          {file.lastModified}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Live Updates */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              üîÑ Live Update Feed\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-80\">\r\n              <div className=\"space-y-3\">\r\n                {liveUpdates.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <div className=\"text-4xl mb-2\">üîÑ</div>\r\n                    <p>Waiting for live updates...</p>\r\n                    <p className=\"text-sm\">Updates will appear here as agents work</p>\r\n                  </div>\r\n                ) : (\r\n                  liveUpdates.map((update) => (\r\n                    <div key={update.id} className=\"p-3 border-l-4 border-purple-500 bg-purple-50 rounded-r-lg\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <p className=\"font-medium text-purple-800\">\r\n                            {update.agent}\r\n                          </p>\r\n                          <p className=\"text-sm text-purple-700\">{update.action}</p>\r\n                          <p className=\"text-xs text-purple-600 mt-1\">\r\n                            {update.file}\r\n                          </p>\r\n                        </div>\r\n                        <span className=\"text-xs text-purple-600\">\r\n                          {new Date(update.timestamp).toLocaleTimeString()}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      <Card className=\"border-purple-200 bg-purple-50\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-purple-800\">üìã How to See Live Page Changes</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2 text-purple-700\">\r\n            <p>‚Ä¢ <strong>Live updates</strong> are modifying your website pages in real-time</p>\r\n            <p>‚Ä¢ <strong>Refresh your browser</strong> to see the changes on the actual pages</p>\r\n            <p>‚Ä¢ <strong>Check the home page</strong> for live update indicators</p>\r\n            <p>‚Ä¢ <strong>Look at the dashboard</strong> for live modification indicators</p>\r\n            <p className=\"mt-3 font-medium\">üí° The website pages are being modified live - refresh to see changes!</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LivePageUpdater;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\LiveUpdateComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\LiveUpdateDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\MarketResearchDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\MetricsBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[606,609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[606,609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'portalMetrics'. Either include it or remove the dependency array.","line":154,"column":6,"nodeType":"ArrayExpression","endLine":154,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [portalMetrics]","fix":{"range":[4922,4924],"text":"[portalMetrics]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Activity, \r\n  Zap, \r\n  Clock, \r\n  TrendingUp, \r\n  TrendingDown,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Server,\r\n  Database,\r\n  Network,\r\n  Cpu,\r\n  Memory,\r\n  HardDrive\r\n} from 'lucide-react';\r\n\r\ninterface SystemMetric {\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n  status: 'good' | 'warning' | 'critical';\r\n  icon: React.ComponentType<any>;\r\n}\r\n\r\ninterface PortalMetric {\r\n  name: string;\r\n  responseTime: number;\r\n  uptime: number;\r\n  activeUsers: number;\r\n  status: 'online' | 'degraded' | 'offline';\r\n}\r\n\r\nexport default function MetricsBar() {\r\n  const [systemMetrics, setSystemMetrics] = useState<SystemMetric[]>([]);\r\n  const [portalMetrics, setPortalMetrics] = useState<PortalMetric[]>([]);\r\n  const [overallHealth, setOverallHealth] = useState(98.5);\r\n\r\n  useEffect(() => {\r\n    // Initialize system metrics\r\n    const initialMetrics: SystemMetric[] = [\r\n      {\r\n        name: 'CPU Usage',\r\n        value: 45,\r\n        unit: '%',\r\n        trend: 'stable',\r\n        status: 'good',\r\n        icon: Cpu\r\n      },\r\n      {\r\n        name: 'Memory Usage',\r\n        value: 62,\r\n        unit: '%',\r\n        trend: 'up',\r\n        status: 'warning',\r\n        icon: Memory\r\n      },\r\n      {\r\n        name: 'Database Connections',\r\n        value: 127,\r\n        unit: '',\r\n        trend: 'up',\r\n        status: 'good',\r\n        icon: Database\r\n      },\r\n      {\r\n        name: 'Network Latency',\r\n        value: 45,\r\n        unit: 'ms',\r\n        trend: 'down',\r\n        status: 'good',\r\n        icon: Network\r\n      },\r\n      {\r\n        name: 'Storage Usage',\r\n        value: 78,\r\n        unit: '%',\r\n        trend: 'up',\r\n        status: 'warning',\r\n        icon: HardDrive\r\n      },\r\n      {\r\n        name: 'Active Operations',\r\n        value: 23,\r\n        unit: '',\r\n        trend: 'up',\r\n        status: 'good',\r\n        icon: Activity\r\n      }\r\n    ];\r\n\r\n    setSystemMetrics(initialMetrics);\r\n\r\n    // Initialize portal metrics\r\n    const portals = [\r\n      'Super Admin', 'Admin', 'TMS Admin', 'Onboarding', 'Broker',\r\n      'Shipper', 'Carrier', 'Driver', 'Owner Operator', 'Factoring',\r\n      'Load Board', 'CRM', 'Financials', 'EDI', 'Marketplace',\r\n      'Analytics', 'Autonomous', 'Workers', 'Rates', 'Directory'\r\n    ];\r\n\r\n    setPortalMetrics(portals.map(name => ({\r\n      name,\r\n      responseTime: Math.random() * 200 + 50,\r\n      uptime: 99.5 + Math.random() * 0.5,\r\n      activeUsers: Math.floor(Math.random() * 50) + 1,\r\n      status: Math.random() > 0.95 ? 'degraded' : 'online'\r\n    })));\r\n\r\n    // Update metrics in real-time\r\n    const interval = setInterval(() => {\r\n      setSystemMetrics(prev => prev.map(metric => ({\r\n        ...metric,\r\n        value: metric.name === 'CPU Usage' \r\n          ? Math.max(20, Math.min(90, metric.value + (Math.random() - 0.5) * 10))\r\n          : metric.name === 'Memory Usage'\r\n          ? Math.max(40, Math.min(85, metric.value + (Math.random() - 0.5) * 5))\r\n          : metric.name === 'Database Connections'\r\n          ? Math.max(50, Math.min(200, metric.value + (Math.random() - 0.5) * 20))\r\n          : metric.name === 'Network Latency'\r\n          ? Math.max(20, Math.min(100, metric.value + (Math.random() - 0.5) * 15))\r\n          : metric.name === 'Storage Usage'\r\n          ? Math.min(95, metric.value + Math.random() * 0.5)\r\n          : metric.name === 'Active Operations'\r\n          ? Math.max(5, Math.min(50, metric.value + (Math.random() - 0.5) * 10))\r\n          : metric.value,\r\n        status: metric.name === 'CPU Usage' && metric.value > 80 ? 'critical'\r\n          : metric.name === 'Memory Usage' && metric.value > 75 ? 'warning'\r\n          : metric.name === 'Storage Usage' && metric.value > 85 ? 'critical'\r\n          : 'good',\r\n        trend: Math.random() > 0.6 ? 'up' : Math.random() > 0.3 ? 'down' : 'stable'\r\n      })));\r\n\r\n      setPortalMetrics(prev => prev.map(portal => ({\r\n        ...portal,\r\n        responseTime: Math.max(30, Math.min(300, portal.responseTime + (Math.random() - 0.5) * 20)),\r\n        uptime: Math.max(99.0, Math.min(100, portal.uptime + (Math.random() - 0.5) * 0.1)),\r\n        activeUsers: Math.max(0, Math.min(100, portal.activeUsers + (Math.random() - 0.5) * 5)),\r\n        status: Math.random() > 0.98 ? 'degraded' : 'online'\r\n      })));\r\n\r\n      // Update overall health\r\n      const onlinePortals = portalMetrics.filter(p => p.status === 'online').length;\r\n      const totalPortals = portalMetrics.length;\r\n      const healthPercentage = (onlinePortals / totalPortals) * 100;\r\n      setOverallHealth(Math.max(95, Math.min(100, healthPercentage + (Math.random() - 0.5) * 2)));\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'good': return 'text-green-500';\r\n      case 'warning': return 'text-yellow-500';\r\n      case 'critical': return 'text-red-500';\r\n      default: return 'text-gray-500';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'up': return <TrendingUp className=\"w-3 h-3 text-green-500\" />;\r\n      case 'down': return <TrendingDown className=\"w-3 h-3 text-red-500\" />;\r\n      default: return <Clock className=\"w-3 h-3 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getPortalStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'online': return 'bg-green-500';\r\n      case 'degraded': return 'bg-yellow-500';\r\n      case 'offline': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Overall System Health */}\r\n      <Card>\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"relative\">\r\n                <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-green-400 to-blue-500 flex items-center justify-center\">\r\n                  <Server className=\"w-6 h-6 text-white\" />\r\n                </div>\r\n                <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-white rounded-full border-2 border-green-500 flex items-center justify-center\">\r\n                  <CheckCircle className=\"w-2 h-2 text-green-500\" />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <h3 className=\"font-semibold\">System Health</h3>\r\n                <p className=\"text-sm text-muted-foreground\">Overall platform status</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{overallHealth.toFixed(1)}%</div>\r\n              <div className=\"text-sm text-muted-foreground\">Healthy</div>\r\n            </div>\r\n          </div>\r\n          <Progress value={overallHealth} className=\"mt-3\" />\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* System Metrics Grid */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\r\n        {systemMetrics.map((metric) => (\r\n          <Card key={metric.name} className=\"hover:shadow-md transition-shadow\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <metric.icon className={`w-4 h-4 ${getStatusColor(metric.status)}`} />\r\n                {getTrendIcon(metric.trend)}\r\n              </div>\r\n              <div className=\"text-2xl font-bold\">\r\n                {metric.value}{metric.unit}\r\n              </div>\r\n              <div className=\"text-xs text-muted-foreground truncate\">\r\n                {metric.name}\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <Progress \r\n                  value={metric.name.includes('Usage') ? metric.value : Math.min(100, metric.value / 2)} \r\n                  className=\"h-1\"\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Portal Performance Overview */}\r\n      <Card>\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"font-semibold\">Portal Performance (20 Portals)</h3>\r\n            <Badge variant=\"outline\">\r\n              {portalMetrics.filter(p => p.status === 'online').length}/20 Online\r\n            </Badge>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-3\">\r\n            {portalMetrics.map((portal) => (\r\n              <div key={portal.name} className=\"flex items-center space-x-2 p-2 border rounded-lg\">\r\n                <div className={`w-2 h-2 rounded-full ${getPortalStatusColor(portal.status)}`} />\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <p className=\"text-xs font-medium truncate\">{portal.name}</p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {portal.responseTime.toFixed(0)}ms ‚Ä¢ {portal.uptime.toFixed(1)}%\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Real-time Activity Indicators */}\r\n      <div className=\"flex items-center justify-center space-x-4 p-4 bg-muted/50 rounded-lg\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm\">Autonomous Operations Active</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm\">Real-time Updates</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm\">Self-healing Enabled</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Zap className=\"w-4 h-4 text-yellow-500 animate-pulse\" />\r\n          <span className=\"text-sm\">24/7 Operation</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\N8NWebhookTester.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\PerformanceOptimizationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\PortalImprovementTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\PredictiveScalingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\QuickDeploymentActivator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\RealAutonomousAgent.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'realCSSModifications'. Either include it or remove the dependency array.","line":204,"column":6,"nodeType":"ArrayExpression","endLine":204,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [isActive, realCSSModifications]","fix":{"range":[7212,7222],"text":"[isActive, realCSSModifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Activity, \r\n  Code, \r\n  Palette, \r\n  Sparkles, \r\n  Eye, \r\n  Settings,\r\n  Zap,\r\n  Brain,\r\n  Wrench,\r\n  Target\r\n} from 'lucide-react';\r\n\r\ninterface RealChange {\r\n  id: string;\r\n  type: 'css_modification' | 'dom_manipulation' | 'style_injection' | 'animation_add';\r\n  title: string;\r\n  description: string;\r\n  timestamp: Date;\r\n  applied: boolean;\r\n  cssRules?: string[];\r\n  domChanges?: string[];\r\n}\r\n\r\nexport const RealAutonomousAgent = () => {\r\n  const [realChanges, setRealChanges] = useState<RealChange[]>([]);\r\n  const [changeCounter, setChangeCounter] = useState(0);\r\n  const [lastChangeTime, setLastChangeTime] = useState(new Date());\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  // Real CSS modifications that will actually be applied\r\n  const realCSSModifications = [\r\n    {\r\n      type: 'css_modification' as const,\r\n      title: 'Enhanced Button Animations',\r\n      description: 'Adding real hover effects and transitions to all buttons',\r\n      cssRules: [\r\n        'button { transition: all 0.3s ease; transform: scale(1); }',\r\n        'button:hover { transform: scale(1.05); box-shadow: 0 8px 25px rgba(0,0,0,0.15); }',\r\n        'button:active { transform: scale(0.98); }'\r\n      ]\r\n    },\r\n    {\r\n      type: 'style_injection' as const,\r\n      title: 'Gradient Background Effects',\r\n      description: 'Applying real gradient backgrounds to cards and containers',\r\n      cssRules: [\r\n        '.card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }',\r\n        '.card:hover { background: linear-gradient(135deg, #764ba2 0%, #667eea 100%); }'\r\n      ]\r\n    },\r\n    {\r\n      type: 'animation_add' as const,\r\n      title: 'Pulse Animation System',\r\n      description: 'Adding real pulse animations to important elements',\r\n      cssRules: [\r\n        '@keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }',\r\n        '.pulse-animation { animation: pulse 2s infinite; }'\r\n      ]\r\n    },\r\n    {\r\n      type: 'dom_manipulation' as const,\r\n      title: 'Dynamic Color Scheme',\r\n      description: 'Changing the actual color scheme of the website',\r\n      cssRules: [\r\n        ':root { --primary: #ff6b6b; --secondary: #4ecdc4; --accent: #45b7d1; }',\r\n        'body { background: linear-gradient(45deg, var(--primary), var(--secondary)); }'\r\n      ]\r\n    },\r\n    {\r\n      type: 'css_modification' as const,\r\n      title: 'Enhanced Typography',\r\n      description: 'Improving text readability and styling',\r\n      cssRules: [\r\n        'h1, h2, h3 { font-weight: 700; letter-spacing: -0.025em; }',\r\n        'p { line-height: 1.7; color: #374151; }',\r\n        'a { text-decoration: none; border-bottom: 2px solid transparent; }',\r\n        'a:hover { border-bottom-color: currentColor; }'\r\n      ]\r\n    },\r\n    {\r\n      type: 'style_injection' as const,\r\n      title: 'Glass Morphism Effects',\r\n      description: 'Adding modern glass morphism styling',\r\n      cssRules: [\r\n        '.glass-effect { background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.2); }',\r\n        '.glass-effect:hover { background: rgba(255, 255, 255, 0.2); }'\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Function to actually apply CSS changes to the document\r\n  const applyRealCSSChange = (cssRules: string[]) => {\r\n    const styleId = `autonomous-agent-style-${Date.now()}`;\r\n    const styleElement = document.createElement('style');\r\n    styleElement.id = styleId;\r\n    styleElement.textContent = cssRules.join('\\n');\r\n    document.head.appendChild(styleElement);\r\n    \r\n    // Remove the style after 10 seconds to show the change was temporary\r\n    setTimeout(() => {\r\n      const existingStyle = document.getElementById(styleId);\r\n      if (existingStyle) {\r\n        existingStyle.remove();\r\n      }\r\n    }, 10000);\r\n  };\r\n\r\n  // Function to apply DOM manipulations\r\n  const applyDOMChanges = (change: RealChange) => {\r\n    switch (change.type) {\r\n      case 'dom_manipulation':\r\n        // Add a temporary highlight effect to the body\r\n        document.body.style.transition = 'all 0.5s ease';\r\n        document.body.style.filter = 'brightness(1.1) saturate(1.2)';\r\n        setTimeout(() => {\r\n          document.body.style.filter = 'none';\r\n        }, 2000);\r\n        break;\r\n      \r\n      case 'animation_add': {\r\n        // Add pulse animation to the main container\r\n        const mainContainer = document.querySelector('main') || document.body;\r\n        mainContainer.classList.add('pulse-animation');\r\n        setTimeout(() => {\r\n          mainContainer.classList.remove('pulse-animation');\r\n        }, 3000);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Generate and apply real changes\r\n  useEffect(() => {\r\n    if (!isActive) return;\r\n\r\n    // Apply initial change immediately\r\n    const applyInitialChange = () => {\r\n      const now = new Date();\r\n      setLastChangeTime(now);\r\n      setChangeCounter(prev => prev + 1);\r\n\r\n      // Apply a dramatic change immediately\r\n      const dramaticChange: RealChange = {\r\n        id: `real-change-${Date.now()}`,\r\n        type: 'dom_manipulation',\r\n        title: 'üö® IMMEDIATE VISUAL CHANGE - Agent is Working!',\r\n        description: 'This proves the autonomous agent is making real changes to your website',\r\n        timestamp: now,\r\n        applied: true,\r\n        cssRules: [\r\n          'body { background: linear-gradient(45deg, #ff6b6b, #4ecdc4) !important; }',\r\n          'button { transform: scale(1.1) !important; box-shadow: 0 0 20px rgba(255, 107, 107, 0.5) !important; }',\r\n          '.card { border: 3px solid #ff6b6b !important; animation: pulse 1s infinite !important; }'\r\n        ]\r\n      };\r\n\r\n      // Apply the dramatic change\r\n      if (dramaticChange.cssRules) {\r\n        applyRealCSSChange(dramaticChange.cssRules);\r\n      }\r\n      applyDOMChanges(dramaticChange);\r\n      setRealChanges([dramaticChange]);\r\n    };\r\n\r\n    // Apply initial change after 2 seconds\r\n    const initialTimer = setTimeout(applyInitialChange, 2000);\r\n\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      setLastChangeTime(now);\r\n      setChangeCounter(prev => prev + 1);\r\n\r\n      // Select a random modification\r\n      const modification = realCSSModifications[Math.floor(Math.random() * realCSSModifications.length)];\r\n      \r\n      const newChange: RealChange = {\r\n        id: `real-change-${Date.now()}`,\r\n        type: modification.type,\r\n        title: modification.title,\r\n        description: modification.description,\r\n        timestamp: now,\r\n        applied: true,\r\n        cssRules: modification.cssRules\r\n      };\r\n\r\n      // Actually apply the change\r\n      if (modification.cssRules) {\r\n        applyRealCSSChange(modification.cssRules);\r\n      }\r\n      applyDOMChanges(newChange);\r\n\r\n      setRealChanges(prev => [newChange, ...prev.slice(0, 9)]);\r\n    }, 8000); // Apply changes every 8 seconds\r\n\r\n    return () => {\r\n      clearTimeout(initialTimer);\r\n      clearInterval(interval);\r\n    };\r\n  }, [isActive]);\r\n\r\n  const formatTime = (date: Date) => {\r\n    return date.toLocaleTimeString('en-US', { \r\n      hour12: false, \r\n      hour: '2-digit', \r\n      minute: '2-digit', \r\n      second: '2-digit' \r\n    });\r\n  };\r\n\r\n  const getChangeIcon = (type: RealChange['type']) => {\r\n    switch (type) {\r\n      case 'css_modification': return <Code className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'dom_manipulation': return <Wrench className=\"h-4 w-4 text-green-500\" />;\r\n      case 'style_injection': return <Palette className=\"h-4 w-4 text-purple-500\" />;\r\n      case 'animation_add': return <Sparkles className=\"h-4 w-4 text-pink-500\" />;\r\n      default: return <Activity className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Real Agent Status */}\r\n      <Card className=\"border-2 border-green-200 bg-green-50/50\">\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\r\n                <Brain className=\"h-5 w-5 text-green-600\" />\r\n                <span className=\"font-semibold text-green-800\">ü§ñ REAL Autonomous Agent - Making ACTUAL Changes</span>\r\n              </div>\r\n              <Badge variant=\"default\" className=\"bg-green-600 animate-pulse\">\r\n                {isActive ? 'ACTIVE' : 'PAUSED'}\r\n              </Badge>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className=\"text-sm font-medium text-green-800\">\r\n                Last Real Change: {formatTime(lastChangeTime)}\r\n              </div>\r\n              <div className=\"text-sm text-green-600\">\r\n                Real Change #{changeCounter}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      {/* Immediate Status Alert */}\r\n      {isActive && (\r\n        <div className=\"bg-red-100 border-2 border-red-300 rounded-lg p-4 animate-pulse\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-4 h-4 bg-red-500 rounded-full animate-ping\"></div>\r\n            <span className=\"font-bold text-red-800\">üö® WATCH YOUR WEBSITE - Changes Coming in 2 Seconds!</span>\r\n          </div>\r\n          <p className=\"text-sm text-red-700 mt-1\">\r\n            The autonomous agent will apply dramatic visual changes to prove it's working!\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Control Panel */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Target className=\"h-4 w-4 text-red-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">Real Changes Applied</div>\r\n                <div className=\"text-lg font-bold\">{realChanges.filter(c => c.applied).length}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Zap className=\"h-4 w-4 text-yellow-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">Agent Status</div>\r\n                <div className=\"text-lg font-bold\">{isActive ? 'Active' : 'Paused'}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Eye className=\"h-4 w-4 text-indigo-500\" />\r\n              <div>\r\n                <div className=\"text-sm font-medium\">CSS Rules Applied</div>\r\n                <div className=\"text-lg font-bold\">{realChanges.reduce((acc, change) => acc + (change.cssRules?.length || 0), 0)}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Real Changes Feed */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Code className=\"h-5 w-5\" />\r\n            Real Changes Applied to Your Website\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-3\">\r\n          {realChanges.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Brain className=\"h-8 w-8 mx-auto mb-2\" />\r\n              <p>Initializing real autonomous agent...</p>\r\n              <p className=\"text-sm\">This agent will make ACTUAL changes to your website!</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n              {realChanges.map((change) => (\r\n                <div\r\n                  key={change.id}\r\n                  className=\"p-3 rounded-lg border border-green-200 bg-green-50 transition-all duration-300 hover:shadow-md\"\r\n                >\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex items-start gap-3 flex-1\">\r\n                      {getChangeIcon(change.type)}\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-1\">\r\n                          <span className=\"font-medium text-green-800\">{change.title}</span>\r\n                          <Badge variant=\"outline\" className=\"text-xs bg-green-100\">\r\n                            {change.type.replace('_', ' ')}\r\n                          </Badge>\r\n                        </div>\r\n                        <p className=\"text-sm text-green-700\">{change.description}</p>\r\n                        {change.cssRules && (\r\n                          <div className=\"mt-2 p-2 bg-white rounded border\">\r\n                            <div className=\"text-xs font-mono text-gray-600\">\r\n                              {change.cssRules.map((rule, index) => (\r\n                                <div key={index} className=\"mb-1\">{rule}</div>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        <div className=\"flex items-center gap-4 mt-2 text-xs text-green-600\">\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Activity className=\"h-3 w-3\" />\r\n                            {formatTime(change.timestamp)}\r\n                          </span>\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Code className=\"h-3 w-3\" />\r\n                            Applied to DOM\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Control Buttons */}\r\n      <div className=\"flex gap-2\">\r\n        <Button \r\n          onClick={() => setIsActive(!isActive)}\r\n          variant={isActive ? \"destructive\" : \"default\"}\r\n          className=\"flex-1\"\r\n        >\r\n          {isActive ? 'Pause Agent' : 'Resume Agent'}\r\n        </Button>\r\n        <Button \r\n          onClick={() => {\r\n            setRealChanges([]);\r\n            setChangeCounter(0);\r\n          }}\r\n          variant=\"outline\"\r\n        >\r\n          Clear History\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\RealTimeAgentMonitor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'connectWebSocket'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [connectWebSocket]","fix":{"range":[2794,2796],"text":"[connectWebSocket]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { \r\n  Activity, \r\n  Bot, \r\n  Database, \r\n  GitBranch, \r\n  Monitor, \r\n  Rocket,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Play,\r\n  Pause\r\n} from 'lucide-react';\r\n\r\ninterface Agent {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  status: string;\r\n  lastAction: string;\r\n  nextAction: string;\r\n  uptime: number;\r\n  startTime: number;\r\n}\r\n\r\ninterface Update {\r\n  agentId: string;\r\n  agentName: string;\r\n  action: string;\r\n  timestamp: string;\r\n  type: string;\r\n}\r\n\r\ninterface SystemStatus {\r\n  totalAgents: number;\r\n  activeAgents: number;\r\n  totalUptime: number;\r\n  lastUpdate: string;\r\n}\r\n\r\ninterface RealTimeData {\r\n  type: string;\r\n  agents: Agent[];\r\n  recentUpdates: Update[];\r\n  systemStatus: SystemStatus;\r\n  timestamp: string;\r\n}\r\n\r\nconst getAgentIcon = (type: string) => {\r\n  switch (type) {\r\n    case 'deployment':\r\n      return <Rocket className=\"h-4 w-4\" />;\r\n    case 'monitoring':\r\n      return <Monitor className=\"h-4 w-4\" />;\r\n    case 'ai-analysis':\r\n      return <Bot className=\"h-4 w-4\" />;\r\n    case 'database-maintenance':\r\n      return <Database className=\"h-4 w-4\" />;\r\n    case 'github-sync':\r\n      return <GitBranch className=\"h-4 w-4\" />;\r\n    default:\r\n      return <Activity className=\"h-4 w-4\" />;\r\n  }\r\n};\r\n\r\nconst getStatusColor = (status: string) => {\r\n  switch (status) {\r\n    case 'active':\r\n      return 'bg-green-500';\r\n    case 'inactive':\r\n      return 'bg-gray-500';\r\n    case 'error':\r\n      return 'bg-red-500';\r\n    default:\r\n      return 'bg-yellow-500';\r\n  }\r\n};\r\n\r\nconst formatUptime = (uptime: number) => {\r\n  const seconds = Math.floor(uptime / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (days > 0) return `${days}d ${hours % 24}h`;\r\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\r\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\r\n  return `${seconds}s`;\r\n};\r\n\r\nexport const RealTimeAgentMonitor: React.FC = () => {\r\n  const [agents, setAgents] = useState<Agent[]>([]);\r\n  const [updates, setUpdates] = useState<Update[]>([]);\r\n  const [systemStatus, setSystemStatus] = useState<SystemStatus | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n    return () => {\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const connectWebSocket = () => {\r\n    const ws = new WebSocket('ws://localhost:8085');\r\n    wsRef.current = ws;\r\n\r\n    ws.onopen = () => {\r\n      console.log('Connected to autonomous agent WebSocket');\r\n      setIsConnected(true);\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const data: RealTimeData = JSON.parse(event.data);\r\n        \r\n        if (data.type === 'agent_status') {\r\n          setAgents(data.data);\r\n        } else if (data.type === 'real_time_update') {\r\n          if (!isPaused) {\r\n            setAgents(data.agents);\r\n            setUpdates(data.recentUpdates);\r\n            setSystemStatus(data.systemStatus);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log('Disconnected from autonomous agent WebSocket');\r\n      setIsConnected(false);\r\n      // Try to reconnect after 5 seconds\r\n      setTimeout(connectWebSocket, 5000);\r\n    };\r\n\r\n    ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      setIsConnected(false);\r\n    };\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Bot className=\"h-6 w-6 text-blue-600\" />\r\n          <h2 className=\"text-2xl font-bold\">Autonomous Agent Monitor</h2>\r\n          <Badge variant={isConnected ? \"default\" : \"destructive\"}>\r\n            {isConnected ? \"Connected\" : \"Disconnected\"}\r\n          </Badge>\r\n        </div>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={togglePause}\r\n          className=\"flex items-center space-x-2\"\r\n        >\r\n          {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\r\n          <span>{isPaused ? \"Resume\" : \"Pause\"}</span>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* System Status */}\r\n      {systemStatus && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              <span>System Status</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{systemStatus.totalAgents}</div>\r\n                <div className=\"text-sm text-gray-600\">Total Agents</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{systemStatus.activeAgents}</div>\r\n                <div className=\"text-sm text-gray-600\">Active Agents</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">\r\n                  {formatUptime(systemStatus.totalUptime)}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Total Uptime</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600\">\r\n                  {updates.length}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Total Updates</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Agent Status Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {agents.map((agent) => (\r\n          <Card key={agent.id} className=\"hover:shadow-lg transition-shadow\">\r\n            <CardHeader className=\"pb-3\">\r\n              <CardTitle className=\"flex items-center justify-between text-sm\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {getAgentIcon(agent.type)}\r\n                  <span>{agent.name}</span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <div className={`w-2 h-2 rounded-full ${getStatusColor(agent.status)}`} />\r\n                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                    {agent.status}\r\n                  </Badge>\r\n                </div>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center space-x-2 text-xs text-gray-600\">\r\n                  <Clock className=\"h-3 w-3\" />\r\n                  <span>Uptime: {formatUptime(agent.uptime)}</span>\r\n                </div>\r\n                <div className=\"text-sm\">\r\n                  <div className=\"font-medium text-gray-900\">Last Action:</div>\r\n                  <div className=\"text-gray-600 text-xs\">{agent.lastAction}</div>\r\n                </div>\r\n                <div className=\"text-sm\">\r\n                  <div className=\"font-medium text-gray-900\">Next Action:</div>\r\n                  <div className=\"text-gray-600 text-xs\">{agent.nextAction}</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Real-time Updates */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            <span>Real-time Updates</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ScrollArea className=\"h-64\">\r\n            <div className=\"space-y-2\">\r\n              {updates.slice().reverse().map((update, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\"\r\n                >\r\n                  <div className=\"flex-shrink-0\">\r\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\" />\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"font-medium text-sm text-gray-900\">\r\n                        {update.agentName}\r\n                      </div>\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        {new Date(update.timestamp).toLocaleTimeString()}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 mt-1\">\r\n                      {update.action}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              {updates.length === 0 && (\r\n                <div className=\"text-center text-gray-500 py-8\">\r\n                  <Bot className=\"h-8 w-8 mx-auto mb-2\" />\r\n                  <p>Waiting for autonomous agent updates...</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\RealtimeDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\RealtimeUIDesignAgent.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'triggerOptimization'. Either include it or remove the dependency array.","line":164,"column":6,"nodeType":"ArrayExpression","endLine":164,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [isOptimizing, triggerOptimization]","fix":{"range":[5910,5924],"text":"[isOptimizing, triggerOptimization]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useRealtimeUIOptimization } from '@/hooks/autonomous/useRealtimeUIOptimization';\r\nimport { useAutonomousAgentManager } from '@/hooks/autonomous/useAutonomousAgentManager';\r\nimport { \r\n  Palette, \r\n  Eye, \r\n  TrendingUp, \r\n  Brush, \r\n  Layout, \r\n  Monitor,\r\n  Sparkles,\r\n  RefreshCw,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Activity,\r\n  Brain,\r\n  Target,\r\n  Zap,\r\n  Shield,\r\n  Users,\r\n  MousePointer,\r\n  Accessibility\r\n} from 'lucide-react';\r\n\r\ninterface UIDesignMetric {\r\n  metric: string;\r\n  value: number;\r\n  target: number;\r\n  trend: 'improving' | 'declining' | 'stable';\r\n  lastOptimized: string;\r\n}\r\n\r\ninterface DesignChange {\r\n  id: string;\r\n  type: 'color' | 'layout' | 'typography' | 'spacing' | 'component';\r\n  description: string;\r\n  impact: number;\r\n  status: 'applied' | 'testing' | 'reverted';\r\n  timestamp: string;\r\n  userFeedback?: number;\r\n}\r\n\r\ninterface PerformanceMetric {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  target: number;\r\n  change: number;\r\n  status: 'optimal' | 'warning' | 'critical';\r\n  icon: React.ComponentType<unknown>;\r\n}\r\n\r\ninterface UserBehaviorData {\r\n  clickHeatmap: { x: number; y: number; intensity: number }[];\r\n  scrollDepth: number;\r\n  timeOnPage: number;\r\n  interactionRate: number;\r\n  bounceRate: number;\r\n  conversionRate: number;\r\n}\r\n\r\ninterface AccessibilityIssue {\r\n  id: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  type: string;\r\n  element: string;\r\n  description: string;\r\n  autoFixAvailable: boolean;\r\n  fixed: boolean;\r\n}\r\n\r\nconst RealtimeUIDesignAgent = () => {\r\n  const { toast } = useToast();\r\n  \r\n  // Enhanced state management\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetric[]>([\r\n    { id: '1', name: 'Page Load Time', value: 1.2, unit: 's', target: 1.0, change: -8.5, status: 'warning', icon: Zap },\r\n    { id: '2', name: 'User Engagement', value: 87, unit: '%', target: 90, change: 5.2, status: 'optimal', icon: Users },\r\n    { id: '3', name: 'Accessibility Score', value: 96, unit: '%', target: 98, change: 2.1, status: 'optimal', icon: Accessibility },\r\n    { id: '4', name: 'Mobile Performance', value: 94, unit: '%', target: 95, change: 1.8, status: 'optimal', icon: Monitor },\r\n    { id: '5', name: 'Conversion Rate', value: 12.4, unit: '%', target: 15, change: 3.2, status: 'warning', icon: Target },\r\n    { id: '6', name: 'Error Rate', value: 0.2, unit: '%', target: 0.1, change: -15.3, status: 'critical', icon: AlertTriangle }\r\n  ]);\r\n\r\n  const [userBehavior, setUserBehavior] = useState<UserBehaviorData>({\r\n    clickHeatmap: [\r\n      { x: 120, y: 80, intensity: 0.9 },\r\n      { x: 300, y: 150, intensity: 0.7 },\r\n      { x: 450, y: 200, intensity: 0.8 }\r\n    ],\r\n    scrollDepth: 73,\r\n    timeOnPage: 4.2,\r\n    interactionRate: 68,\r\n    bounceRate: 24,\r\n    conversionRate: 12.4\r\n  });\r\n\r\n  const [accessibilityIssues, setAccessibilityIssues] = useState<AccessibilityIssue[]>([\r\n    { id: '1', severity: 'medium', type: 'Color Contrast', element: 'button.secondary', description: 'Contrast ratio 3.2:1 is below WCAG AA standard', autoFixAvailable: true, fixed: false },\r\n    { id: '2', severity: 'high', type: 'Alt Text', element: 'img.dashboard-chart', description: 'Missing alt text for informative image', autoFixAvailable: true, fixed: false },\r\n    { id: '3', severity: 'low', type: 'Focus Indicator', element: 'input.search', description: 'Focus indicator could be more prominent', autoFixAvailable: true, fixed: true }\r\n  ]);\r\n\r\n  const [currentOptimization, setCurrentOptimization] = useState<string | null>(null);\r\n  const [activeAgents, setActiveAgents] = useState<string[]>([]);\r\n\r\n  // Integration with autonomous systems\r\n  const {\r\n    isOptimizing,\r\n    appliedChanges,\r\n    optimizationRules,\r\n    startOptimization,\r\n    stopOptimization,\r\n    revertUIChange\r\n  } = useRealtimeUIOptimization();\r\n\r\n  const { agents, systemStatus, getSystemStats } = useAutonomousAgentManager();\r\n  const systemStats = getSystemStats();\r\n\r\n  // Real-time optimization effects\r\n  useEffect(() => {\r\n    if (!isOptimizing) return;\r\n\r\n    const interval = setInterval(() => {\r\n      // Update performance metrics\r\n      setPerformanceMetrics(prev => prev.map(metric => {\r\n        const variance = (Math.random() - 0.5) * 2;\r\n        const newValue = Math.max(0, metric.value + variance);\r\n        const change = newValue - metric.value;\r\n        \r\n        return {\r\n          ...metric,\r\n          value: Math.round(newValue * 10) / 10,\r\n          change: Math.round(change * 10) / 10,\r\n          status: metric.name === 'Error Rate' \r\n            ? (newValue > 0.5 ? 'critical' : newValue > 0.3 ? 'warning' : 'optimal')\r\n            : (newValue >= metric.target * 0.95 ? 'optimal' : newValue >= metric.target * 0.8 ? 'warning' : 'critical')\r\n        };\r\n      }));\r\n\r\n      // Update user behavior simulation\r\n      setUserBehavior(prev => ({\r\n        ...prev,\r\n        scrollDepth: Math.max(0, Math.min(100, prev.scrollDepth + (Math.random() - 0.5) * 5)),\r\n        interactionRate: Math.max(0, Math.min(100, prev.interactionRate + (Math.random() - 0.5) * 3)),\r\n        bounceRate: Math.max(0, Math.min(100, prev.bounceRate + (Math.random() - 0.5) * 2))\r\n      }));\r\n\r\n      // Occasionally trigger optimization\r\n      if (Math.random() < 0.2) {\r\n        triggerOptimization();\r\n      }\r\n    }, 4000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isOptimizing]);\r\n\r\n  const triggerOptimization = () => {\r\n    const optimizations = [\r\n      'Analyzing user interaction patterns',\r\n      'Optimizing color contrast for accessibility',\r\n      'Adjusting responsive breakpoints',\r\n      'Enhancing keyboard navigation',\r\n      'Optimizing loading performance',\r\n      'Improving visual hierarchy',\r\n      'Adjusting touch target sizes'\r\n    ];\r\n\r\n    const randomOptimization = optimizations[Math.floor(Math.random() * optimizations.length)];\r\n    setCurrentOptimization(randomOptimization);\r\n\r\n    setTimeout(() => {\r\n      setCurrentOptimization(null);\r\n      toast({\r\n        title: \"UI Optimization Applied\",\r\n        description: randomOptimization,\r\n        duration: 3000,\r\n      });\r\n    }, 2500);\r\n  };\r\n\r\n  const autoFixAccessibilityIssue = (issueId: string) => {\r\n    setAccessibilityIssues(prev => \r\n      prev.map(issue => \r\n        issue.id === issueId ? { ...issue, fixed: true } : issue\r\n      )\r\n    );\r\n    toast({\r\n      title: \"Accessibility Issue Fixed\",\r\n      description: \"Auto-fix applied successfully\",\r\n      duration: 3000,\r\n    });\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'improving': return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\r\n      case 'declining': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\r\n      default: return <Activity className=\"h-4 w-4 text-blue-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'applied': return 'bg-green-100 text-green-800';\r\n      case 'testing': return 'bg-blue-100 text-blue-800';\r\n      case 'reverted': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'color': return <Palette className=\"h-4 w-4\" />;\r\n      case 'layout': return <Layout className=\"h-4 w-4\" />;\r\n      case 'typography': return <Brush className=\"h-4 w-4\" />;\r\n      case 'spacing': return <Monitor className=\"h-4 w-4\" />;\r\n      default: return <Sparkles className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getPerformanceStatusColor = (status: 'optimal' | 'warning' | 'critical') => {\r\n    switch (status) {\r\n      case 'optimal': return 'text-green-600 bg-green-50';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\r\n      case 'critical': return 'text-red-600 bg-red-50';\r\n      default: return 'text-gray-600 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: 'low' | 'medium' | 'high' | 'critical') => {\r\n    switch (severity) {\r\n      case 'low': return 'bg-blue-500';\r\n      case 'medium': return 'bg-yellow-500';\r\n      case 'high': return 'bg-orange-500';\r\n      case 'critical': return 'bg-red-500';\r\n      default: return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Controls */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\r\n            <Brain className=\"h-6 w-6 text-primary\" />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-2xl font-bold\">Autonomous UI/UX Optimization</h2>\r\n            <p className=\"text-muted-foreground\">Real-time monitoring and improvement system</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge variant={isOptimizing ? \"default\" : \"secondary\"} className=\"px-3 py-1\">\r\n            {isOptimizing ? \"Active\" : \"Inactive\"}\r\n          </Badge>\r\n          <Button \r\n            onClick={isOptimizing ? stopOptimization : startOptimization}\r\n            variant={isOptimizing ? \"destructive\" : \"default\"}\r\n          >\r\n            {isOptimizing ? \"Stop Optimization\" : \"Start Optimization\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Current Optimization Status */}\r\n      {currentOptimization && (\r\n        <Alert className=\"border-blue-200 bg-blue-50\">\r\n          <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n          <AlertDescription className=\"font-medium\">\r\n            {currentOptimization}...\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* System Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Active Agents</p>\r\n                <p className=\"text-2xl font-bold\">{systemStats.active_agents}</p>\r\n              </div>\r\n              <Activity className=\"h-8 w-8 text-blue-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Success Rate</p>\r\n                <p className=\"text-2xl font-bold\">{systemStats.average_success_rate}%</p>\r\n              </div>\r\n              <Target className=\"h-8 w-8 text-green-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Changes Applied</p>\r\n                <p className=\"text-2xl font-bold\">{appliedChanges.length}</p>\r\n              </div>\r\n              <Zap className=\"h-8 w-8 text-yellow-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">System Status</p>\r\n                <p className=\"text-sm font-semibold text-green-600\">{systemStatus}</p>\r\n              </div>\r\n              <Shield className=\"h-8 w-8 text-purple-500\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"performance\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\r\n          <TabsTrigger value=\"behavior\">User Behavior</TabsTrigger>\r\n          <TabsTrigger value=\"accessibility\">Accessibility</TabsTrigger>\r\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"performance\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {performanceMetrics.map((metric) => {\r\n              const IconComponent = metric.icon;\r\n              return (\r\n                <Card key={metric.id}>\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <IconComponent className=\"h-4 w-4 text-muted-foreground\" />\r\n                        <span className=\"text-sm font-medium\">{metric.name}</span>\r\n                      </div>\r\n                      <Badge variant=\"outline\" className={getPerformanceStatusColor(metric.status)}>\r\n                        {metric.status}\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-baseline justify-between\">\r\n                        <span className=\"text-2xl font-bold\">{metric.value}{metric.unit}</span>\r\n                        <span className={`text-sm ${metric.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                          {metric.change >= 0 ? '+' : ''}{metric.change}%\r\n                        </span>\r\n                      </div>\r\n                      <Progress value={(metric.value / metric.target) * 100} className=\"h-2\" />\r\n                      <p className=\"text-xs text-muted-foreground\">Target: {metric.target}{metric.unit}</p>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"behavior\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>User Interaction Patterns</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm\">Scroll Depth</span>\r\n                    <span className=\"font-semibold\">{Math.round(userBehavior.scrollDepth)}%</span>\r\n                  </div>\r\n                  <Progress value={userBehavior.scrollDepth} className=\"h-2\" />\r\n                  \r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm\">Interaction Rate</span>\r\n                    <span className=\"font-semibold\">{Math.round(userBehavior.interactionRate)}%</span>\r\n                  </div>\r\n                  <Progress value={userBehavior.interactionRate} className=\"h-2\" />\r\n                  \r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm\">Bounce Rate</span>\r\n                    <span className=\"font-semibold\">{Math.round(userBehavior.bounceRate)}%</span>\r\n                  </div>\r\n                  <Progress value={userBehavior.bounceRate} className=\"h-2\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Engagement Metrics</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"p-3 rounded-lg bg-blue-50\">\r\n                    <p className=\"text-sm font-medium text-blue-900\">Time on Page</p>\r\n                    <p className=\"text-lg font-bold text-blue-800\">{userBehavior.timeOnPage.toFixed(1)} minutes</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-green-50\">\r\n                    <p className=\"text-sm font-medium text-green-900\">Conversion Rate</p>\r\n                    <p className=\"text-lg font-bold text-green-800\">{userBehavior.conversionRate}%</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-purple-50\">\r\n                    <p className=\"text-sm font-medium text-purple-900\">Click Heatmap</p>\r\n                    <p className=\"text-xs text-purple-700\">{userBehavior.clickHeatmap.length} interaction points tracked</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"accessibility\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Accessibility Issues</CardTitle>\r\n              <CardDescription>\r\n                WCAG compliance monitoring and auto-fixes\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {accessibilityIssues.map((issue) => (\r\n                  <div key={issue.id} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className={`w-3 h-3 rounded-full ${getSeverityColor(issue.severity)}`} />\r\n                      <div>\r\n                        <p className=\"text-sm font-medium\">{issue.type} - {issue.element}</p>\r\n                        <p className=\"text-xs text-muted-foreground\">{issue.description}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {issue.fixed ? (\r\n                        <Badge variant=\"default\" className=\"bg-green-500\">Fixed</Badge>\r\n                      ) : (\r\n                        <>\r\n                          <Badge variant=\"outline\" className=\"capitalize\">{issue.severity}</Badge>\r\n                          {issue.autoFixAvailable && (\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => autoFixAccessibilityIssue(issue.id)}\r\n                            >\r\n                              Auto Fix\r\n                            </Button>\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"insights\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Insights</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"p-3 rounded-lg bg-blue-50\">\r\n                    <p className=\"text-sm font-medium text-blue-900\">Load Time Optimization</p>\r\n                    <p className=\"text-xs text-blue-700\">Recent image compression reduced load time by 23%</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-green-50\">\r\n                    <p className=\"text-sm font-medium text-green-900\">User Engagement</p>\r\n                    <p className=\"text-xs text-green-700\">Color contrast improvements increased engagement by 15%</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-purple-50\">\r\n                    <p className=\"text-sm font-medium text-purple-900\">Mobile Optimization</p>\r\n                    <p className=\"text-xs text-purple-700\">Touch target adjustments improved mobile usability by 18%</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Predictive Analysis</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"p-3 rounded-lg bg-yellow-50\">\r\n                    <p className=\"text-sm font-medium text-yellow-900\">Upcoming Optimization</p>\r\n                    <p className=\"text-xs text-yellow-700\">Typography hierarchy adjustment recommended for better readability</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-red-50\">\r\n                    <p className=\"text-sm font-medium text-red-900\">Performance Alert</p>\r\n                    <p className=\"text-xs text-red-700\">Error rate trending upward - investigation triggered</p>\r\n                  </div>\r\n                  <div className=\"p-3 rounded-lg bg-indigo-50\">\r\n                    <p className=\"text-sm font-medium text-indigo-900\">AI Recommendation</p>\r\n                    <p className=\"text-xs text-indigo-700\">Dark mode implementation could improve user retention by 12%</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RealtimeUIDesignAgent;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\SelfHealingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\SelfLearningEngine.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'adaptiveParameters.adjustment_sensitivity' and 'learningMetrics.confidence_threshold'. Either include them or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [getStats, adaptiveParameters.minimum_data_points, adaptiveParameters.adjustment_sensitivity, learningMetrics.confidence_threshold]","fix":{"range":[3741,3791],"text":"[getStats, adaptiveParameters.minimum_data_points, adaptiveParameters.adjustment_sensitivity, learningMetrics.confidence_threshold]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { useAIConfidenceLogs } from '@/hooks/useAIConfidenceLogs';\r\nimport { Brain, TrendingUp, Settings, Target, BarChart3, Activity } from 'lucide-react';\r\n\r\ninterface LearningMetrics {\r\n  confidence_threshold: number;\r\n  success_rate: number;\r\n  total_decisions: number;\r\n  adjustment_count: number;\r\n  last_adjustment: string;\r\n  performance_trend: 'improving' | 'stable' | 'declining';\r\n}\r\n\r\ninterface ThresholdAdjustment {\r\n  decision_type: string;\r\n  old_threshold: number;\r\n  new_threshold: number;\r\n  reason: string;\r\n  timestamp: string;\r\n}\r\n\r\nconst SelfLearningEngine = () => {\r\n  const { getStats } = useAIConfidenceLogs();\r\n  const [learningMetrics, setLearningMetrics] = useState<LearningMetrics>({\r\n    confidence_threshold: 0.8,\r\n    success_rate: 94.2,\r\n    total_decisions: 1247,\r\n    adjustment_count: 23,\r\n    last_adjustment: new Date().toISOString(),\r\n    performance_trend: 'improving'\r\n  });\r\n\r\n  const [recentAdjustments, setRecentAdjustments] = useState<ThresholdAdjustment[]>([\r\n    {\r\n      decision_type: 'route_optimization',\r\n      old_threshold: 0.85,\r\n      new_threshold: 0.82,\r\n      reason: 'High success rate detected, lowering threshold for efficiency',\r\n      timestamp: new Date(Date.now() - 3600000).toISOString()\r\n    },\r\n    {\r\n      decision_type: 'shipment_assignment',\r\n      old_threshold: 0.75,\r\n      new_threshold: 0.78,\r\n      reason: 'Lower success rate detected, raising threshold for safety',\r\n      timestamp: new Date(Date.now() - 7200000).toISOString()\r\n    }\r\n  ]);\r\n\r\n  const [isLearning, setIsLearning] = useState(true);\r\n  const [adaptiveParameters, setAdaptiveParameters] = useState({\r\n    learning_rate: 0.02,\r\n    adjustment_sensitivity: 0.1,\r\n    minimum_data_points: 50,\r\n    performance_window_hours: 24\r\n  });\r\n\r\n  const performSelfLearning = useCallback(() => {\r\n    const stats = getStats();\r\n    \r\n    // Analyze performance and adjust thresholds\r\n    const shouldAdjust = Math.random() > 0.95; // 5% chance for demo\r\n    \r\n    if (shouldAdjust && stats.total_decisions > adaptiveParameters.minimum_data_points) {\r\n      const adjustmentTypes = ['route_optimization', 'shipment_assignment', 'pricing_decision', 'maintenance_prediction'];\r\n      const randomType = adjustmentTypes[Math.floor(Math.random() * adjustmentTypes.length)];\r\n      \r\n      const oldThreshold = learningMetrics.confidence_threshold;\r\n      const adjustment = (Math.random() - 0.5) * adaptiveParameters.adjustment_sensitivity;\r\n      const newThreshold = Math.max(0.5, Math.min(0.95, oldThreshold + adjustment));\r\n      \r\n      const newAdjustment: ThresholdAdjustment = {\r\n        decision_type: randomType,\r\n        old_threshold: oldThreshold,\r\n        new_threshold: newThreshold,\r\n        reason: adjustment > 0 \r\n          ? 'Performance data suggests higher threshold needed for accuracy'\r\n          : 'High success rate allows for lower threshold to increase efficiency',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      setRecentAdjustments(prev => [newAdjustment, ...prev.slice(0, 4)]);\r\n      setLearningMetrics(prev => ({\r\n        ...prev,\r\n        confidence_threshold: newThreshold,\r\n        adjustment_count: prev.adjustment_count + 1,\r\n        last_adjustment: new Date().toISOString(),\r\n        success_rate: Math.min(100, prev.success_rate + (Math.random() - 0.5) * 2),\r\n        performance_trend: Math.random() > 0.7 ? 'improving' : Math.random() > 0.5 ? 'stable' : 'improving'\r\n      }));\r\n    }\r\n  }, [getStats, adaptiveParameters.minimum_data_points]);\r\n\r\n  useEffect(() => {\r\n    // Simulate continuous learning process\r\n    const learningInterval = setInterval(() => {\r\n      performSelfLearning();\r\n    }, 30000); // Check every 30 seconds\r\n\r\n    return () => clearInterval(learningInterval);\r\n  }, [performSelfLearning]);\r\n\r\n  const getTrendColor = (trend: string) => {\r\n    switch (trend) {\r\n      case 'improving': return 'text-green-600';\r\n      case 'declining': return 'text-red-600';\r\n      default: return 'text-yellow-600';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'improving': return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\r\n      case 'declining': return <TrendingUp className=\"h-4 w-4 text-red-500 rotate-180\" />;\r\n      default: return <Activity className=\"h-4 w-4 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Brain className=\"h-5 w-5 text-purple-500\" />\r\n              <CardTitle>Self-Learning AI Engine</CardTitle>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant={isLearning ? \"default\" : \"secondary\"}>\r\n                {isLearning ? \"LEARNING\" : \"STATIC\"}\r\n              </Badge>\r\n              <div className=\"flex items-center gap-1\">\r\n                {getTrendIcon(learningMetrics.performance_trend)}\r\n                <span className={`text-sm font-medium ${getTrendColor(learningMetrics.performance_trend)}`}>\r\n                  {learningMetrics.performance_trend.toUpperCase()}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <CardDescription>\r\n            Continuously analyzing performance data and autonomously adjusting AI parameters\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Target className=\"h-4 w-4\" />\r\n                <span className=\"text-sm font-medium\">Current Threshold</span>\r\n              </div>\r\n              <div className=\"text-2xl font-bold\">{(learningMetrics.confidence_threshold * 100).toFixed(1)}%</div>\r\n              <Progress value={learningMetrics.confidence_threshold * 100} className=\"h-2\" />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-4 w-4\" />\r\n                <span className=\"text-sm font-medium\">Success Rate</span>\r\n              </div>\r\n              <div className=\"text-2xl font-bold text-green-600\">{learningMetrics.success_rate.toFixed(1)}%</div>\r\n              <Progress value={learningMetrics.success_rate} className=\"h-2\" />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Settings className=\"h-4 w-4\" />\r\n                <span className=\"text-sm font-medium\">Adjustments</span>\r\n              </div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">{learningMetrics.adjustment_count}</div>\r\n              <div className=\"text-xs text-muted-foreground\">\r\n                Last: {new Date(learningMetrics.last_adjustment).toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Activity className=\"h-4 w-4\" />\r\n                <span className=\"text-sm font-medium\">Decisions</span>\r\n              </div>\r\n              <div className=\"text-2xl font-bold\">{learningMetrics.total_decisions}</div>\r\n              <div className=\"text-xs text-muted-foreground\">Total analyzed</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Recent Autonomous Adjustments</CardTitle>\r\n          <CardDescription>\r\n            AI-driven threshold and parameter adjustments based on performance analysis\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {recentAdjustments.map((adjustment, index) => (\r\n              <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                <div className=\"space-y-1\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"font-medium capitalize\">\r\n                      {adjustment.decision_type.replace('_', ' ')}\r\n                    </span>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {adjustment.old_threshold.toFixed(2)} ‚Üí {adjustment.new_threshold.toFixed(2)}\r\n                    </Badge>\r\n                  </div>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {adjustment.reason}\r\n                  </p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {new Date(adjustment.timestamp).toLocaleString()}\r\n                  </p>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className={`text-sm font-medium ${\r\n                    adjustment.new_threshold > adjustment.old_threshold \r\n                      ? 'text-red-600' \r\n                      : 'text-green-600'\r\n                  }`}>\r\n                    {adjustment.new_threshold > adjustment.old_threshold ? '‚Üë' : '‚Üì'} \r\n                    {Math.abs((adjustment.new_threshold - adjustment.old_threshold) * 100).toFixed(1)}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Adaptive Learning Parameters</CardTitle>\r\n          <CardDescription>\r\n            Current self-learning configuration (autonomously managed)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <span className=\"text-sm font-medium\">Learning Rate</span>\r\n              <div className=\"text-lg font-bold\">{adaptiveParameters.learning_rate}</div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <span className=\"text-sm font-medium\">Sensitivity</span>\r\n              <div className=\"text-lg font-bold\">{adaptiveParameters.adjustment_sensitivity}</div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <span className=\"text-sm font-medium\">Min Data Points</span>\r\n              <div className=\"text-lg font-bold\">{adaptiveParameters.minimum_data_points}</div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <span className=\"text-sm font-medium\">Window (hrs)</span>\r\n              <div className=\"text-lg font-bold\">{adaptiveParameters.performance_window_hours}</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelfLearningEngine;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\SimpleAgentTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\SimpleLiveUpdate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\SimpleTestAgent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\WebsiteBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7598,7601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7598,7601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'pageTypes'. Either include it or remove the dependency array.","line":182,"column":6,"nodeType":"ArrayExpression","endLine":182,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [pageTypes]","fix":{"range":[9120,9122],"text":"[pageTypes]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport {\r\n  FileText,\r\n  Globe,\r\n  Code,\r\n  Image,\r\n  Search,\r\n  Settings,\r\n  CheckCircle,\r\n  Clock,\r\n  Zap,\r\n  Eye,\r\n  EyeOff,\r\n  Play,\r\n  Pause,\r\n  RotateCcw,\r\n  Truck,\r\n  Route,\r\n  Package,\r\n  Users,\r\n  BarChart3,\r\n  RefreshCw\r\n} from 'lucide-react';\r\nimport { websiteBuilderService } from '@/services/websiteBuilderService';\r\n\r\ninterface PageBuild {\r\n  id: string;\r\n  pageName: string;\r\n  status: 'building' | 'completed' | 'failed' | 'queued';\r\n  progress: number;\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  content: string;\r\n  seoScore: number;\r\n  imageCount: number;\r\n  wordCount: number;\r\n  type: 'home' | 'about' | 'tms-software' | 'features' | 'pricing' | 'contact' | 'blog' | 'solutions' | 'resources' | 'support' | 'careers' | 'demo' | 'api' | 'integrations';\r\n}\r\n\r\ninterface WebsiteStats {\r\n  totalPages: number;\r\n  pagesBuilt: number;\r\n  pagesInProgress: number;\r\n  averageBuildTime: number;\r\n  seoScore: number;\r\n  totalWords: number;\r\n  totalImages: number;\r\n}\r\n\r\nexport default function WebsiteBuilder() {\r\n  const [pageBuilds, setPageBuilds] = useState<PageBuild[]>([]);\r\n  const [stats, setStats] = useState<WebsiteStats>({\r\n    totalPages: 50,\r\n    pagesBuilt: 5,\r\n    pagesInProgress: 0,\r\n    averageBuildTime: 0,\r\n    seoScore: 0,\r\n    totalWords: 0,\r\n    totalImages: 0\r\n  });\r\n  const [isRunning, setIsRunning] = useState(true);\r\n  const [showDetails, setShowDetails] = useState(true);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  const pageTypes = [\r\n    { type: 'home', name: 'Home Page', icon: Globe },\r\n    { type: 'about', name: 'About Trans Bot AI', icon: Users },\r\n    { type: 'tms-software', name: 'TMS Software', icon: Truck },\r\n    { type: 'features', name: 'TMS Features', icon: Settings },\r\n    { type: 'pricing', name: 'Pricing Plans', icon: Code },\r\n    { type: 'contact', name: 'Contact Us', icon: Eye },\r\n    { type: 'blog', name: 'TMS Blog', icon: FileText },\r\n    { type: 'solutions', name: 'Industry Solutions', icon: Route },\r\n    { type: 'resources', name: 'Resources', icon: FileText },\r\n    { type: 'support', name: 'Support', icon: Settings },\r\n    { type: 'careers', name: 'Careers', icon: Users },\r\n    { type: 'demo', name: 'Request Demo', icon: Play },\r\n    { type: 'api', name: 'API Documentation', icon: Code },\r\n    { type: 'integrations', name: 'Integrations', icon: Package }\r\n  ];\r\n\r\n  const generateContent = (pageType: string) => {\r\n    const contentTemplates = {\r\n      home: `Trans Bot AI - Leading TMS Software Company. We build intelligent Transportation Management Systems that revolutionize logistics operations. Our autonomous AI-powered platform ensures 24/7 optimization, real-time tracking, and seamless fleet management for modern transportation companies.`,\r\n      about: `Trans Bot AI is a pioneering software company specializing in Transportation Management Systems (TMS). Founded with a vision to revolutionize logistics through AI, we serve over 1,000+ transportation companies worldwide with our cutting-edge autonomous TMS platform.`,\r\n      'tms-software': `Our flagship TMS software combines artificial intelligence with advanced logistics management. Features include autonomous route optimization, real-time fleet tracking, intelligent load matching, automated dispatching, and comprehensive analytics for transportation companies.`,\r\n      features: `Discover our comprehensive TMS features: Autonomous Route Optimization, Real-time Fleet Tracking, Intelligent Load Matching, Automated Dispatching, Driver Management, Fuel Optimization, Compliance Monitoring, and Advanced Analytics. Each feature is designed for maximum efficiency.`,\r\n      pricing: `Choose from our flexible TMS pricing plans designed to scale with your transportation business. All plans include full access to our autonomous TMS system, 24/7 support, real-time updates, and comprehensive training for your team.`,\r\n      contact: `Get in touch with our TMS experts. We're here to help you implement our autonomous Transportation Management System that drives your logistics operations forward. Contact us for a personalized TMS consultation.`,\r\n      blog: `Stay updated with the latest insights in TMS technology, logistics trends, and transportation best practices. Our expert team shares valuable knowledge to help transportation companies succeed with autonomous systems.`,\r\n      solutions: `Explore our tailored TMS solutions for various transportation industries. From trucking companies to logistics providers, our autonomous systems adapt to your specific transportation needs and operational requirements.`,\r\n      resources: `Access our comprehensive TMS resource library including documentation, tutorials, case studies, and best practices to maximize your Transportation Management System's potential and optimize your logistics operations.`,\r\n      support: `Get the TMS support you need with our dedicated team. We provide 24/7 assistance, comprehensive TMS documentation, and personalized training to ensure your transportation management success.`,\r\n      careers: `Join our team of TMS innovators and help shape the future of transportation technology. We offer competitive benefits, growth opportunities, and a collaborative work environment for software professionals.`,\r\n      demo: `Experience our autonomous TMS software in action. Request a personalized demo to see how our Transportation Management System can optimize your logistics operations, reduce costs, and improve efficiency.`,\r\n      api: `Integrate our TMS software with your existing systems through our comprehensive API. Access real-time data, automate operations, and build custom solutions that work seamlessly with our autonomous transportation platform.`,\r\n      integrations: `Connect our TMS software with your favorite tools and platforms. We offer integrations with ERP systems, accounting software, GPS tracking devices, fuel cards, and more to streamline your transportation operations.`\r\n    };\r\n    return contentTemplates[pageType as keyof typeof contentTemplates] || contentTemplates.home;\r\n  };\r\n\r\n  // Initialize service and listen for events\r\n  useEffect(() => {\r\n    console.log('üèóÔ∏è WebsiteBuilder component initializing...');\r\n    \r\n    // Ensure service is running\r\n    websiteBuilderService.restart();\r\n    setIsConnected(true);\r\n\r\n    const unsubscribe = websiteBuilderService.onEvent((event) => {\r\n      console.log('üì° WebsiteBuilder received event:', event.type);\r\n      \r\n      if (event.type === 'service_started' || event.type === 'service_status') {\r\n        setIsConnected(true);\r\n        setIsRunning(true);\r\n      } else if (event.type === 'page_build_started') {\r\n        const pageType = pageTypes.find(pt => pt.type === event.pageType);\r\n        if (pageType) {\r\n          const newPage: PageBuild = {\r\n            id: event.pageId,\r\n            pageName: pageType.name,\r\n            status: 'building',\r\n            progress: 0,\r\n            startTime: new Date(event.timestamp),\r\n            content: generateContent(event.pageType),\r\n            seoScore: Math.floor(Math.random() * 30) + 70,\r\n            imageCount: Math.floor(Math.random() * 5) + 1,\r\n            wordCount: Math.floor(Math.random() * 200) + 100,\r\n            type: event.pageType as any\r\n          };\r\n          setPageBuilds(prev => [newPage, ...prev.slice(0, 19)]); // Keep last 20 pages\r\n        }\r\n      } else if (event.type === 'page_build_completed') {\r\n        setPageBuilds(prev => prev.map(page =>\r\n          page.id === event.pageId\r\n            ? {\r\n                ...page,\r\n                status: 'completed',\r\n                progress: 100,\r\n                endTime: new Date(event.timestamp),\r\n                seoScore: event.seoScore,\r\n                wordCount: event.wordCount\r\n              }\r\n            : page\r\n        ));\r\n      } else if (event.type === 'builder_paused') {\r\n        setIsRunning(false);\r\n      } else if (event.type === 'builder_resumed') {\r\n        setIsRunning(true);\r\n      }\r\n    });\r\n\r\n    // Update stats periodically\r\n    const statsInterval = setInterval(async () => {\r\n      try {\r\n        const status = await websiteBuilderService.getStatus();\r\n        const metrics = await websiteBuilderService.getMetrics();\r\n        \r\n        setStats({\r\n          totalPages: 50,\r\n          pagesBuilt: status.pagesBuilt,\r\n          pagesInProgress: status.pagesInProgress,\r\n          averageBuildTime: status.avgBuildMs,\r\n          seoScore: status.avgSeoScore,\r\n          totalWords: metrics.totalWords,\r\n          totalImages: metrics.totalImages\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating stats:', error);\r\n      }\r\n    }, 2000);\r\n\r\n    return () => {\r\n      unsubscribe();\r\n      clearInterval(statsInterval);\r\n    };\r\n  }, []);\r\n\r\n  const handlePauseResume = async () => {\r\n    try {\r\n      if (isRunning) {\r\n        await websiteBuilderService.pause();\r\n      } else {\r\n        await websiteBuilderService.resume();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling pause/resume:', error);\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    websiteBuilderService.restart();\r\n    setPageBuilds([]);\r\n    setIsConnected(true);\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'border-green-500 bg-green-50';\r\n      case 'building': return 'border-blue-500 bg-blue-50';\r\n      case 'failed': return 'border-red-500 bg-red-50';\r\n      default: return 'border-gray-300 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    const pageType = pageTypes.find(pt => pt.type === type);\r\n    return pageType ? React.createElement(pageType.icon, { className: 'w-4 h-4' }) : <FileText className=\"w-4 h-4\" />;\r\n  };\r\n\r\n  const formatDuration = (ms: number) => {\r\n    if (ms < 1000) return `${ms}ms`;\r\n    return `${(ms / 1000).toFixed(1)}s`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Truck className=\"w-6 h-6 text-blue-500\" />\r\n          <h2 className=\"text-2xl font-bold\">Trans Bot AI - TMS Website Builder</h2>\r\n          <Badge variant={isRunning ? \"default\" : \"secondary\"}>\r\n            {isRunning ? \"Building\" : \"Paused\"}\r\n          </Badge>\r\n          <Badge variant={isConnected ? \"default\" : \"destructive\"}>\r\n            {isConnected ? \"Connected\" : \"Disconnected\"}\r\n          </Badge>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handlePauseResume}\r\n          >\r\n            {isRunning ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\r\n            {isRunning ? \"Pause\" : \"Resume\"}\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handleRestart}\r\n          >\r\n            <RefreshCw className=\"w-4 h-4\" />\r\n            Restart\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setShowDetails(!showDetails)}\r\n          >\r\n            {showDetails ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n            {showDetails ? \"Hide Details\" : \"Show Details\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Website Stats */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <FileText className=\"w-5 h-5 text-green-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">TMS Pages Built</p>\r\n                <p className=\"text-2xl font-bold\">{stats.pagesBuilt}/50</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Clock className=\"w-5 h-5 text-blue-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Avg Build Time</p>\r\n                <p className=\"text-2xl font-bold\">{formatDuration(stats.averageBuildTime)}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Search className=\"w-5 h-5 text-purple-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">SEO Score</p>\r\n                <p className=\"text-2xl font-bold\">{stats.seoScore.toFixed(0)}%</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Image className=\"w-5 h-5 text-orange-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">TMS Images</p>\r\n                <p className=\"text-2xl font-bold\">{stats.totalImages}</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Live Page Building */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Zap className=\"w-5 h-5\" />\r\n            <span>Live TMS Website Building</span>\r\n            <Badge variant=\"outline\">{pageBuilds.filter(p => p.status === 'building').length} building</Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ScrollArea className=\"h-96\">\r\n            <div className=\"space-y-3\">\r\n              {pageBuilds.length === 0 ? (\r\n                <div className=\"text-center py-8 text-gray-500\">\r\n                  <Truck className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                  <p>Waiting for autonomous agents to start building...</p>\r\n                  <p className=\"text-sm\">The website builder will begin automatically</p>\r\n                </div>\r\n              ) : (\r\n                pageBuilds.map((page) => (\r\n                  <div\r\n                    key={page.id}\r\n                    className={`flex items-start space-x-3 p-4 border rounded-lg hover:bg-muted/50 transition-colors ${getStatusColor(page.status)}`}\r\n                  >\r\n                    <div className=\"flex-shrink-0 mt-1\">\r\n                      {getTypeIcon(page.type)}\r\n                    </div>\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center space-x-2 mb-2\">\r\n                        <span className=\"font-medium text-sm\">{page.pageName}</span>\r\n                        <Badge\r\n                          variant=\"outline\"\r\n                          className={`w-2 h-2 p-0 ${page.status === 'completed' ? 'bg-green-500' : page.status === 'building' ? 'bg-blue-500' : 'bg-gray-500'}`}\r\n                        />\r\n                        {page.status === 'building' && (\r\n                          <Badge variant=\"secondary\" className=\"text-xs\">\r\n                            Building...\r\n                          </Badge>\r\n                        )}\r\n                        {page.status === 'completed' && (\r\n                          <Badge variant=\"default\" className=\"bg-green-500 text-xs\">\r\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\r\n                            Complete\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"mb-2\">\r\n                        <Progress value={page.progress} className=\"h-2\" />\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {page.progress.toFixed(0)}% complete\r\n                        </p>\r\n                      </div>\r\n\r\n                      {showDetails && (\r\n                        <div className=\"space-y-2\">\r\n                          <p className=\"text-xs text-muted-foreground line-clamp-2\">\r\n                            {page.content}\r\n                          </p>\r\n                          <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\r\n                            <span>SEO: {page.seoScore}%</span>\r\n                            <span>Words: {page.wordCount}</span>\r\n                            <span>Images: {page.imageCount}</span>\r\n                            <span>Started: {page.startTime.toLocaleTimeString()}</span>\r\n                            {page.endTime && (\r\n                              <span>Duration: {formatDuration(page.endTime.getTime() - page.startTime.getTime())}</span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Real-time Activity Indicators */}\r\n      <div className=\"flex items-center justify-center space-x-4 p-4 bg-muted/50 rounded-lg\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`}></div>\r\n          <span className=\"text-sm\">Trans Bot AI TMS Website Building</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className={`w-2 h-2 rounded-full ${isRunning ? 'bg-blue-500' : 'bg-yellow-500'} animate-pulse`}></div>\r\n          <span className=\"text-sm\">Real-time TMS Content Generation</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm\">TMS Software SEO Optimization</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Truck className=\"w-4 h-4 text-yellow-500 animate-pulse\" />\r\n          <span className=\"text-sm\">50-Page TMS Website</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\WebsiteBuilderConsole.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3640,3643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3640,3643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Play, \r\n  Pause, \r\n  Square, \r\n  Activity, \r\n  Clock, \r\n  CheckCircle, \r\n  AlertTriangle,\r\n  Zap,\r\n  Truck,\r\n  FileText,\r\n  Search,\r\n  Image,\r\n  Settings,\r\n  Terminal,\r\n  RefreshCw\r\n} from 'lucide-react';\r\nimport { websiteBuilderService, type WebsiteBuilderStatus, type WebsiteBuilderMetrics, type BuildRequest } from '@/services/websiteBuilderService';\r\n\r\ninterface LogEvent {\r\n  id: string;\r\n  timestamp: string;\r\n  level: 'info' | 'warn' | 'error';\r\n  message: string;\r\n  meta?: any;\r\n}\r\n\r\nexport default function WebsiteBuilderConsole() {\r\n  const [status, setStatus] = useState<WebsiteBuilderStatus | null>(null);\r\n  const [metrics, setMetrics] = useState<WebsiteBuilderMetrics | null>(null);\r\n  const [logs, setLogs] = useState<LogEvent[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pageType, setPageType] = useState('home');\r\n  const [priority, setPriority] = useState(5);\r\n  const [seed, setSeed] = useState('demo-001');\r\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\r\n\r\n  const pageTypes = [\r\n    'home', 'about', 'tms-software', 'features', 'pricing', 'contact', \r\n    'blog', 'solutions', 'resources', 'support', 'careers', 'demo', 'api', 'integrations'\r\n  ];\r\n\r\n  const fetchStatus = async () => {\r\n    try {\r\n      const data = await websiteBuilderService.getStatus();\r\n      setStatus(data);\r\n    } catch (error) {\r\n      console.error('Error fetching status:', error);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      const data = await websiteBuilderService.getMetrics();\r\n      setMetrics(data);\r\n    } catch (error) {\r\n      console.error('Error fetching metrics:', error);\r\n    }\r\n  };\r\n\r\n  const pauseBuilder = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await websiteBuilderService.pause();\r\n      if (data.success) {\r\n        await fetchStatus();\r\n        addLog('info', 'Builder paused successfully');\r\n      } else {\r\n        addLog('error', `Failed to pause: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      addLog('error', 'Error pausing builder');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const resumeBuilder = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await websiteBuilderService.resume();\r\n      if (data.success) {\r\n        await fetchStatus();\r\n        addLog('info', 'Builder resumed successfully');\r\n      } else {\r\n        addLog('error', `Failed to resume: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      addLog('error', 'Error resuming builder');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const buildPage = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await websiteBuilderService.buildPage({ type: pageType, priority, seed });\r\n      if (data.success) {\r\n        addLog('info', `Started building ${pageType} page (ID: ${data.pageId})`);\r\n        await fetchStatus();\r\n        await fetchMetrics();\r\n      } else {\r\n        addLog('error', `Failed to build page: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      addLog('error', 'Error building page');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const addLog = (level: 'info' | 'warn' | 'error', message: string, meta?: any) => {\r\n    const newLog: LogEvent = {\r\n      id: Date.now().toString(),\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      message,\r\n      meta\r\n    };\r\n    setLogs(prev => [newLog, ...prev.slice(0, 99)]); // Keep last 100 logs\r\n  };\r\n\r\n  const getStatusColor = (operational: boolean, paused: boolean) => {\r\n    if (!operational) return 'bg-red-500';\r\n    if (paused) return 'bg-yellow-500';\r\n    return 'bg-green-500';\r\n  };\r\n\r\n  const getStatusText = (operational: boolean, paused: boolean) => {\r\n    if (!operational) return 'STOPPED';\r\n    if (paused) return 'PAUSED';\r\n    return 'RUNNING';\r\n  };\r\n\r\n  const formatUptime = (ms: number) => {\r\n    const seconds = Math.floor(ms / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\r\n  };\r\n\r\n  const formatDuration = (ms: number) => {\r\n    if (ms < 1000) return `${ms}ms`;\r\n    return `${(ms / 1000).toFixed(1)}s`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStatus();\r\n    fetchMetrics();\r\n\r\n    // Listen for real-time events from the service\r\n    const unsubscribe = websiteBuilderService.onEvent((event) => {\r\n      switch (event.type) {\r\n        case 'page_build_started':\r\n          addLog('info', `Autonomous agent started building ${event.pageType} page`, {\r\n            pageId: event.pageId,\r\n            priority: event.priority,\r\n            seed: event.seed\r\n          });\r\n          break;\r\n        case 'page_build_completed':\r\n          addLog('info', `Autonomous agent completed ${event.pageType} page`, {\r\n            pageId: event.pageId,\r\n            seoScore: event.seoScore,\r\n            wordCount: event.wordCount,\r\n            buildMs: event.buildMs\r\n          });\r\n          break;\r\n        case 'builder_paused':\r\n          addLog('warn', event.message);\r\n          break;\r\n        case 'builder_resumed':\r\n          addLog('info', event.message);\r\n          break;\r\n        case 'progress_update':\r\n          // Update status when progress changes\r\n          fetchStatus();\r\n          fetchMetrics();\r\n          break;\r\n      }\r\n    });\r\n\r\n    const interval = setInterval(() => {\r\n      fetchStatus();\r\n      fetchMetrics();\r\n      setLastUpdate(new Date());\r\n    }, 2000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Status */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Terminal className=\"w-6 h-6\" />\r\n              <span>Trans Bot AI Website Builder Console</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              {status && (\r\n                <Badge \r\n                  variant=\"outline\" \r\n                  className={`${getStatusColor(status.operational, status.paused)} text-white`}\r\n                >\r\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-2 animate-pulse\"></div>\r\n                  {getStatusText(status.operational, status.paused)}\r\n                </Badge>\r\n              )}\r\n              <Badge variant=\"outline\">\r\n                Last update: {lastUpdate.toLocaleTimeString()}\r\n              </Badge>\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Activity className=\"w-5 h-5 text-blue-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Pages Built</p>\r\n                <p className=\"text-2xl font-bold\" data-testid=\"pages-built\">\r\n                  {status?.pagesBuilt || 0}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Clock className=\"w-5 h-5 text-green-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Avg Build Time</p>\r\n                <p className=\"text-2xl font-bold\">\r\n                  {status?.avgBuildMs ? formatDuration(status.avgBuildMs) : '0ms'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Search className=\"w-5 h-5 text-purple-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Avg SEO Score</p>\r\n                <p className=\"text-2xl font-bold\">\r\n                  {status?.avgSeoScore || 0}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Zap className=\"w-5 h-5 text-yellow-500\" />\r\n              <div>\r\n                <p className=\"text-sm font-medium\">Uptime</p>\r\n                <p className=\"text-2xl font-bold\">\r\n                  {status?.uptime ? formatUptime(status.uptime) : '0s'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Controls */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Control Panel */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Settings className=\"w-5 h-5\" />\r\n              <span>Builder Controls</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Button\r\n                onClick={pauseBuilder}\r\n                disabled={isLoading || !status?.operational || status?.paused}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <Pause className=\"w-4 h-4 mr-2\" />\r\n                Pause\r\n              </Button>\r\n              <Button\r\n                onClick={resumeBuilder}\r\n                disabled={isLoading || !status?.operational || !status?.paused}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <Play className=\"w-4 h-4 mr-2\" />\r\n                Resume\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  fetchStatus();\r\n                  fetchMetrics();\r\n                  addLog('info', 'Manual refresh triggered');\r\n                }}\r\n                disabled={isLoading}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n                Refresh\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"pageType\">Page Type</Label>\r\n              <select\r\n                id=\"pageType\"\r\n                value={pageType}\r\n                onChange={(e) => setPageType(e.target.value)}\r\n                className=\"w-full p-2 border rounded-md\"\r\n              >\r\n                {pageTypes.map(type => (\r\n                  <option key={type} value={type}>\r\n                    {type.charAt(0).toUpperCase() + type.slice(1)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"priority\">Priority (1-10)</Label>\r\n                <Input\r\n                  id=\"priority\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"10\"\r\n                  value={priority}\r\n                  onChange={(e) => setPriority(parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"seed\">Seed</Label>\r\n                <Input\r\n                  id=\"seed\"\r\n                  value={seed}\r\n                  onChange={(e) => setSeed(e.target.value)}\r\n                  placeholder=\"demo-001\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Button\r\n              onClick={buildPage}\r\n              disabled={isLoading || !status?.operational || status?.paused}\r\n              className=\"w-full\"\r\n            >\r\n              <FileText className=\"w-4 h-4 mr-2\" />\r\n              Build Page\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Real-time Metrics */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Activity className=\"w-5 h-5\" />\r\n              <span>Real-time Metrics</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                <p className=\"text-sm font-medium text-blue-700\">In Progress</p>\r\n                <p className=\"text-2xl font-bold text-blue-800\">\r\n                  {metrics?.pagesInProgress || 0}\r\n                </p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                <p className=\"text-sm font-medium text-green-700\">Events (60s)</p>\r\n                <p className=\"text-2xl font-bold text-green-800\">\r\n                  {metrics?.eventsLast60s || 0}\r\n                </p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                <p className=\"text-sm font-medium text-purple-700\">Total Words</p>\r\n                <p className=\"text-2xl font-bold text-purple-800\">\r\n                  {metrics?.totalWords || 0}\r\n                </p>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\r\n                <p className=\"text-sm font-medium text-orange-700\">Total Images</p>\r\n                <p className=\"text-2xl font-bold text-orange-800\">\r\n                  {metrics?.totalImages || 0}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>SEO Score Progress</span>\r\n                <span>{metrics?.avgSeoScore || 0}%</span>\r\n              </div>\r\n              <Progress \r\n                value={metrics?.avgSeoScore || 0} \r\n                className=\"h-2\"\r\n                data-testid=\"seo-progress\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>Build Performance</span>\r\n                <span>{metrics?.avgBuildMs ? formatDuration(metrics.avgBuildMs) : '0ms'}</span>\r\n              </div>\r\n              <Progress \r\n                value={Math.min(100, (metrics?.avgBuildMs || 0) / 50)} \r\n                className=\"h-2\"\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Live Logs */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Terminal className=\"w-5 h-5\" />\r\n            <span>Live Builder Logs</span>\r\n            <Badge variant=\"outline\">{logs.length} events</Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <ScrollArea className=\"h-64\">\r\n            <div className=\"space-y-2\">\r\n              {logs.map((log) => (\r\n                <div\r\n                  key={log.id}\r\n                  className=\"flex items-start space-x-3 p-2 border rounded-lg hover:bg-muted/50\"\r\n                >\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    {log.level === 'error' && <AlertTriangle className=\"w-4 h-4 text-red-500\" />}\r\n                    {log.level === 'warn' && <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />}\r\n                    {log.level === 'info' && <CheckCircle className=\"w-4 h-4 text-green-500\" />}\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"text-sm font-medium\">{log.message}</span>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {log.level.toUpperCase()}\r\n                      </Badge>\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {new Date(log.timestamp).toLocaleTimeString()}\r\n                    </p>\r\n                    {log.meta && (\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        {JSON.stringify(log.meta)}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ScrollArea>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Status Indicators */}\r\n      <div className=\"flex items-center justify-center space-x-6 p-4 bg-muted/50 rounded-lg\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n          <span className=\"text-sm\">Trans Bot AI TMS Website Builder</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Truck className=\"w-4 h-4 text-blue-500\" />\r\n          <span className=\"text-sm\">Real-time TMS Content</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Zap className=\"w-4 h-4 text-yellow-500 animate-pulse\" />\r\n          <span className=\"text-sm\">Autonomous Operation</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Settings className=\"w-4 h-4 text-purple-500\" />\r\n          <span className=\"text-sm\">Full Control Console</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\WebsiteBuilderMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2964,2967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2964,2967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { ScrollArea } from '../ui/scroll-area';\r\n\r\ninterface WebsiteFile {\r\n  name: string;\r\n  path: string;\r\n  type: 'page' | 'component' | 'style' | 'data';\r\n  lastModified: string;\r\n  status: 'created' | 'updated' | 'building';\r\n  agent: string;\r\n}\r\n\r\ninterface BuildUpdate {\r\n  id: number;\r\n  agent: string;\r\n  action: string;\r\n  file: string;\r\n  timestamp: string;\r\n}\r\n\r\nconst WebsiteBuilderMonitor: React.FC = () => {\r\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\r\n  const [websiteFiles, setWebsiteFiles] = useState<WebsiteFile[]>([]);\r\n  const [buildUpdates, setBuildUpdates] = useState<BuildUpdate[]>([]);\r\n  const [totalBuilds, setTotalBuilds] = useState(0);\r\n  const [activeAgents, setActiveAgents] = useState(0);\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n\r\n  useEffect(() => {\r\n    const connectWebSocket = () => {\r\n      const ws = new WebSocket('ws://localhost:8085');\r\n      wsRef.current = ws;\r\n\r\n      ws.onopen = () => {\r\n        setConnectionStatus('connected');\r\n        console.log('üîå Connected to autonomous website builder');\r\n        \r\n        // Request initial build process\r\n        ws.send(JSON.stringify({ type: 'request_build' }));\r\n      };\r\n\r\n      ws.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          \r\n          if (data.type === 'real_time_update') {\r\n            // Add new build update\r\n            setBuildUpdates(prev => [{\r\n              id: Date.now(),\r\n              agent: data.agent,\r\n              action: data.action,\r\n              file: data.file,\r\n              timestamp: data.timestamp\r\n            }, ...prev.slice(0, 19)]); // Keep last 20 updates\r\n\r\n            // Update website files\r\n            const fileName = data.file.split('/').pop() || 'Unknown';\r\n            const fileType = getFileType(fileName);\r\n            \r\n            setWebsiteFiles(prev => {\r\n              const existingFileIndex = prev.findIndex(f => f.name === fileName);\r\n              const newFile: WebsiteFile = {\r\n                name: fileName,\r\n                path: data.file,\r\n                type: fileType,\r\n                lastModified: new Date().toLocaleTimeString(),\r\n                status: 'updated',\r\n                agent: data.agent\r\n              };\r\n\r\n              if (existingFileIndex >= 0) {\r\n                const updated = [...prev];\r\n                updated[existingFileIndex] = { ...newFile, status: 'updated' };\r\n                return updated;\r\n              } else {\r\n                return [newFile, ...prev];\r\n              }\r\n            });\r\n          }\r\n\r\n          if (data.type === 'agent_status') {\r\n            setActiveAgents(data.data.filter((agent: any) => agent.status === 'building').length);\r\n          }\r\n\r\n          if (data.systemStatus) {\r\n            setTotalBuilds(data.systemStatus.totalBuilds || 0);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      ws.onclose = () => {\r\n        setConnectionStatus('disconnected');\r\n        console.log('üîå Disconnected from autonomous website builder');\r\n        \r\n        // Try to reconnect after 5 seconds\r\n        setTimeout(connectWebSocket, 5000);\r\n      };\r\n\r\n      ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        setConnectionStatus('disconnected');\r\n      };\r\n    };\r\n\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getFileType = (fileName: string): 'page' | 'component' | 'style' | 'data' => {\r\n    if (fileName.includes('dashboard') || fileName.includes('page')) return 'page';\r\n    if (fileName.includes('Component') || fileName.includes('component')) return 'component';\r\n    if (fileName.includes('.css') || fileName.includes('style')) return 'style';\r\n    return 'data';\r\n  };\r\n\r\n  const getFileIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'page': return 'üìÑ';\r\n      case 'component': return 'üß©';\r\n      case 'style': return 'üé®';\r\n      case 'data': return 'üìä';\r\n      default: return 'üìÅ';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'created': return 'bg-green-100 text-green-800';\r\n      case 'updated': return 'bg-blue-100 text-blue-800';\r\n      case 'building': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const triggerNewBuild = () => {\r\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify({ type: 'request_build' }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">üèóÔ∏è Website Builder Monitor</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Watch autonomous agents build and modify your website in real-time\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className={`w-3 h-3 rounded-full ${\r\n              connectionStatus === 'connected' ? 'bg-green-500' : \r\n              connectionStatus === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'\r\n            }`}></div>\r\n            <span className=\"text-sm capitalize\">{connectionStatus}</span>\r\n          </div>\r\n          <Button onClick={triggerNewBuild} size=\"sm\">\r\n            üöÄ Trigger Build\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Builds</p>\r\n                <p className=\"text-2xl font-bold\">{totalBuilds}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">üèóÔ∏è</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Agents</p>\r\n                <p className=\"text-2xl font-bold\">{activeAgents}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">ü§ñ</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Files Modified</p>\r\n                <p className=\"text-2xl font-bold\">{websiteFiles.length}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">üìÅ</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">Recent Updates</p>\r\n                <p className=\"text-2xl font-bold\">{buildUpdates.length}</p>\r\n              </div>\r\n              <div className=\"text-2xl\">‚ö°</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Website Files */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              üìÅ Website Files Being Built\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-80\">\r\n              <div className=\"space-y-3\">\r\n                {websiteFiles.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <div className=\"text-4xl mb-2\">ü§ñ</div>\r\n                    <p>Waiting for autonomous agents to start building...</p>\r\n                    <p className=\"text-sm\">Files will appear here as they are created or modified</p>\r\n                  </div>\r\n                ) : (\r\n                  websiteFiles.map((file, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <span className=\"text-xl\">{getFileIcon(file.type)}</span>\r\n                        <div>\r\n                          <p className=\"font-medium\">{file.name}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">{file.path}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge className={getStatusColor(file.status)}>\r\n                          {file.status}\r\n                        </Badge>\r\n                        <span className=\"text-xs text-muted-foreground\">\r\n                          {file.lastModified}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Build Updates */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              üîÑ Live Build Updates\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-80\">\r\n              <div className=\"space-y-3\">\r\n                {buildUpdates.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <div className=\"text-4xl mb-2\">‚ö°</div>\r\n                    <p>Waiting for build updates...</p>\r\n                    <p className=\"text-sm\">Updates will appear here as agents work</p>\r\n                  </div>\r\n                ) : (\r\n                  buildUpdates.map((update) => (\r\n                    <div key={update.id} className=\"p-3 border-l-4 border-green-500 bg-green-50 rounded-r-lg\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex-1\">\r\n                          <p className=\"font-medium text-green-800\">\r\n                            {update.agent}\r\n                          </p>\r\n                          <p className=\"text-sm text-green-700\">{update.action}</p>\r\n                          <p className=\"text-xs text-green-600 mt-1\">\r\n                            {update.file}\r\n                          </p>\r\n                        </div>\r\n                        <span className=\"text-xs text-green-600\">\r\n                          {new Date(update.timestamp).toLocaleTimeString()}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      <Card className=\"border-blue-200 bg-blue-50\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-blue-800\">üìã How to See the Built Pages</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2 text-blue-700\">\r\n            <p>‚Ä¢ <strong>New pages</strong> are being created in <code>src/pages/</code></p>\r\n            <p>‚Ä¢ <strong>Components</strong> are being built in <code>src/components/</code></p>\r\n            <p>‚Ä¢ <strong>Styles</strong> are being updated in <code>src/styles/</code></p>\r\n            <p>‚Ä¢ <strong>Data files</strong> are being generated in <code>src/data/</code></p>\r\n            <p className=\"mt-3 font-medium\">üí° Refresh your website to see the new pages and components!</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebsiteBuilderMonitor;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\AutoActivationBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\CurrentOperationsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\InstructionsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\MainControlCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\StatusInfoCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\activation\\SystemStatsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\performance\\PerformanceOptimizationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\scaling\\CurrentResourcesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\scaling\\DemandForecastCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\scaling\\ScalingActionsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\scaling\\ScalingRecommendationsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\scaling\\ScalingStatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\AgentTypeBreakdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\RecentTaskActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\TaskCoordinatorHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\useBatchProcessing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\useTaskExecution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\autonomous\\task-coordinator\\useTaskGeneration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\billing\\UsageMeter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mockUsageData'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, mockUsageData]","fix":{"range":[2434,2445],"text":"[companyId, mockUsageData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { \r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog';\r\nimport { \r\n  BarChart3, \r\n  AlertTriangle, \r\n  TrendingUp, \r\n  Zap,\r\n  Info,\r\n  ExternalLink\r\n} from 'lucide-react';\r\n\r\ninterface UsageMetric {\r\n  feature: string;\r\n  used: number;\r\n  limit: number;\r\n  unit: string;\r\n  percentage: number;\r\n  isOverage: boolean;\r\n  isNearLimit: boolean;\r\n}\r\n\r\ninterface UsageMeterProps {\r\n  companyId: string;\r\n  subscriptionTier: 'starter' | 'pro' | 'enterprise';\r\n}\r\n\r\nexport function UsageMeter({ companyId, subscriptionTier }: UsageMeterProps) {\r\n  const [usageMetrics, setUsageMetrics] = useState<UsageMetric[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showUpgradeDialog, setShowUpgradeDialog] = useState(false);\r\n\r\n  // Mock usage data - replace with actual API call\r\n  const mockUsageData: UsageMetric[] = [\r\n    {\r\n      feature: 'quotes',\r\n      used: 8500,\r\n      limit: 10000,\r\n      unit: 'quotes/month',\r\n      percentage: 85,\r\n      isOverage: false,\r\n      isNearLimit: true\r\n    },\r\n    {\r\n      feature: 'bulk_jobs',\r\n      used: 120,\r\n      limit: 100,\r\n      unit: 'jobs/day',\r\n      percentage: 120,\r\n      isOverage: true,\r\n      isNearLimit: false\r\n    },\r\n    {\r\n      feature: 'directory_invites',\r\n      used: 45,\r\n      limit: 50,\r\n      unit: 'invites/month',\r\n      percentage: 90,\r\n      isOverage: false,\r\n      isNearLimit: true\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchUsageData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        // TODO: Replace with actual API call\r\n        // const response = await fetch(`/api/usage/${companyId}`);\r\n        // const data = await response.json();\r\n        \r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setUsageMetrics(mockUsageData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch usage data:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUsageData();\r\n  }, [companyId]);\r\n\r\n  const hasOverage = usageMetrics.some(metric => metric.isOverage);\r\n  const hasNearLimit = usageMetrics.some(metric => metric.isNearLimit && !metric.isOverage);\r\n\r\n  const getProgressColor = (percentage: number, isOverage: boolean) => {\r\n    if (isOverage) return 'bg-red-500';\r\n    if (percentage >= 90) return 'bg-yellow-500';\r\n    if (percentage >= 75) return 'bg-orange-500';\r\n    return 'bg-green-500';\r\n  };\r\n\r\n  const getTierLimits = () => {\r\n    switch (subscriptionTier) {\r\n      case 'starter':\r\n        return {\r\n          quotes: '10,000',\r\n          bulk_jobs: '100',\r\n          directory_invites: '50',\r\n          price: '$99/month'\r\n        };\r\n      case 'pro':\r\n        return {\r\n          quotes: '50,000',\r\n          bulk_jobs: '500',\r\n          directory_invites: '200',\r\n          price: '$299/month'\r\n        };\r\n      case 'enterprise':\r\n        return {\r\n          quotes: 'Unlimited',\r\n          bulk_jobs: 'Unlimited',\r\n          directory_invites: 'Unlimited',\r\n          price: 'Custom'\r\n        };\r\n      default:\r\n        return {\r\n          quotes: '10,000',\r\n          bulk_jobs: '100',\r\n          directory_invites: '50',\r\n          price: '$99/month'\r\n        };\r\n    }\r\n  };\r\n\r\n  const handleRequestIncrease = () => {\r\n    setShowUpgradeDialog(true);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BarChart3 className=\"h-5 w-5\" />\r\n            Usage Meter\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center py-8\">\r\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n            <span className=\"ml-2\">Loading usage data...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BarChart3 className=\"h-5 w-5\" />\r\n            Usage Meter\r\n            <Badge variant=\"outline\" className=\"ml-auto\">\r\n              {subscriptionTier.toUpperCase()}\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {hasOverage && (\r\n            <Alert variant=\"destructive\">\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                You have exceeded usage limits. Additional charges may apply.\r\n                <Button\r\n                  variant=\"link\"\r\n                  className=\"p-0 h-auto font-normal text-destructive underline\"\r\n                  onClick={handleRequestIncrease}\r\n                >\r\n                  Request limit increase\r\n                </Button>\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {hasNearLimit && !hasOverage && (\r\n            <Alert>\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                You're approaching usage limits. Consider upgrading your plan.\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          <div className=\"space-y-4\">\r\n            {usageMetrics.map((metric) => (\r\n              <div key={metric.feature} className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"font-medium capitalize\">\r\n                      {metric.feature.replace('_', ' ')}\r\n                    </span>\r\n                    {metric.isOverage && (\r\n                      <Badge variant=\"destructive\" className=\"text-xs\">\r\n                        OVERAGE\r\n                      </Badge>\r\n                    )}\r\n                    {metric.isNearLimit && !metric.isOverage && (\r\n                      <Badge variant=\"secondary\" className=\"text-xs\">\r\n                        NEAR LIMIT\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-sm text-muted-foreground\">\r\n                    {metric.used.toLocaleString()} / {metric.limit.toLocaleString()} {metric.unit}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"space-y-1\">\r\n                  <Progress \r\n                    value={Math.min(metric.percentage, 100)} \r\n                    className=\"h-2\"\r\n                  />\r\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                    <span>{metric.percentage}% used</span>\r\n                    {metric.isOverage && (\r\n                      <span className=\"text-red-600 font-medium\">\r\n                        +{((metric.used - metric.limit) / metric.limit * 100).toFixed(1)}% overage\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"pt-4 border-t\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Info className=\"h-4 w-4 text-muted-foreground\" />\r\n                <span className=\"text-sm text-muted-foreground\">\r\n                  Current plan: {subscriptionTier.toUpperCase()}\r\n                </span>\r\n              </div>\r\n              \r\n              {subscriptionTier !== 'enterprise' && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={handleRequestIncrease}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <TrendingUp className=\"h-4 w-4\" />\r\n                  Upgrade Plan\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Dialog open={showUpgradeDialog} onOpenChange={setShowUpgradeDialog}>\r\n        <DialogContent className=\"sm:max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              <Zap className=\"h-5 w-5\" />\r\n              Upgrade Your Plan\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              Choose a plan that better fits your usage needs and unlock additional features.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div className=\"grid gap-4\">\r\n              {['starter', 'pro', 'enterprise'].map((tier) => {\r\n                const limits = getTierLimits();\r\n                const isCurrentTier = tier === subscriptionTier;\r\n                const isRecommended = tier === 'pro' && subscriptionTier === 'starter';\r\n                \r\n                return (\r\n                  <div\r\n                    key={tier}\r\n                    className={`p-4 rounded-lg border ${\r\n                      isCurrentTier \r\n                        ? 'border-primary bg-primary/5' \r\n                        : 'border-border hover:border-primary/50 cursor-pointer'\r\n                    }`}\r\n                    onClick={() => !isCurrentTier && handleUpgrade(tier)}\r\n                  >\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"font-medium capitalize\">{tier}</span>\r\n                        {isCurrentTier && (\r\n                          <Badge variant=\"secondary\">Current</Badge>\r\n                        )}\r\n                        {isRecommended && (\r\n                          <Badge variant=\"default\" className=\"bg-green-600\">\r\n                            Recommended\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      <span className=\"font-semibold\">{limits.price}</span>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-1 text-sm text-muted-foreground\">\r\n                      <div>‚Ä¢ {limits.quotes} quotes/month</div>\r\n                      <div>‚Ä¢ {limits.bulk_jobs} bulk jobs/day</div>\r\n                      <div>‚Ä¢ {limits.directory_invites} directory invites/month</div>\r\n                      {tier === 'pro' && (\r\n                        <div>‚Ä¢ Priority support</div>\r\n                      )}\r\n                      {tier === 'enterprise' && (\r\n                        <div>‚Ä¢ Custom limits & dedicated support</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            \r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                onClick={() => setShowUpgradeDialog(false)}\r\n                className=\"flex-1\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button \r\n                onClick={() => handleContactSales()}\r\n                className=\"flex-1\"\r\n              >\r\n                Contact Sales\r\n                <ExternalLink className=\"h-4 w-4 ml-1\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\n// Helper functions\r\nconst handleUpgrade = (tier: string) => {\r\n  // TODO: Implement upgrade flow\r\n  console.log(`Upgrading to ${tier} tier`);\r\n  window.open(`/billing/upgrade?tier=${tier}`, '_blank');\r\n};\r\n\r\nconst handleContactSales = () => {\r\n  // TODO: Implement contact sales flow\r\n  console.log('Contacting sales');\r\n  window.open('mailto:sales@transbotai.com?subject=Plan%20Upgrade%20Inquiry', '_blank');\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\BrokerFloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\BrokerHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\BrokerLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\BrokerPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\BrokerSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\pages\\CreateQuote.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\pages\\QuoteDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\AnalyticsReportsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\BulkOperationsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\CommunicationTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\CustomerRatesTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\IntegrationApiTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\QuoteManagementTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\SettingsConfigTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\SmartPricingTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\broker\\tabs\\TemplatesAutomationTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier-dispatch\\DispatchDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCarriers', 'fetchDispatchStats', and 'fetchLoads'. Either include them or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCarriers, fetchDispatchStats, fetchLoads]","fix":{"range":[2560,2562],"text":"[fetchCarriers, fetchDispatchStats, fetchLoads]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { \r\n  Truck, \r\n  MapPin, \r\n  Clock, \r\n  DollarSign, \r\n  TrendingUp, \r\n  AlertCircle,\r\n  CheckCircle,\r\n  PlayCircle,\r\n  Zap,\r\n  Users,\r\n  Package,\r\n  Route\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface Load {\r\n  id: string;\r\n  shipment_number: string;\r\n  origin: string;\r\n  destination: string;\r\n  status: string;\r\n  priority: string;\r\n  equipment_type?: string;\r\n  weight?: number;\r\n  distance_miles?: number;\r\n  pickup_date?: string;\r\n  delivery_date?: string;\r\n  rate?: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface Carrier {\r\n  id: string;\r\n  carrier_name: string;\r\n  contact_phone?: string;\r\n  equipment_types?: string[];\r\n  operating_regions?: string[];\r\n  availability_status?: string;\r\n  performance_score?: number;\r\n  total_loads_completed?: number;\r\n  average_rating?: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface DispatchAssignment {\r\n  load_id: string;\r\n  carrier_id: string;\r\n  assigned_at: string;\r\n  status: 'pending' | 'accepted' | 'rejected' | 'completed';\r\n  notes?: string;\r\n}\r\n\r\nexport function DispatchDashboard() {\r\n  const [loads, setLoads] = useState<Load[]>([]);\r\n  const [carriers, setCarriers] = useState<Carrier[]>([]);\r\n  const [selectedLoad, setSelectedLoad] = useState<Load | null>(null);\r\n  const [selectedCarrier, setSelectedCarrier] = useState<Carrier | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  const [autoDispatchEnabled, setAutoDispatchEnabled] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const [dispatchStats, setDispatchStats] = useState({\r\n    pendingDispatches: 0,\r\n    activeCarriers: 0,\r\n    completionRate: 0,\r\n    avgResponseTime: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchLoads();\r\n    fetchCarriers();\r\n    fetchDispatchStats();\r\n  }, []);\r\n\r\n  const fetchLoads = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('shipments')\r\n        .select('*')\r\n        .in('status', ['pending', 'assigned'])\r\n        .order('priority', { ascending: false })\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setLoads(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching loads:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch loads\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchCarriers = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('freight_carriers')\r\n        .select('*')\r\n        .eq('availability_status', 'available')\r\n        .order('performance_score', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setCarriers(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching carriers:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch carriers\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchDispatchStats = async () => {\r\n    try {\r\n      // Simulate fetching dispatch statistics\r\n      setDispatchStats({\r\n        pendingDispatches: loads.filter(l => l.status === 'pending').length,\r\n        activeCarriers: carriers.filter(c => c.availability_status === 'available').length,\r\n        completionRate: 92.5,\r\n        avgResponseTime: 45\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching dispatch stats:', error);\r\n    }\r\n  };\r\n\r\n  const handleManualDispatch = async () => {\r\n    if (!selectedLoad || !selectedCarrier) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Please select both a load and carrier\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // Update load status to assigned\r\n      const { error: loadError } = await supabase\r\n        .from('shipments')\r\n        .update({ \r\n          status: 'assigned',\r\n          carrier_id: selectedCarrier.id,\r\n          assigned_to: selectedCarrier.id\r\n        })\r\n        .eq('id', selectedLoad.id);\r\n\r\n      if (loadError) throw loadError;\r\n\r\n      // Update carrier status\r\n      const { error: carrierError } = await supabase\r\n        .from('freight_carriers')\r\n        .update({ availability_status: 'assigned' })\r\n        .eq('id', selectedCarrier.id);\r\n\r\n      if (carrierError) throw carrierError;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: `Load ${selectedLoad.shipment_number} assigned to ${selectedCarrier.carrier_name}`,\r\n      });\r\n\r\n      // Refresh data\r\n      await Promise.all([fetchLoads(), fetchCarriers(), fetchDispatchStats()]);\r\n      setSelectedLoad(null);\r\n      setSelectedCarrier(null);\r\n    } catch (error) {\r\n      console.error('Error dispatching load:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to dispatch load\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAutoDispatch = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simple auto-dispatch logic: match based on equipment type and location\r\n      const availableLoads = loads.filter(l => l.status === 'pending');\r\n      const availableCarriers = carriers.filter(c => c.availability_status === 'available');\r\n\r\n      let dispatchedCount = 0;\r\n      \r\n      for (const load of availableLoads) {\r\n        // Find best carrier based on equipment type and score\r\n        const suitableCarriers = availableCarriers.filter(carrier => \r\n          !carrier.equipment_types || \r\n          carrier.equipment_types.includes(load.equipment_type || 'dry_van')\r\n        );\r\n\r\n        if (suitableCarriers.length > 0) {\r\n          // Select carrier with highest performance score\r\n          const bestCarrier = suitableCarriers.reduce((best, current) => \r\n            (current.performance_score || 0) > (best.performance_score || 0) ? current : best\r\n          );\r\n\r\n          // Assign load to carrier\r\n          await supabase\r\n            .from('shipments')\r\n            .update({ \r\n              status: 'assigned',\r\n              carrier_id: bestCarrier.id,\r\n              assigned_to: bestCarrier.id\r\n            })\r\n            .eq('id', load.id);\r\n\r\n          await supabase\r\n            .from('freight_carriers')\r\n            .update({ availability_status: 'assigned' })\r\n            .eq('id', bestCarrier.id);\r\n\r\n          dispatchedCount++;\r\n          // Remove carrier from available list for this batch\r\n          const carrierIndex = availableCarriers.indexOf(bestCarrier);\r\n          if (carrierIndex > -1) {\r\n            availableCarriers.splice(carrierIndex, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      toast({\r\n        title: \"Auto-Dispatch Complete\",\r\n        description: `Successfully dispatched ${dispatchedCount} loads`,\r\n      });\r\n\r\n      // Refresh data\r\n      await Promise.all([fetchLoads(), fetchCarriers(), fetchDispatchStats()]);\r\n    } catch (error) {\r\n      console.error('Error in auto-dispatch:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Auto-dispatch failed\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredLoads = loads.filter(load => {\r\n    const matchesSearch = load.shipment_number.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         load.origin.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         load.destination.toLowerCase().includes(searchQuery.toLowerCase());\r\n    const matchesStatus = filterStatus === 'all' || load.status === filterStatus;\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\r\n      case 'normal': return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case 'low': return 'bg-gray-100 text-gray-800 border-gray-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Carrier Dispatch</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Automated and manual carrier dispatch management\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button \r\n            onClick={handleAutoDispatch}\r\n            disabled={isLoading || loads.filter(l => l.status === 'pending').length === 0}\r\n            className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800\"\r\n          >\r\n            <Zap className=\"h-4 w-4 mr-2\" />\r\n            Auto-Dispatch\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Pending Dispatches</CardTitle>\r\n            <AlertCircle className=\"h-4 w-4 text-orange-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dispatchStats.pendingDispatches}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Loads awaiting assignment\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Carriers</CardTitle>\r\n            <Users className=\"h-4 w-4 text-green-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dispatchStats.activeCarriers}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Available for dispatch\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-blue-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dispatchStats.completionRate}%</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Last 30 days\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Avg Response Time</CardTitle>\r\n            <Clock className=\"h-4 w-4 text-purple-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dispatchStats.avgResponseTime}m</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Carrier acceptance time\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <Tabs defaultValue=\"manual\" className=\"space-y-6\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"manual\">Manual Dispatch</TabsTrigger>\r\n          <TabsTrigger value=\"automatic\">Automatic Rules</TabsTrigger>\r\n          <TabsTrigger value=\"history\">Dispatch History</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"manual\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Available Loads */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Package className=\"h-5 w-5\" />\r\n                  Available Loads\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Select a load to dispatch to a carrier\r\n                </CardDescription>\r\n                <div className=\"flex items-center gap-4\">\r\n                  <Input\r\n                    placeholder=\"Search loads...\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    className=\"max-w-sm\"\r\n                  />\r\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n                    <SelectTrigger className=\"w-32\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Status</SelectItem>\r\n                      <SelectItem value=\"pending\">Pending</SelectItem>\r\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {filteredLoads.map((load) => (\r\n                    <div\r\n                      key={load.id}\r\n                      className={cn(\r\n                        \"p-4 rounded-lg border cursor-pointer transition-all\",\r\n                        selectedLoad?.id === load.id \r\n                          ? \"border-primary bg-primary/5\" \r\n                          : \"border-border hover:border-primary/50\"\r\n                      )}\r\n                      onClick={() => setSelectedLoad(load)}\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <span className=\"font-semibold\">{load.shipment_number}</span>\r\n                        <Badge className={getPriorityColor(load.priority)}>\r\n                          {load.priority}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <MapPin className=\"h-3 w-3\" />\r\n                          {load.origin} ‚Üí {load.destination}\r\n                        </div>\r\n                        {load.weight && (\r\n                          <div>Weight: {load.weight} lbs</div>\r\n                        )}\r\n                        {load.distance_miles && (\r\n                          <div>Distance: {load.distance_miles} miles</div>\r\n                        )}\r\n                        {load.rate && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <DollarSign className=\"h-3 w-3\" />\r\n                            {load.rate}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Available Carriers */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Truck className=\"h-5 w-5\" />\r\n                  Available Carriers\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Select a carrier to assign the load\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {carriers.map((carrier) => (\r\n                    <div\r\n                      key={carrier.id}\r\n                      className={cn(\r\n                        \"p-4 rounded-lg border cursor-pointer transition-all\",\r\n                        selectedCarrier?.id === carrier.id \r\n                          ? \"border-primary bg-primary/5\" \r\n                          : \"border-border hover:border-primary/50\"\r\n                      )}\r\n                      onClick={() => setSelectedCarrier(carrier)}\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <span className=\"font-semibold\">{carrier.carrier_name}</span>\r\n                        <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\r\n                          Available\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\r\n                        {carrier.contact_phone && (\r\n                          <div>Phone: {carrier.contact_phone}</div>\r\n                        )}\r\n                        {carrier.equipment_types && (\r\n                          <div>Equipment: {carrier.equipment_types.join(', ')}</div>\r\n                        )}\r\n                        {carrier.performance_score && (\r\n                          <div>Score: {carrier.performance_score}/100</div>\r\n                        )}\r\n                        {carrier.total_loads_completed && (\r\n                          <div>Completed: {carrier.total_loads_completed} loads</div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Dispatch Action */}\r\n                {selectedLoad && selectedCarrier && (\r\n                  <div className=\"border-t pt-4\">\r\n                    <Button \r\n                      onClick={handleManualDispatch}\r\n                      disabled={isLoading}\r\n                      className=\"w-full\"\r\n                    >\r\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\r\n                      Dispatch Load\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"automatic\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Automatic Dispatch Rules</CardTitle>\r\n              <CardDescription>\r\n                Configure rules for automatic carrier assignment\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label htmlFor=\"auto-dispatch\">Enable Auto-Dispatch</Label>\r\n                  <Button\r\n                    variant={autoDispatchEnabled ? \"default\" : \"outline\"}\r\n                    onClick={() => setAutoDispatchEnabled(!autoDispatchEnabled)}\r\n                  >\r\n                    {autoDispatchEnabled ? \"Enabled\" : \"Disabled\"}\r\n                  </Button>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label>Priority Handling</Label>\r\n                    <Select defaultValue=\"score\">\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"score\">Performance Score</SelectItem>\r\n                        <SelectItem value=\"distance\">Nearest Carrier</SelectItem>\r\n                        <SelectItem value=\"cost\">Lowest Rate</SelectItem>\r\n                        <SelectItem value=\"experience\">Most Experience</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label>Equipment Matching</Label>\r\n                    <Select defaultValue=\"strict\">\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"strict\">Exact Match</SelectItem>\r\n                        <SelectItem value=\"flexible\">Flexible</SelectItem>\r\n                        <SelectItem value=\"unknown\">Any Equipment</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label>Minimum Performance Score</Label>\r\n                  <Input type=\"number\" defaultValue=\"75\" min=\"0\" max=\"100\" />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label>Auto-Dispatch Schedule</Label>\r\n                  <Textarea \r\n                    placeholder=\"Configure when auto-dispatch should run (e.g., every 15 minutes during business hours)\"\r\n                    defaultValue=\"Every 15 minutes between 8:00 AM - 6:00 PM EST\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"history\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Recent Dispatch History</CardTitle>\r\n              <CardDescription>\r\n                Track recent dispatch activities and performance\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-center py-8 text-muted-foreground\">\r\n                Dispatch history will be shown here once dispatches are made\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\CarrierFloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\CarrierHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\CarrierLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\CarrierPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\CarrierSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\DriverManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\DriverOwnerOperatorManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\DriversTable.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDrivers'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDrivers]","fix":{"range":[1100,1102],"text":"[fetchDrivers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { \r\n  Users, \r\n  Truck, \r\n  ExternalLink, \r\n  Mail, \r\n  Phone,\r\n  Calendar,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Clock,\r\n  Eye\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface Driver {\r\n  user_id: string;\r\n  name: string;\r\n  email: string;\r\n  driver_license_number?: string;\r\n  vehicle_assigned?: string;\r\n  driver_status: string;\r\n  last_login?: string;\r\n  created_at: string;\r\n  phone?: string;\r\n  hire_date?: string;\r\n}\r\n\r\nconst DriversTable = () => {\r\n  const [drivers, setDrivers] = useState<Driver[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchDrivers();\r\n  }, []);\r\n\r\n  const fetchDrivers = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('role', 'carrier_driver')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setDrivers(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching drivers:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch drivers\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'active':\r\n        return <Badge variant=\"default\" className=\"bg-green-500\"><CheckCircle className=\"w-3 h-3 mr-1\" />Active</Badge>;\r\n      case 'inactive':\r\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Inactive</Badge>;\r\n      case 'suspended':\r\n        return <Badge variant=\"destructive\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Suspended</Badge>;\r\n      default:\r\n        return <Badge variant=\"outline\">Unknown</Badge>;\r\n    }\r\n  };\r\n\r\n  const openDriverPortal = (userId?: string) => {\r\n    const baseUrl = window.location.origin;\r\n    const portalUrl = userId ? `${baseUrl}/driver?user=${userId}` : `${baseUrl}/driver`;\r\n    window.open(portalUrl, '_blank');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Truck className=\"h-5 w-5\" />\r\n            Drivers\r\n          </CardTitle>\r\n          <CardDescription>Loading drivers...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-32\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Truck className=\"h-5 w-5\" />\r\n          All Drivers ({drivers.length})\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Manage and monitor all drivers in your fleet\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {drivers.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <Users className=\"mx-auto h-12 w-12 text-muted-foreground\" />\r\n            <h3 className=\"mt-2 text-sm font-semibold text-muted-foreground\">No drivers found</h3>\r\n            <p className=\"mt-1 text-sm text-muted-foreground\">\r\n              Get started by inviting drivers to your fleet.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Driver</TableHead>\r\n                  <TableHead>Contact</TableHead>\r\n                  <TableHead>License</TableHead>\r\n                  <TableHead>Vehicle</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Last Login</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {drivers.map((driver) => (\r\n                  <TableRow key={driver.user_id}>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <span className=\"font-medium\">{driver.name}</span>\r\n                        <span className=\"text-sm text-muted-foreground\">\r\n                          Joined {new Date(driver.created_at).toLocaleDateString()}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col gap-1\">\r\n                        <div className=\"flex items-center gap-1 text-sm\">\r\n                          <Mail className=\"h-3 w-3\" />\r\n                          {driver.email}\r\n                        </div>\r\n                        {driver.phone && (\r\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                            <Phone className=\"h-3 w-3\" />\r\n                            {driver.phone}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {driver.driver_license_number ? (\r\n                        <span className=\"text-sm\">{driver.driver_license_number}</span>\r\n                      ) : (\r\n                        <span className=\"text-sm text-muted-foreground\">Not provided</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {driver.vehicle_assigned ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Truck className=\"h-3 w-3\" />\r\n                          <span className=\"text-sm\">{driver.vehicle_assigned}</span>\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-sm text-muted-foreground\">No vehicle assigned</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>{getStatusBadge(driver.driver_status)}</TableCell>\r\n                    <TableCell>\r\n                      {driver.last_login ? (\r\n                        <div className=\"flex items-center gap-1 text-sm\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          {new Date(driver.last_login).toLocaleDateString()}\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-sm text-muted-foreground\">Never</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => openDriverPortal(driver.user_id)}\r\n                        >\r\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n                          Portal\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DriversTable;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\InvitePersonnelDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\OwnerOperatorManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\OwnerOperatorsTable.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchOwnerOperators'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchOwnerOperators]","fix":{"range":[1116,1118],"text":"[fetchOwnerOperators]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { \r\n  Users, \r\n  Building, \r\n  ExternalLink, \r\n  Mail, \r\n  Phone,\r\n  Calendar,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Clock\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface OwnerOperator {\r\n  user_id: string;\r\n  name: string;\r\n  email: string;\r\n  company_name?: string;\r\n  mc_number?: string;\r\n  dot_number?: string;\r\n  last_login?: string;\r\n  created_at: string;\r\n  phone?: string;\r\n  status?: string;\r\n}\r\n\r\nconst OwnerOperatorsTable = () => {\r\n  const [ownerOperators, setOwnerOperators] = useState<OwnerOperator[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchOwnerOperators();\r\n  }, []);\r\n\r\n  const fetchOwnerOperators = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('role', 'owner_operator')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setOwnerOperators(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching owner operators:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch owner operators\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status?: string) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'active':\r\n        return <Badge variant=\"default\" className=\"bg-green-500\"><CheckCircle className=\"w-3 h-3 mr-1\" />Active</Badge>;\r\n      case 'inactive':\r\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Inactive</Badge>;\r\n      case 'suspended':\r\n        return <Badge variant=\"destructive\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Suspended</Badge>;\r\n      default:\r\n        return <Badge variant=\"outline\">Active</Badge>;\r\n    }\r\n  };\r\n\r\n  const openOwnerOperatorPortal = (userId?: string) => {\r\n    const baseUrl = window.location.origin;\r\n    const portalUrl = userId ? `${baseUrl}/owner-operator?user=${userId}` : `${baseUrl}/owner-operator`;\r\n    window.open(portalUrl, '_blank');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Building className=\"h-5 w-5\" />\r\n            Owner-Operators\r\n          </CardTitle>\r\n          <CardDescription>Loading owner-operators...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-32\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Building className=\"h-5 w-5\" />\r\n          All Owner-Operators ({ownerOperators.length})\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Manage and monitor all owner-operators in your network\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {ownerOperators.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <Users className=\"mx-auto h-12 w-12 text-muted-foreground\" />\r\n            <h3 className=\"mt-2 text-sm font-semibold text-muted-foreground\">No owner-operators found</h3>\r\n            <p className=\"mt-1 text-sm text-muted-foreground\">\r\n              Get started by inviting owner-operators to your network.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Owner-Operator</TableHead>\r\n                  <TableHead>Contact</TableHead>\r\n                  <TableHead>Company</TableHead>\r\n                  <TableHead>DOT/MC Numbers</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Last Login</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {ownerOperators.map((ownerOp) => (\r\n                  <TableRow key={ownerOp.user_id}>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <span className=\"font-medium\">{ownerOp.name}</span>\r\n                        <span className=\"text-sm text-muted-foreground\">\r\n                          Joined {new Date(ownerOp.created_at).toLocaleDateString()}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col gap-1\">\r\n                        <div className=\"flex items-center gap-1 text-sm\">\r\n                          <Mail className=\"h-3 w-3\" />\r\n                          {ownerOp.email}\r\n                        </div>\r\n                        {ownerOp.phone && (\r\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                            <Phone className=\"h-3 w-3\" />\r\n                            {ownerOp.phone}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {ownerOp.company_name ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Building className=\"h-3 w-3\" />\r\n                          <span className=\"text-sm\">{ownerOp.company_name}</span>\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-sm text-muted-foreground\">Not provided</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col gap-1\">\r\n                        {ownerOp.dot_number && (\r\n                          <span className=\"text-sm\">DOT: {ownerOp.dot_number}</span>\r\n                        )}\r\n                        {ownerOp.mc_number && (\r\n                          <span className=\"text-sm\">MC: {ownerOp.mc_number}</span>\r\n                        )}\r\n                        {!ownerOp.dot_number && !ownerOp.mc_number && (\r\n                          <span className=\"text-sm text-muted-foreground\">Not provided</span>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>{getStatusBadge(ownerOp.status)}</TableCell>\r\n                    <TableCell>\r\n                      {ownerOp.last_login ? (\r\n                        <div className=\"flex items-center gap-1 text-sm\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          {new Date(ownerOp.last_login).toLocaleDateString()}\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-sm text-muted-foreground\">Never</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => openOwnerOperatorPortal(ownerOp.user_id)}\r\n                        >\r\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n                          Portal\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default OwnerOperatorsTable;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\PersonnelOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\carrier\\PersonnelQuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\coding-assistant\\CodingAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMContacts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMEmails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMLeads.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMOpportunities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CRMProjects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CarrierRelations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\Communications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\ContactsManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\CustomerAccounts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\LeadManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\MarketIntelligence.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\Opportunities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\QuoteCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\RelationshipsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\RevenueForecast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\SalesPipeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\TaskCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\contacts\\ContactStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\leads\\LeadStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\opportunities\\OpportunityStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\projects\\ProjectStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\shared\\CRMEmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\shared\\CRMFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\crm\\shared\\CRMStatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\ActivityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\ActivityList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\CleanTMSDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\DashboardTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\EnhancedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\ExecutiveDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\KpiCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\MultiRegionHealthMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\PerformanceChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[758,761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[758,761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { PerformanceMetric } from '../../data/dashboard/performance';\r\n\r\nexport interface PerformanceChartProps {\r\n  data: PerformanceMetric | undefined;\r\n  onRangeChange?: (range: '7d' | '30d' | '90d') => void;\r\n  onMetricChange?: (metric: string) => void;\r\n  availableMetrics?: Array<{ id: string; name: string; unit: string }>;\r\n  className?: string;\r\n}\r\n\r\ninterface TooltipProps {\r\n  active?: boolean;\r\n  payload?: Array<{ value: number; [key: string]: any }>;\r\n  label?: string;\r\n}\r\n\r\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\r\n        <p className=\"font-medium text-gray-900\">{label}</p>\r\n        <p className=\"text-sm text-gray-600\">\r\n          Value: {payload[0].value}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst formatYAxisTick = (value: number, unit: string) => {\r\n  if (unit === '$') {\r\n    return `$${(value / 1000).toFixed(0)}K`;\r\n  } else if (unit === '%') {\r\n    return `${value}%`;\r\n  } else if (unit === '/5') {\r\n    return value.toFixed(1);\r\n  }\r\n  return value.toLocaleString();\r\n};\r\n\r\nconst formatXAxisTick = (value: string) => {\r\n  const date = new Date(value);\r\n  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n};\r\n\r\nexport const PerformanceChart: React.FC<PerformanceChartProps> = ({\r\n  data,\r\n  onRangeChange,\r\n  onMetricChange,\r\n  availableMetrics = [],\r\n  className\r\n}) => {\r\n  if (!data) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Performance Overview</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-64 text-gray-500\">\r\n            No data available\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const ranges = [\r\n    { value: '7d', label: 'Last 7 Days' },\r\n    { value: '30d', label: 'Last 30 Days' },\r\n    { value: '90d', label: 'Last 90 Days' }\r\n  ];\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle>Performance Overview</CardTitle>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {availableMetrics.length > 0 && (\r\n              <Select\r\n                value={data.id}\r\n                onValueChange={onMetricChange}\r\n              >\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue placeholder=\"Select metric\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {availableMetrics.map((metric) => (\r\n                    <SelectItem key={metric.id} value={metric.id}>\r\n                      {metric.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            )}\r\n            <Select\r\n              value=\"30d\"\r\n              onValueChange={(value: '7d' | '30d' | '90d') => onRangeChange?.(value)}\r\n            >\r\n              <SelectTrigger className=\"w-32\">\r\n                <SelectValue placeholder=\"Select range\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {ranges.map((range) => (\r\n                  <SelectItem key={range.value} value={range.value}>\r\n                    {range.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n          <div>\r\n            <span className=\"font-medium\">Current:</span> {data.currentValue}{data.unit}\r\n          </div>\r\n          <div>\r\n            <span className=\"font-medium\">Previous:</span> {data.previousValue}{data.unit}\r\n          </div>\r\n          <div className={`font-medium ${\r\n            data.changePercent > 0 ? 'text-green-600' : \r\n            data.changePercent < 0 ? 'text-red-600' : 'text-gray-600'\r\n          }`}>\r\n            {data.changePercent > 0 ? '+' : ''}{data.changePercent.toFixed(1)}%\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"h-64\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={data.data}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\r\n              <XAxis\r\n                dataKey=\"date\"\r\n                tickFormatter={formatXAxisTick}\r\n                stroke=\"#6b7280\"\r\n                fontSize={12}\r\n              />\r\n              <YAxis\r\n                tickFormatter={(value) => formatYAxisTick(value, data.unit)}\r\n                stroke=\"#6b7280\"\r\n                fontSize={12}\r\n              />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"value\"\r\n                stroke=\"#3b82f6\"\r\n                strokeWidth={2}\r\n                dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\r\n                activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2 }}\r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\PortalCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\ROIFunnelDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchFunnelData'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchFunnelData, timeframe]","fix":{"range":[1186,1197],"text":"[fetchFunnelData, timeframe]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2852,2855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2852,2855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4143,4146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4143,4146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { \r\n  TrendingUp, \r\n  Users, \r\n  DollarSign, \r\n  Target,\r\n  ArrowRight,\r\n  Calendar,\r\n  BarChart3\r\n} from 'lucide-react';\r\n\r\ninterface FunnelMetrics {\r\n  roi_submissions: number;\r\n  trials_created: number;\r\n  paid_conversions: number;\r\n  roi_to_trial_rate: number;\r\n  trial_to_paid_rate: number;\r\n  overall_conversion_rate: number;\r\n}\r\n\r\ninterface UTMPerformance {\r\n  utm_source: string;\r\n  utm_medium: string;\r\n  utm_campaign: string;\r\n  submissions: number;\r\n  trials: number;\r\n  paid: number;\r\n  trial_rate: number;\r\n  conversion_rate: number;\r\n  avg_monthly_impact: number;\r\n}\r\n\r\nexport const ROIFunnelDashboard: React.FC = () => {\r\n  const [funnelMetrics, setFunnelMetrics] = useState<FunnelMetrics | null>(null);\r\n  const [utmPerformance, setUtmPerformance] = useState<UTMPerformance[]>([]);\r\n  const [timeframe, setTimeframe] = useState<'7d' | '30d' | '90d'>('30d');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchFunnelData();\r\n  }, [timeframe]);\r\n\r\n  const fetchFunnelData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch funnel metrics\r\n      const funnelResponse = await fetch(`/api/roi-funnel?timeframe=${timeframe}`);\r\n      const funnelData = await funnelResponse.json();\r\n      setFunnelMetrics(funnelData);\r\n\r\n      // Fetch UTM performance\r\n      const utmResponse = await fetch(`/api/utm-performance?timeframe=${timeframe}`);\r\n      const utmData = await utmResponse.json();\r\n      setUtmPerformance(utmData);\r\n    } catch (error) {\r\n      console.error('Error fetching funnel data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getConversionColor = (rate: number) => {\r\n    if (rate >= 25) return 'text-green-600';\r\n    if (rate >= 15) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getConversionBadge = (rate: number) => {\r\n    if (rate >= 25) return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Excellent</Badge>;\r\n    if (rate >= 15) return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Good</Badge>;\r\n    return <Badge variant=\"destructive\">Needs Work</Badge>;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h2 className=\"text-2xl font-bold\">ROI Funnel Analytics</h2>\r\n          <div className=\"flex gap-2\">\r\n            {['7d', '30d', '90d'].map((period) => (\r\n              <Button\r\n                key={period}\r\n                variant={timeframe === period ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setTimeframe(period as any)}\r\n              >\r\n                {period}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          {[1, 2, 3].map((i) => (\r\n            <Card key={i}>\r\n              <CardContent className=\"pt-6\">\r\n                <div className=\"animate-pulse\">\r\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\r\n                  <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">ROI Funnel Analytics</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Track conversions from ROI calculator to paid customers\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          {['7d', '30d', '90d'].map((period) => (\r\n            <Button\r\n              key={period}\r\n              variant={timeframe === period ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setTimeframe(period as any)}\r\n            >\r\n              {period}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Funnel Metrics */}\r\n      {funnelMetrics && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">ROI Submissions</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{funnelMetrics.roi_submissions}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Last {timeframe}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Trials Created</CardTitle>\r\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{funnelMetrics.trials_created}</div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className={`text-sm ${getConversionColor(funnelMetrics.roi_to_trial_rate)}`}>\r\n                  {funnelMetrics.roi_to_trial_rate}%\r\n                </span>\r\n                {getConversionBadge(funnelMetrics.roi_to_trial_rate)}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Paid Conversions</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{funnelMetrics.paid_conversions}</div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className={`text-sm ${getConversionColor(funnelMetrics.overall_conversion_rate)}`}>\r\n                  {funnelMetrics.overall_conversion_rate}%\r\n                </span>\r\n                {getConversionBadge(funnelMetrics.overall_conversion_rate)}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Funnel Visualization */}\r\n      {funnelMetrics && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              Funnel Conversion Flow\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex items-center justify-between space-x-4\">\r\n              <div className=\"flex-1 text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">\r\n                  {funnelMetrics.roi_submissions}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">ROI Submissions</div>\r\n              </div>\r\n              <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\r\n              <div className=\"flex-1 text-center\">\r\n                <div className=\"text-2xl font-bold text-yellow-600\">\r\n                  {funnelMetrics.trials_created}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">\r\n                  Trials ({funnelMetrics.roi_to_trial_rate}%)\r\n                </div>\r\n              </div>\r\n              <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\r\n              <div className=\"flex-1 text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  {funnelMetrics.paid_conversions}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">\r\n                  Paid ({funnelMetrics.overall_conversion_rate}%)\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* UTM Performance */}\r\n      {utmPerformance.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>UTM Performance</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full text-sm\">\r\n                <thead>\r\n                  <tr className=\"border-b\">\r\n                    <th className=\"text-left py-2\">Source</th>\r\n                    <th className=\"text-left py-2\">Medium</th>\r\n                    <th className=\"text-left py-2\">Campaign</th>\r\n                    <th className=\"text-right py-2\">Submissions</th>\r\n                    <th className=\"text-right py-2\">Trial Rate</th>\r\n                    <th className=\"text-right py-2\">Conv. Rate</th>\r\n                    <th className=\"text-right py-2\">Avg Impact</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {utmPerformance.map((utm, index) => (\r\n                    <tr key={index} className=\"border-b\">\r\n                      <td className=\"py-2\">{utm.utm_source}</td>\r\n                      <td className=\"py-2\">{utm.utm_medium}</td>\r\n                      <td className=\"py-2\">{utm.utm_campaign}</td>\r\n                      <td className=\"text-right py-2\">{utm.submissions}</td>\r\n                      <td className=\"text-right py-2\">\r\n                        <span className={getConversionColor(utm.trial_rate)}>\r\n                          {utm.trial_rate}%\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"text-right py-2\">\r\n                        <span className={getConversionColor(utm.conversion_rate)}>\r\n                          {utm.conversion_rate}%\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"text-right py-2\">\r\n                        ${Math.round(utm.avg_monthly_impact).toLocaleString()}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Action Items */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Quick Actions</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Button variant=\"outline\" className=\"justify-start\">\r\n              <Calendar className=\"h-4 w-4 mr-2\" />\r\n              Schedule Funnel Review\r\n            </Button>\r\n            <Button variant=\"outline\" className=\"justify-start\">\r\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\r\n              Export Funnel Report\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\SystemHealth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\UltraModernDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\dashboard\\UnifiedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\directory\\DirectoryPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\AIAssistantPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\ActiveDriverPortalAgents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\AutonomousDriverPortalEnhancements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\AutonomousDriverStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DocumentUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverFAB.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverFloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverFormsHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\DriverSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\EnhancedDriverDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\EnhancedDriverSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\FuelPriceWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\LoadDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\ModernDriverHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\ModernDriverLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\ModernDriverSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\TransportInfoForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\TruckStopWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\WeatherWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\actions\\DriverActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\calling\\AdvancedCallingSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\forms\\DeliveryConfirmationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\forms\\IncidentReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\forms\\PreTripInspectionForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\forms\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\driver\\messaging\\AdvancedMessagingSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\EDIDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\EDIMatching.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\EDIPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\EDISetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\FailedInvoices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\FailedTender.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\PartnersList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\components\\EDI210Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\components\\EDI214Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\components\\EDISearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\data\\ediData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\edi\\utils\\ediUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\enterprise\\ROICalculator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateROI'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [calculateROI, inputs]","fix":{"range":[2610,2618],"text":"[calculateROI, inputs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Slider } from '../ui/slider';\r\nimport { Badge } from '../ui/badge';\r\nimport { Download, Calculator, TrendingUp, DollarSign, Clock, Users } from 'lucide-react';\r\nimport { toast } from '../../hooks/use-toast';\r\n\r\ninterface ROICalculation {\r\n  annualQuotes: number;\r\n  timeSaved: number;\r\n  costSavings: number;\r\n  revenueIncrease: number;\r\n  totalROI: number;\r\n  paybackPeriod: number;\r\n  threeYearROI: number;\r\n}\r\n\r\nexport const ROICalculator: React.FC = () => {\r\n  const [inputs, setInputs] = useState({\r\n    laneCount: 50,\r\n    quotesPerMonth: 1000,\r\n    averageRate: 2500,\r\n    winRate: 0.25,\r\n    currentTimePerQuote: 15, // minutes\r\n    currentCostPerHour: 75, // USD\r\n    transbotCost: 299 // monthly\r\n  });\r\n\r\n  const [calculation, setCalculation] = useState<ROICalculation | null>(null);\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n\r\n  const calculateROI = () => {\r\n    setIsCalculating(true);\r\n    \r\n    // Simulate calculation delay\r\n    setTimeout(() => {\r\n      const annualQuotes = inputs.quotesPerMonth * 12;\r\n      const timeSaved = (inputs.currentTimePerQuote - 2) * annualQuotes; // TransBot reduces to 2 min\r\n      const costSavings = (timeSaved / 60) * inputs.currentCostPerHour;\r\n      const revenueIncrease = annualQuotes * inputs.averageRate * (inputs.winRate * 0.05); // 5% improvement\r\n      const totalROI = costSavings + revenueIncrease - (inputs.transbotCost * 12);\r\n      const paybackPeriod = (inputs.transbotCost * 12) / (costSavings + revenueIncrease);\r\n      const threeYearROI = (costSavings + revenueIncrease) * 3 - (inputs.transbotCost * 36);\r\n\r\n      setCalculation({\r\n        annualQuotes,\r\n        timeSaved,\r\n        costSavings,\r\n        revenueIncrease,\r\n        totalROI,\r\n        paybackPeriod,\r\n        threeYearROI\r\n      });\r\n      \r\n      setIsCalculating(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    if (!calculation) return;\r\n    \r\n    // Simulate PDF generation\r\n    toast({\r\n      title: \"ROI Report Generated\",\r\n      description: \"Your ROI calculation has been exported to PDF and sent to your email.\",\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: number) => {\r\n    setInputs(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inputs.laneCount > 0 && inputs.quotesPerMonth > 0) {\r\n      calculateROI();\r\n    }\r\n  }, [inputs]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calculator className=\"h-5 w-5\" />\r\n            ROI Calculator\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Input Section */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"laneCount\">Number of Lanes</Label>\r\n                <Input\r\n                  id=\"laneCount\"\r\n                  type=\"number\"\r\n                  value={inputs.laneCount}\r\n                  onChange={(e) => handleInputChange('laneCount', parseInt(e.target.value) || 0)}\r\n                  placeholder=\"50\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"quotesPerMonth\">Quotes per Month</Label>\r\n                <Input\r\n                  id=\"quotesPerMonth\"\r\n                  type=\"number\"\r\n                  value={inputs.quotesPerMonth}\r\n                  onChange={(e) => handleInputChange('quotesPerMonth', parseInt(e.target.value) || 0)}\r\n                  placeholder=\"1000\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"averageRate\">Average Rate ($)</Label>\r\n                <Input\r\n                  id=\"averageRate\"\r\n                  type=\"number\"\r\n                  value={inputs.averageRate}\r\n                  onChange={(e) => handleInputChange('averageRate', parseInt(e.target.value) || 0)}\r\n                  placeholder=\"2500\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label>Win Rate: {Math.round(inputs.winRate * 100)}%</Label>\r\n                <Slider\r\n                  value={[inputs.winRate * 100]}\r\n                  onValueChange={([value]) => handleInputChange('winRate', value / 100)}\r\n                  max={100}\r\n                  min={0}\r\n                  step={1}\r\n                  className=\"mt-2\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label>Current Time per Quote: {inputs.currentTimePerQuote} min</Label>\r\n                <Slider\r\n                  value={[inputs.currentTimePerQuote]}\r\n                  onValueChange={([value]) => handleInputChange('currentTimePerQuote', value)}\r\n                  max={60}\r\n                  min={5}\r\n                  step={1}\r\n                  className=\"mt-2\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label>Cost per Hour: ${inputs.currentCostPerHour}</Label>\r\n                <Slider\r\n                  value={[inputs.currentCostPerHour]}\r\n                  onValueChange={([value]) => handleInputChange('currentCostPerHour', value)}\r\n                  max={200}\r\n                  min={25}\r\n                  step={5}\r\n                  className=\"mt-2\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Results Section */}\r\n          {calculation && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <DollarSign className=\"h-4 w-4 text-green-600\" />\r\n                      <span className=\"text-sm font-medium\">Annual Savings</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-green-600\">\r\n                      ${calculation.costSavings.toLocaleString()}\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Time savings converted to cost\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <TrendingUp className=\"h-4 w-4 text-blue-600\" />\r\n                      <span className=\"text-sm font-medium\">Revenue Increase</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-blue-600\">\r\n                      ${calculation.revenueIncrease.toLocaleString()}\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      From improved win rates\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <Clock className=\"h-4 w-4 text-purple-600\" />\r\n                      <span className=\"text-sm font-medium\">Time Saved</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-purple-600\">\r\n                      {Math.round(calculation.timeSaved / 60)}h\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Per year\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              <Card>\r\n                <CardContent className=\"pt-6\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    <div>\r\n                      <h3 className=\"font-semibold mb-4\">ROI Summary</h3>\r\n                      <div className=\"space-y-3\">\r\n                        <div className=\"flex justify-between\">\r\n                          <span>Total Annual ROI:</span>\r\n                          <Badge variant={calculation.totalROI > 0 ? \"default\" : \"destructive\"}>\r\n                            ${calculation.totalROI.toLocaleString()}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span>Payback Period:</span>\r\n                          <span>{calculation.paybackPeriod.toFixed(1)} months</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span>3-Year ROI:</span>\r\n                          <span>${calculation.threeYearROI.toLocaleString()}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h3 className=\"font-semibold mb-4\">Key Metrics</h3>\r\n                      <div className=\"space-y-3\">\r\n                        <div className=\"flex justify-between\">\r\n                          <span>Annual Quotes:</span>\r\n                          <span>{calculation.annualQuotes.toLocaleString()}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span>TransBot Cost:</span>\r\n                          <span>${(inputs.transbotCost * 12).toLocaleString()}/year</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span>ROI Percentage:</span>\r\n                          <span>{((calculation.totalROI / (inputs.transbotCost * 12)) * 100).toFixed(0)}%</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <div className=\"flex gap-3\">\r\n                <Button onClick={exportToPDF} className=\"flex items-center gap-2\">\r\n                  <Download className=\"h-4 w-4\" />\r\n                  Export to PDF\r\n                </Button>\r\n                <Button variant=\"outline\" onClick={() => window.print()}>\r\n                  Print Report\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isCalculating && (\r\n            <div className=\"text-center py-8\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\r\n              <p className=\"mt-2 text-sm text-muted-foreground\">Calculating ROI...</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\enterprise\\ROICalculatorEnhanced.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateROI'. Either include it or remove the dependency array.","line":221,"column":6,"nodeType":"ArrayExpression","endLine":221,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [calculateROI, inputs]","fix":{"range":[6784,6792],"text":"[calculateROI, inputs]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8447,8450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8447,8450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Slider } from '../ui/slider';\r\nimport { Badge } from '../ui/badge';\r\nimport { Download, Calculator, TrendingUp, DollarSign, Clock, Users, CreditCard, ExternalLink } from 'lucide-react';\r\nimport { toast } from '../../hooks/use-toast';\r\n\r\ninterface ROICalculation {\r\n  annualQuotes: number;\r\n  timeSaved: number;\r\n  costSavings: number;\r\n  revenueIncrease: number;\r\n  totalROI: number;\r\n  paybackPeriod: number;\r\n  threeYearROI: number;\r\n  monthlyImpact: number;\r\n  incrGP: number;\r\n  hrsSaved: number;\r\n  paybackDays: number;\r\n}\r\n\r\ninterface ROIFormData {\r\n  company_name: string;\r\n  contact_email: string;\r\n  monthly_quotes: number;\r\n  win_rate_before: number;\r\n  avg_revenue_per_load: number;\r\n  avg_margin_before: number;\r\n  minutes_per_quote: number;\r\n  plan: 'starter' | 'pro' | 'enterprise';\r\n  uplift_win_rate: number;\r\n  uplift_margin_pts: number;\r\n  time_reduction_pct: number;\r\n  labor_cost_per_hour: number;\r\n  utm_source?: string;\r\n  utm_medium?: string;\r\n  utm_campaign?: string;\r\n}\r\n\r\nexport const ROICalculatorEnhanced: React.FC = () => {\r\n  const [inputs, setInputs] = useState({\r\n    laneCount: 50,\r\n    quotesPerMonth: 1000,\r\n    averageRate: 2500,\r\n    winRate: 0.25,\r\n    currentTimePerQuote: 15,\r\n    currentCostPerHour: 75,\r\n    transbotCost: 299\r\n  });\r\n\r\n  const [formData, setFormData] = useState<ROIFormData>({\r\n    company_name: '',\r\n    contact_email: '',\r\n    monthly_quotes: 1000,\r\n    win_rate_before: 25,\r\n    avg_revenue_per_load: 2500,\r\n    avg_margin_before: 12,\r\n    minutes_per_quote: 15,\r\n    plan: 'starter',\r\n    uplift_win_rate: 5,\r\n    uplift_margin_pts: 1.2,\r\n    time_reduction_pct: 60,\r\n    labor_cost_per_hour: 75,\r\n    utm_source: 'roi_calculator',\r\n    utm_medium: 'web',\r\n    utm_campaign: 'phase6_launch'\r\n  });\r\n\r\n  const [calculation, setCalculation] = useState<ROICalculation | null>(null);\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [roiId, setRoiId] = useState<string | null>(null);\r\n  const [roiSummaryUrl, setRoiSummaryUrl] = useState<string | null>(null);\r\n\r\n  const calculateROI = () => {\r\n    setIsCalculating(true);\r\n    \r\n    setTimeout(() => {\r\n      const annualQuotes = inputs.quotesPerMonth * 12;\r\n      const timeSaved = (inputs.currentTimePerQuote - 2) * annualQuotes;\r\n      const costSavings = (timeSaved / 60) * inputs.currentCostPerHour;\r\n      const revenueIncrease = annualQuotes * inputs.averageRate * (inputs.winRate * 0.05);\r\n      const totalROI = costSavings + revenueIncrease - (inputs.transbotCost * 12);\r\n      const paybackPeriod = (inputs.transbotCost * 12) / (costSavings + revenueIncrease);\r\n      const threeYearROI = (costSavings + revenueIncrease) * 3 - (inputs.transbotCost * 36);\r\n      const monthlyImpact = (costSavings + revenueIncrease) / 12;\r\n      const incrGP = revenueIncrease;\r\n      const hrsSaved = timeSaved / 60;\r\n      const paybackDays = paybackPeriod * 30;\r\n\r\n      setCalculation({\r\n        annualQuotes,\r\n        timeSaved,\r\n        costSavings,\r\n        revenueIncrease,\r\n        totalROI,\r\n        paybackPeriod,\r\n        threeYearROI,\r\n        monthlyImpact,\r\n        incrGP,\r\n        hrsSaved,\r\n        paybackDays\r\n      });\r\n      \r\n      setIsCalculating(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleSubmitROI = async () => {\r\n    if (!formData.company_name || !formData.contact_email) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please provide company name and contact email.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      // Submit ROI data\r\n      const roiResponse = await fetch('/functions/v1/roi-intake', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ...formData,\r\n          calc: calculation\r\n        })\r\n      });\r\n\r\n      const roiResult = await roiResponse.json();\r\n      \r\n      if (roiResult.ok) {\r\n        setRoiId(roiResult.id);\r\n        \r\n        // Generate ROI summary\r\n        const summaryResponse = await fetch('/functions/v1/roi-summary', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            id: roiResult.id,\r\n            company_name: formData.company_name,\r\n            calc: calculation\r\n          })\r\n        });\r\n\r\n        const summaryResult = await summaryResponse.json();\r\n        if (summaryResult.url) {\r\n          setRoiSummaryUrl(summaryResult.url);\r\n        }\r\n\r\n        toast({\r\n          title: \"ROI Submitted Successfully\",\r\n          description: \"Your ROI calculation has been saved and our team will contact you shortly.\",\r\n        });\r\n      } else {\r\n        throw new Error(roiResult.error || 'Failed to submit ROI');\r\n      }\r\n    } catch (error) {\r\n      console.error('ROI submission error:', error);\r\n      toast({\r\n        title: \"Submission Failed\",\r\n        description: \"There was an error submitting your ROI calculation. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleStartCheckout = async () => {\r\n    if (!formData.contact_email) {\r\n      toast({\r\n        title: \"Email Required\",\r\n        description: \"Please provide your email address to start checkout.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/functions/v1/create-checkout-session', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          email: formData.contact_email,\r\n          plan: formData.plan,\r\n          return_url: window.location.origin\r\n        })\r\n      });\r\n\r\n      const { url } = await response.json();\r\n      if (url) {\r\n        window.location.href = url;\r\n      } else {\r\n        throw new Error('No checkout URL received');\r\n      }\r\n    } catch (error) {\r\n      console.error('Checkout error:', error);\r\n      toast({\r\n        title: \"Checkout Error\",\r\n        description: \"Unable to start checkout. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: number) => {\r\n    setInputs(prev => ({ ...prev, [field]: value }));\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inputs.laneCount > 0 && inputs.quotesPerMonth > 0) {\r\n      calculateROI();\r\n    }\r\n  }, [inputs]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calculator className=\"h-5 w-5\" />\r\n            Enhanced ROI Calculator\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Contact Information */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"company_name\">Company Name *</Label>\r\n              <Input\r\n                id=\"company_name\"\r\n                value={formData.company_name}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, company_name: e.target.value }))}\r\n                placeholder=\"Acme Freight\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"contact_email\">Contact Email *</Label>\r\n              <Input\r\n                id=\"contact_email\"\r\n                type=\"email\"\r\n                value={formData.contact_email}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, contact_email: e.target.value }))}\r\n                placeholder=\"ops@acme.com\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Plan Selection */}\r\n          <div>\r\n            <Label>Select Plan</Label>\r\n            <div className=\"grid grid-cols-3 gap-2 mt-2\">\r\n              {['starter', 'pro', 'enterprise'].map((plan) => (\r\n                <Button\r\n                  key={plan}\r\n                  variant={formData.plan === plan ? \"default\" : \"outline\"}\r\n                  onClick={() => setFormData(prev => ({ ...prev, plan: plan as any }))}\r\n                  className=\"capitalize\"\r\n                >\r\n                  {plan}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Input Section */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"quotesPerMonth\">Quotes per Month</Label>\r\n                <Input\r\n                  id=\"quotesPerMonth\"\r\n                  type=\"number\"\r\n                  value={inputs.quotesPerMonth}\r\n                  onChange={(e) => handleInputChange('quotesPerMonth', parseInt(e.target.value) || 0)}\r\n                  placeholder=\"1000\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"averageRate\">Average Rate ($)</Label>\r\n                <Input\r\n                  id=\"averageRate\"\r\n                  type=\"number\"\r\n                  value={inputs.averageRate}\r\n                  onChange={(e) => handleInputChange('averageRate', parseInt(e.target.value) || 0)}\r\n                  placeholder=\"2500\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label>Win Rate: {Math.round(inputs.winRate * 100)}%</Label>\r\n                <Slider\r\n                  value={[inputs.winRate * 100]}\r\n                  onValueChange={([value]) => handleInputChange('winRate', value / 100)}\r\n                  max={100}\r\n                  min={0}\r\n                  step={1}\r\n                  className=\"mt-2\"\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label>Current Time per Quote: {inputs.currentTimePerQuote} min</Label>\r\n                <Slider\r\n                  value={[inputs.currentTimePerQuote]}\r\n                  onValueChange={([value]) => handleInputChange('currentTimePerQuote', value)}\r\n                  max={60}\r\n                  min={5}\r\n                  step={1}\r\n                  className=\"mt-2\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Results Section */}\r\n          {calculation && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <DollarSign className=\"h-4 w-4 text-green-600\" />\r\n                      <span className=\"text-sm font-medium\">Monthly Impact</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-green-600\">\r\n                      ${calculation.monthlyImpact.toLocaleString()}\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Total monthly benefit\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <TrendingUp className=\"h-4 w-4 text-blue-600\" />\r\n                      <span className=\"text-sm font-medium\">Payback Period</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-blue-600\">\r\n                      {calculation.paybackDays.toFixed(0)} days\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Time to break even\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <Clock className=\"h-4 w-4 text-purple-600\" />\r\n                      <span className=\"text-sm font-medium\">Time Saved</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-purple-600\">\r\n                      {calculation.hrsSaved.toFixed(0)}h\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Per month\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Action Buttons */}\r\n              <div className=\"flex gap-3\">\r\n                <Button \r\n                  onClick={handleSubmitROI} \r\n                  disabled={isSubmitting}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <Download className=\"h-4 w-4\" />\r\n                  {isSubmitting ? 'Submitting...' : 'Save ROI & Get Report'}\r\n                </Button>\r\n                \r\n                <Button \r\n                  onClick={handleStartCheckout}\r\n                  variant=\"outline\"\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <CreditCard className=\"h-4 w-4\" />\r\n                  Start Free Trial\r\n                </Button>\r\n              </div>\r\n\r\n              {/* ROI Summary Link */}\r\n              {roiSummaryUrl && (\r\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <ExternalLink className=\"h-4 w-4\" />\r\n                  <a \r\n                    href={roiSummaryUrl} \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"text-blue-600 hover:underline\"\r\n                  >\r\n                    View ROI Summary\r\n                  </a>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {isCalculating && (\r\n            <div className=\"text-center py-8\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\r\n              <p className=\"mt-2 text-sm text-muted-foreground\">Calculating ROI...</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\factoring\\FactoringPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\BillsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\ChartOfAccountsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\CustomerStatementsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\EmployeesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\FinancialsPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\InvoicesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\PayrollTransactionsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\ProductsServicesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\ReconciliationTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\RecurringInvoicesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\RunPayrollTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\TaxFormsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\TaxesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\TimesheetsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\TransactionsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\financials\\VendorsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\AutonomousLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\AutonomousSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\BottomNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\BottomNavigationIcons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\CardGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\EnhancedModernLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\EnhancedModernSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\EnhancedUltraModernHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\FloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\ModernHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\ModernLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\ModernSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\ResponsiveTMSLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\RoleIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\Sidebar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isMobile', 'isOpen', and 'toggleSidebar'. Either include them or remove the dependency array. If 'toggleSidebar' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":205,"column":6,"nodeType":"ArrayExpression","endLine":205,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isMobile, isOpen, toggleSidebar]","fix":{"range":[9262,9264],"text":"[isMobile, isOpen, toggleSidebar]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { useIsMobile } from '@/hooks/use-mobile';\r\nimport { \r\n  ChevronLeft, \r\n  ChevronRight, \r\n  BookOpen, \r\n  HelpCircle, \r\n  Moon, \r\n  Sun,\r\n  Sparkles,\r\n  X,\r\n  Brain,\r\n  Home,\r\n  Settings,\r\n  BarChart3,\r\n  Package,\r\n  Truck,\r\n  MapPin,\r\n  CreditCard,\r\n  Users,\r\n  FileText,\r\n  ShieldCheck,\r\n  Zap,\r\n  Activity,\r\n  Navigation,\r\n  Fuel,\r\n  Wrench,\r\n  DollarSign,\r\n  Target,\r\n  Building2,\r\n  Phone,\r\n  AlertCircle,\r\n  Clock,\r\n  CheckCircle,\r\n  TrendingUp,\r\n  PieChart,\r\n  Monitor,\r\n  Database,\r\n  UserCheck,\r\n  Network,\r\n  Cpu,\r\n  Shield,\r\n  Globe,\r\n  Layers\r\n} from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface SidebarProps {\r\n  isOpen: boolean;\r\n  toggleSidebar: () => void;\r\n}\r\n\r\nconst Sidebar = ({ isOpen, toggleSidebar }: SidebarProps) => {\r\n  const { selectedRole, user } = useAuth();\r\n  const isMobile = useIsMobile();\r\n  const location = useLocation();\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\r\n  \r\n  // Enhanced menu configuration for all roles\r\n  const getMenuForRole = () => {\r\n    const menus = {\r\n      super_admin: {\r\n        theme: 'from-purple-600/10 to-violet-600/10',\r\n        borderColor: 'border-purple-200/30',\r\n        accentColor: 'text-purple-600',\r\n        items: [\r\n          { id: 'dashboard', label: 'Command Center', icon: Monitor, path: '/dashboard' },\r\n          { id: 'rates', label: 'Rates Portal', icon: DollarSign, path: '/rates' },\r\n          { id: 'directory', label: 'Directory Portal', icon: Building2, path: '/directory' },\r\n          { id: 'edi', label: 'EDI Intelligence', icon: Database, path: '/edi', \r\n            subItems: [\r\n              { id: 'edi-dashboard', label: 'EDI Dashboard', icon: Activity, path: '/edi/dashboard' },\r\n              { id: 'edi-setup', label: 'Setup & Config', icon: Settings, path: '/edi/setup' },\r\n              { id: 'edi-matching', label: 'Message Matching', icon: Layers, path: '/edi/matching' },\r\n              { id: 'failed-tenders', label: 'Failed Tenders', icon: AlertCircle, path: '/edi/failed-tender' },\r\n              { id: 'failed-invoices', label: 'Failed Invoices', icon: FileText, path: '/edi/failed-invoices' },\r\n              { id: 'partners', label: 'Trading Partners', icon: Network, path: '/edi/partners' }\r\n            ]\r\n          },\r\n          { id: 'users', label: 'Global Users', icon: UserCheck, path: '/settings' },\r\n          { id: 'analytics', label: 'Platform Analytics', icon: BarChart3, path: '/analytics' },\r\n          { id: 'autonomous', label: 'AI Orchestration', icon: Brain, path: '/autonomous-system' },\r\n          { id: 'alerts', label: 'System Alerts', icon: Shield, path: '/alerts' },\r\n          { id: 'api', label: 'API Management', icon: Cpu, \r\n            subItems: [\r\n              { id: 'api-dashboard', label: 'API Overview', icon: Monitor, path: '/api/dashboard' },\r\n              { id: 'api-keys', label: 'API Keys', icon: ShieldCheck, path: '/api/keys' },\r\n              { id: 'api-logs', label: 'Request Logs', icon: FileText, path: '/api/logs' },\r\n              { id: 'api-errors', label: 'Error Analysis', icon: AlertCircle, path: '/api/errors' }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      carrier_admin: {\r\n        theme: 'from-blue-600/10 to-cyan-600/10',\r\n        borderColor: 'border-blue-200/30',\r\n        accentColor: 'text-blue-600',\r\n        items: [\r\n          { id: 'dashboard', label: 'Fleet Control', icon: Truck, path: '/dashboard' },\r\n          { id: 'rates', label: 'Rates Portal', icon: DollarSign, path: '/rates' },\r\n          { id: 'directory', label: 'Directory Portal', icon: Building2, path: '/directory' },\r\n          { id: 'assets', label: 'Fleet Management', icon: Package, \r\n            subItems: [\r\n              { id: 'trucks', label: 'Trucks', icon: Truck, path: '/assets?tab=trucks' },\r\n              { id: 'trailers', label: 'Trailers', icon: Package, path: '/assets?tab=trailers' },\r\n              { id: 'units', label: 'Units', icon: Layers, path: '/assets?tab=units' },\r\n              { id: 'fuel-audit', label: 'Fuel Audit', icon: Fuel, path: '/assets?tab=fuel-audit' },\r\n              { id: 'compliance', label: 'Compliance', icon: ShieldCheck, path: '/assets?tab=compliance' },\r\n              { id: 'fleet-tracker', label: 'Fleet Tracker', icon: Navigation, path: '/assets?tab=fleet-tracker' }\r\n            ]\r\n          },\r\n          { id: 'shipments', label: 'Load Management', icon: Package, path: '/shipments' },\r\n          { id: 'workers', label: 'Driver Network', icon: Users, path: '/workers' },\r\n          { id: 'financials', label: 'Financial Hub', icon: CreditCard, path: '/financials' },\r\n          { id: 'analytics', label: 'Performance Intel', icon: BarChart3, path: '/analytics' }\r\n        ]\r\n      },\r\n      freight_broker_admin: {\r\n        theme: 'from-emerald-600/10 to-green-600/10',\r\n        borderColor: 'border-emerald-200/30',\r\n        accentColor: 'text-emerald-600',\r\n        items: [\r\n          { id: 'dashboard', label: 'Broker Hub', icon: Building2, path: '/dashboard' },\r\n          { id: 'rates', label: 'Rates Portal', icon: DollarSign, path: '/rates' },\r\n          { id: 'directory', label: 'Directory Portal', icon: Building2, path: '/directory' },\r\n          { id: 'loadboard', label: 'Load Marketplace', icon: Package, path: '/loadboard' },\r\n          { id: 'quotes', label: 'Rate Intelligence', icon: DollarSign, path: '/quotes' },\r\n          { id: 'shipments', label: 'Shipment Flow', icon: MapPin, path: '/shipments' },\r\n          { id: 'networks', label: 'Network Partners', icon: Network, \r\n            subItems: [\r\n              { id: 'customers', label: 'Customers', icon: Users, path: '/networks?tab=customers' },\r\n              { id: 'vendors', label: 'Vendors', icon: Building2, path: '/networks?tab=vendors' },\r\n              { id: 'locations', label: 'Locations', icon: MapPin, path: '/networks?tab=locations' },\r\n              { id: 'terminals', label: 'Terminals', icon: Layers, path: '/networks?tab=terminals' }\r\n            ]\r\n          },\r\n          { id: 'crm', label: 'Customer Relations', icon: Users, path: '/crm' },\r\n          { id: 'analytics', label: 'Market Analytics', icon: BarChart3, path: '/analytics' }\r\n        ]\r\n      },\r\n      // shipper_admin: Removed to prevent conflicts with ShipperSidebar component\r\n      // shipper_admin uses dedicated ShipperSidebar component with SHIPPER_ADMIN_MENU\r\n      carrier_driver: {\r\n        theme: 'from-cyan-600/10 to-blue-600/10',\r\n        borderColor: 'border-cyan-200/30',\r\n        accentColor: 'text-cyan-600',\r\n        items: [\r\n          { id: 'dashboard', label: 'Driver Hub', icon: Navigation, path: '/dashboard' },\r\n          { id: 'routes', label: 'My Routes', icon: MapPin, path: '/routes' },\r\n          { id: 'logs', label: 'HOS Logs', icon: Clock, path: '/logs' },\r\n          { id: 'inspection', label: 'Vehicle Check', icon: CheckCircle, path: '/inspection' },\r\n          { id: 'fuel', label: 'Fuel Reports', icon: Fuel, path: '/fuel' },\r\n          { id: 'maintenance', label: 'Maintenance', icon: Wrench, path: '/maintenance' },\r\n          { id: 'support', label: 'Dispatch Support', icon: Phone, path: '/support' }\r\n        ]\r\n      },\r\n      owner_operator: {\r\n        theme: 'from-amber-600/10 to-orange-600/10',\r\n        borderColor: 'border-amber-200/30',\r\n        accentColor: 'text-amber-600',\r\n        items: [\r\n          { id: 'dashboard', label: 'Business Hub', icon: Target, path: '/dashboard' },\r\n          { id: 'loads', label: 'Load Opportunities', icon: Package, path: '/loads' },\r\n          { id: 'financials', label: 'Business Finance', icon: DollarSign, path: '/financials' },\r\n          { id: 'maintenance', label: 'Fleet Maintenance', icon: Wrench, path: '/maintenance' },\r\n          { id: 'fuel', label: 'Fuel Management', icon: Fuel, path: '/fuel' },\r\n          { id: 'analytics', label: 'Business Intel', icon: PieChart, path: '/analytics' },\r\n          { id: 'tax', label: 'Tax Management', icon: FileText, path: '/tax' }\r\n        ]\r\n      }\r\n    };\r\n    \r\n    return menus[selectedRole] || menus.super_admin;\r\n  };\r\n\r\n  const currentMenu = getMenuForRole();\r\n  \r\n  useEffect(() => {\r\n    const isDark = document.documentElement.classList.contains('dark');\r\n    setIsDarkMode(isDark);\r\n    \r\n    // Save sidebar state to localStorage\r\n    localStorage.setItem('sidebarOpen', isOpen.toString());\r\n  }, [isOpen]);\r\n\r\n  // Load sidebar state from localStorage on mount\r\n  useEffect(() => {\r\n    const savedState = localStorage.getItem('sidebarOpen');\r\n    if (savedState && !isMobile) {\r\n      // Only apply saved state on desktop\r\n      const shouldBeOpen = savedState === 'true';\r\n      if (shouldBeOpen !== isOpen) {\r\n        toggleSidebar();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const toggleDarkMode = () => {\r\n    document.documentElement.classList.toggle('dark');\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  const isActive = (path: string) => location.pathname === path;\r\n  \r\n  const toggleSubmenu = (itemId: string) => {\r\n    setActiveSubmenu(activeSubmenu === itemId ? null : itemId);\r\n  };\r\n\r\n  const trackUserActivity = (path: string, action: string) => {\r\n    console.log(`User activity: ${action} on ${path}`);\r\n  };\r\n\r\n  const renderMenuItem = (item: unknown) => {\r\n    const hasSubmenu = item.subItems && item.subItems.length > 0;\r\n    const isSubmenuOpen = activeSubmenu === item.id;\r\n    const ItemIcon = item.icon;\r\n\r\n    if (hasSubmenu) {\r\n      return (\r\n        <div key={item.id} className=\"space-y-1\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            className={cn(\r\n              \"w-full justify-start h-11 px-3 transition-all duration-300 hover:scale-[1.02]\",\r\n              \"hover:bg-gradient-to-r hover:from-accent/60 hover:to-accent/40 hover:shadow-md\",\r\n              \"group relative overflow-hidden rounded-xl\",\r\n              isSubmenuOpen && \"bg-gradient-to-r from-accent/40 to-accent/20 shadow-sm\"\r\n            )}\r\n            onClick={() => toggleSubmenu(item.id)}\r\n          >\r\n            <div className=\"flex items-center justify-between w-full\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className={cn(\r\n                  \"h-8 w-8 rounded-lg flex items-center justify-center transition-all duration-300\",\r\n                  \"bg-gradient-to-br from-primary/10 to-primary/5 group-hover:from-primary/20 group-hover:to-primary/10\",\r\n                  isSubmenuOpen && \"from-primary/20 to-primary/10\"\r\n                )}>\r\n                  <ItemIcon className={cn(\"h-4 w-4 transition-colors\", currentMenu.accentColor)} />\r\n                </div>\r\n                {isOpen && (\r\n                  <span className=\"font-medium text-sm transition-colors group-hover:text-foreground\">\r\n                    {item.label}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              {isOpen && (\r\n                <ChevronRight className={cn(\r\n                  \"h-4 w-4 transition-transform duration-300\",\r\n                  isSubmenuOpen && \"rotate-90\"\r\n                )} />\r\n              )}\r\n            </div>\r\n          </Button>\r\n          \r\n          {isSubmenuOpen && isOpen && (\r\n            <div className=\"space-y-1 pl-3 ml-3 border-l-2 border-border/30 animate-fade-in\">\r\n              {item.subItems.map((subItem: unknown) => {\r\n                const SubIcon = subItem.icon;\r\n                return (\r\n                  <Link\r\n                    key={subItem.id}\r\n                    to={subItem.path}\r\n                    className={cn(\r\n                      \"flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all duration-200\",\r\n                      \"hover:bg-gradient-to-r hover:from-accent/40 hover:to-accent/20 hover:scale-[1.02]\",\r\n                      \"group relative overflow-hidden\",\r\n                      isActive(subItem.path) && \"bg-gradient-to-r from-primary/10 to-primary/5 text-primary shadow-sm border border-primary/20\"\r\n                    )}\r\n                    onClick={() => trackUserActivity(subItem.path, 'submenu_click')}\r\n                  >\r\n                    <div className=\"h-6 w-6 rounded-md flex items-center justify-center bg-gradient-to-br from-muted to-muted/50\">\r\n                      <SubIcon className=\"h-3 w-3\" />\r\n                    </div>\r\n                    <span className=\"text-sm font-medium\">{subItem.label}</span>\r\n                  </Link>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Link\r\n        key={item.id}\r\n        to={item.path}\r\n        className={cn(\r\n          \"flex items-center gap-3 px-3 py-3 rounded-xl transition-all duration-300 hover:scale-[1.02]\",\r\n          \"hover:bg-gradient-to-r hover:from-accent/60 hover:to-accent/40 hover:shadow-md\",\r\n          \"group relative overflow-hidden\",\r\n          isActive(item.path) && \"bg-gradient-to-r from-primary/15 to-primary/8 text-primary shadow-lg border border-primary/20\"\r\n        )}\r\n        onClick={() => trackUserActivity(item.path, 'menu_click')}\r\n      >\r\n        <div className={cn(\r\n          \"h-8 w-8 rounded-lg flex items-center justify-center transition-all duration-300\",\r\n          \"bg-gradient-to-br from-primary/10 to-primary/5 group-hover:from-primary/20 group-hover:to-primary/10\",\r\n          isActive(item.path) && \"from-primary/25 to-primary/15 shadow-sm\"\r\n        )}>\r\n          <ItemIcon className={cn(\r\n            \"h-4 w-4 transition-colors\", \r\n            isActive(item.path) ? \"text-primary\" : currentMenu.accentColor\r\n          )} />\r\n        </div>\r\n        {isOpen && (\r\n          <span className={cn(\r\n            \"font-medium text-sm transition-colors group-hover:text-foreground\",\r\n            isActive(item.path) && \"font-semibold\"\r\n          )}>\r\n            {item.label}\r\n          </span>\r\n        )}\r\n      </Link>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex h-screen flex-col transition-all duration-300 ease-in-out z-50 relative\",\r\n        \"bg-gradient-to-b from-background/95 via-background/90 to-background/95\",\r\n        \"backdrop-blur-xl border-r shadow-2xl\",\r\n        currentMenu.borderColor,\r\n        isOpen ? \"w-80\" : \"w-16\",\r\n        isMobile && isOpen && \"fixed inset-y-0 left-0 w-80\",\r\n        isMobile && !isOpen && \"hidden\"\r\n      )}\r\n    >\r\n      {/* Enhanced Header with Theme */}\r\n      <div className={cn(\r\n        \"flex h-16 items-center justify-between border-b px-4 relative overflow-hidden\",\r\n        \"bg-gradient-to-r\", currentMenu.theme, currentMenu.borderColor\r\n      )}>\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent opacity-50\" />\r\n        \r\n        <div className=\"flex items-center gap-3 relative z-10\">\r\n          <div className=\"relative\">\r\n            <div className=\"h-10 w-10 rounded-xl bg-gradient-to-br from-primary via-primary/90 to-primary/80 shadow-lg flex items-center justify-center relative overflow-hidden\">\r\n              <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent\" />\r\n              <Sparkles className=\"h-5 w-5 text-white relative z-10\" />\r\n            </div>\r\n            <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full shadow-sm animate-pulse\" />\r\n          </div>\r\n          \r\n          {isOpen && (\r\n            <div className=\"flex flex-col\">\r\n              <span className=\"text-lg font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent tracking-tight\">\r\n                LogiPortal\r\n              </span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\" className={cn(\"text-xs font-medium\", currentMenu.accentColor, \"border-current/30 bg-current/5\")}>\r\n                  {selectedRole?.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                </Badge>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Brain className=\"h-3 w-3 text-emerald-500 animate-pulse\" />\r\n                  <span className=\"text-xs text-emerald-500 font-medium\">AI Active</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n          onClick={toggleSidebar}\r\n          className=\"h-9 w-9 rounded-xl hover:bg-white/10 hover:scale-110 transition-all duration-200 relative z-10\"\r\n        >\r\n          {isMobile ? (\r\n            <X className=\"h-4 w-4\" />\r\n          ) : isOpen ? (\r\n            <ChevronLeft className=\"h-4 w-4\" />\r\n          ) : (\r\n            <ChevronRight className=\"h-4 w-4\" />\r\n          )}\r\n        </Button>\r\n      </div>\r\n      \r\n      {/* User Info Section (when open) */}\r\n      {isOpen && (\r\n        <div className={cn(\r\n          \"px-4 py-3 border-b relative overflow-hidden\",\r\n          \"bg-gradient-to-r\", currentMenu.theme, currentMenu.borderColor\r\n        )}>\r\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/3 to-transparent\" />\r\n          <div className=\"flex items-center gap-3 relative z-10\">\r\n            <div className=\"h-8 w-8 rounded-lg bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center\">\r\n              <span className=\"text-sm font-bold text-primary\">\r\n                {user?.name?.charAt(0).toUpperCase() || 'U'}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex-1 min-w-0\">\r\n              <p className=\"text-sm font-medium truncate\">{user?.name || 'User'}</p>\r\n              <p className=\"text-xs text-muted-foreground\">Online ‚Ä¢ Active</p>\r\n            </div>\r\n            <div className=\"h-2 w-2 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full animate-pulse\" />\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Enhanced Navigation Menu */}\r\n      <ScrollArea className=\"flex-1 px-3 py-4\">\r\n        <div className=\"space-y-2\">\r\n          {currentMenu.items.map(renderMenuItem)}\r\n        </div>\r\n      </ScrollArea>\r\n      \r\n      <Separator className=\"mx-3 opacity-30\" />\r\n      \r\n      {/* Enhanced Footer Actions */}\r\n      <div className={cn(\r\n        \"p-3 relative overflow-hidden\",\r\n        \"bg-gradient-to-t\", currentMenu.theme\r\n      )}>\r\n        <div className=\"absolute inset-0 bg-gradient-to-t from-white/5 to-transparent\" />\r\n        <div className=\"grid grid-cols-3 gap-2 relative z-10\">\r\n          <TooltipProvider>\r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-11 w-full flex flex-col gap-1 hover:bg-white/10 hover:scale-105 transition-all duration-200 rounded-xl\"\r\n                >\r\n                  <BookOpen className=\"h-4 w-4\" />\r\n                  {isOpen && <span className=\"text-xs font-medium\">Learn</span>}\r\n                </Button>\r\n              </TooltipTrigger>\r\n              <TooltipContent side=\"right\" className={isOpen ? \"hidden\" : \"\"}>\r\n                <p>Learn & Documentation</p>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n            \r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-11 w-full flex flex-col gap-1 hover:bg-white/10 hover:scale-105 transition-all duration-200 rounded-xl\"\r\n                >\r\n                  <HelpCircle className=\"h-4 w-4\" />\r\n                  {isOpen && <span className=\"text-xs font-medium\">Help</span>}\r\n                </Button>\r\n              </TooltipTrigger>\r\n              <TooltipContent side=\"right\" className={isOpen ? \"hidden\" : \"\"}>\r\n                <p>Help & Support</p>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n            \r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-11 w-full flex flex-col gap-1 hover:bg-white/10 hover:scale-105 transition-all duration-200 rounded-xl\"\r\n                  onClick={toggleDarkMode}\r\n                >\r\n                  {isDarkMode ? (\r\n                    <>\r\n                      <Sun className=\"h-4 w-4\" />\r\n                      {isOpen && <span className=\"text-xs font-medium\">Light</span>}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Moon className=\"h-4 w-4\" />\r\n                      {isOpen && <span className=\"text-xs font-medium\">Dark</span>}\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </TooltipTrigger>\r\n              <TooltipContent side=\"right\" className={isOpen ? \"hidden\" : \"\"}>\r\n                <p>{isDarkMode ? \"Light Mode\" : \"Dark Mode\"}</p>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n          </TooltipProvider>\r\n        </div>\r\n        \r\n        {/* Status Indicator */}\r\n        {isOpen && (\r\n          <div className=\"mt-3 pt-3 border-t border-white/10\">\r\n            <div className=\"flex items-center justify-between text-xs\">\r\n              <span className=\"text-muted-foreground\">System Status</span>\r\n              <div className=\"flex items-center gap-1\">\r\n                <div className=\"h-2 w-2 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full animate-pulse\" />\r\n                <span className=\"text-green-500 font-medium\">All Systems Operational</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\UltraModernHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\UltraModernLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\header\\LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\header\\NotificationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\header\\SearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\header\\SettingsDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\layout\\header\\UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\load-board\\LoadBoardPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\LoadBoard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\LoadBoardFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\LoadBoardTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\LoadDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\PostLoadForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\BookLoadsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\FindLoadsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\MyLoadsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\PostLoadsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\PostTruckTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\loadboard\\tabs\\SearchLoadsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\login\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\login\\LoginHero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\login\\RoleSelector.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":96,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":96,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { UserRole } from '@/types/auth';\r\nimport { Crown, Truck, Users, Package, MapPin, User } from 'lucide-react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\n\r\ninterface RoleSelectorProps {\r\n  selectedRole: UserRole | '';\r\n  onRoleChange: (role: UserRole) => void;\r\n}\r\n\r\nconst roles = [\r\n  {\r\n    value: 'super_admin' as UserRole,\r\n    label: 'Super Admin',\r\n    description: 'Full system access and user management',\r\n    icon: Crown,\r\n    color: 'text-purple-600'\r\n  },\r\n  {\r\n    value: 'carrier_admin' as UserRole,\r\n    label: 'Carrier Admin',\r\n    description: 'Fleet management and driver coordination',\r\n    icon: Truck,\r\n    color: 'text-blue-600'\r\n  },\r\n  {\r\n    value: 'freight_broker_admin' as UserRole,\r\n    label: 'Broker Admin',\r\n    description: 'Connect shippers with carriers',\r\n    icon: Users,\r\n    color: 'text-green-600'\r\n  },\r\n  {\r\n    value: 'shipper_admin' as UserRole,\r\n    label: 'Shipper Admin',\r\n    description: 'Manage shipments and logistics',\r\n    icon: Package,\r\n    color: 'text-orange-600'\r\n  },\r\n  {\r\n    value: 'carrier_driver' as UserRole,\r\n    label: 'Driver',\r\n    description: 'Dispatch and delivery management',\r\n    icon: MapPin,\r\n    color: 'text-red-600'\r\n  },\r\n  {\r\n    value: 'owner_operator' as UserRole,\r\n    label: 'Owner Operator',\r\n    description: 'Independent truck driver operations',\r\n    icon: User,\r\n    color: 'text-indigo-600'\r\n  }\r\n];\r\n\r\nconst RoleSelector: React.FC<RoleSelectorProps> = ({ selectedRole, onRoleChange }) => {\r\n  const selectedRoleData = roles.find(role => role.value === selectedRole);\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <Label htmlFor=\"role\">Select Your Role</Label>\r\n      <Select value={selectedRole} onValueChange={onRoleChange}>\r\n        <SelectTrigger>\r\n          <SelectValue placeholder=\"Choose a role to continue\" />\r\n        </SelectTrigger>\r\n        <SelectContent>\r\n          {roles.map((role) => {\r\n            const IconComponent = role.icon;\r\n            return (\r\n              <SelectItem key={role.value} value={role.value}>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <IconComponent className={`h-4 w-4 ${role.color}`} />\r\n                  <span>{role.label}</span>\r\n                </div>\r\n              </SelectItem>\r\n            );\r\n          })}\r\n        </SelectContent>\r\n      </Select>\r\n      {selectedRoleData && (\r\n        <div className=\"p-3 bg-muted rounded-lg mt-2\">\r\n          <div className=\"flex items-center space-x-2 mb-1\">\r\n            <selectedRoleData.icon className={`h-4 w-4 ${selectedRoleData.color}`} />\r\n            <h4 className=\"text-sm font-medium\">{selectedRoleData.label}</h4>\r\n          </div>\r\n          <p className=\"text-xs text-muted-foreground\">{selectedRoleData.description}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoleSelector;\r\nexport { roles };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\CarriersBrokersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\MarketingFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\MarketingHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\RateCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TMSSoftwareSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotBenefitsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotCTASection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotFeaturesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotHeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotMarketingHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotPricingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketing\\TransBotTestimonialsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\marketplace\\MarketplacePortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\navigation\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\CarriersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\CustomersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\CustomersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\InvoicesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\LocationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\LocationsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\TerminalsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\TerminalsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\VendorsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\networks\\VendorsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\onboarding\\OnboardingPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\owner-operator\\FloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\owner-operator\\OwnerOperatorHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\owner-operator\\OwnerOperatorLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\owner-operator\\OwnerOperatorPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\owner-operator\\OwnerOperatorSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\pages\\BasicPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\AIRecommendationsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\AdvancedQuoteFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\AllQuotesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\BulkRatingInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2545,2548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2545,2548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { \r\n  Upload, \r\n  Download, \r\n  Play, \r\n  CheckCircle, \r\n  AlertCircle, \r\n  Clock,\r\n  FileText,\r\n  Trash2,\r\n  Plus,\r\n  Settings\r\n} from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface BulkJob {\r\n  id: string;\r\n  origin: string;\r\n  destination: string;\r\n  equipment_type: string;\r\n  pickup_date: string;\r\n  weight?: number;\r\n  hazmat?: boolean;\r\n  temperature_controlled?: boolean;\r\n  special_requirements?: string[];\r\n  status?: 'pending' | 'processing' | 'completed' | 'failed';\r\n  rate?: number;\r\n  carrier?: string;\r\n}\r\n\r\ninterface BulkRatingRequest {\r\n  request_id: string;\r\n  accepted: number;\r\n  estimated_completion: string;\r\n  status: 'accepted' | 'rate_limited' | 'unauthorized';\r\n}\r\n\r\nconst BulkRatingInterface: React.FC = () => {\r\n  const [jobs, setJobs] = useState<BulkJob[]>([]);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [currentRequest, setCurrentRequest] = useState<BulkRatingRequest | null>(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [results, setResults] = useState<BulkJob[]>([]);\r\n  const { toast } = useToast();\r\n\r\n  // Equipment type options\r\n  const equipmentTypes = [\r\n    'Dry Van',\r\n    'Reefer',\r\n    'Flatbed',\r\n    'Power Only',\r\n    'Step Deck',\r\n    'Lowboy',\r\n    'Box Truck',\r\n    'Sprinter Van'\r\n  ];\r\n\r\n  // Add a new job\r\n  const addJob = () => {\r\n    const newJob: BulkJob = {\r\n      id: `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      origin: '',\r\n      destination: '',\r\n      equipment_type: 'Dry Van',\r\n      pickup_date: new Date().toISOString().split('T')[0],\r\n      weight: 0,\r\n      hazmat: false,\r\n      temperature_controlled: false,\r\n      special_requirements: [],\r\n      status: 'pending'\r\n    };\r\n    setJobs([...jobs, newJob]);\r\n  };\r\n\r\n  // Remove a job\r\n  const removeJob = (id: string) => {\r\n    setJobs(jobs.filter(job => job.id !== id));\r\n  };\r\n\r\n  // Update job field\r\n  const updateJob = (id: string, field: keyof BulkJob, value: any) => {\r\n    setJobs(jobs.map(job => \r\n      job.id === id ? { ...job, [field]: value } : job\r\n    ));\r\n  };\r\n\r\n  // Handle CSV upload\r\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setIsUploading(true);\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      try {\r\n        const csv = e.target?.result as string;\r\n        const lines = csv.split('\\n');\r\n        const headers = lines[0].split(',').map(h => h.trim());\r\n        \r\n        const newJobs: BulkJob[] = lines.slice(1)\r\n          .filter(line => line.trim())\r\n          .map((line, index) => {\r\n            const values = line.split(',').map(v => v.trim());\r\n            return {\r\n              id: `csv_${Date.now()}_${index}`,\r\n              origin: values[headers.indexOf('origin')] || '',\r\n              destination: values[headers.indexOf('destination')] || '',\r\n              equipment_type: values[headers.indexOf('equipment_type')] || 'Dry Van',\r\n              pickup_date: values[headers.indexOf('pickup_date')] || new Date().toISOString().split('T')[0],\r\n              weight: parseFloat(values[headers.indexOf('weight')]) || 0,\r\n              hazmat: values[headers.indexOf('hazmat')]?.toLowerCase() === 'true',\r\n              temperature_controlled: values[headers.indexOf('temperature_controlled')]?.toLowerCase() === 'true',\r\n              special_requirements: values[headers.indexOf('special_requirements')]?.split(';') || [],\r\n              status: 'pending'\r\n            };\r\n          });\r\n\r\n        setJobs([...jobs, ...newJobs]);\r\n        toast({\r\n          title: \"Upload Successful\",\r\n          description: `Imported ${newJobs.length} jobs from CSV`,\r\n        });\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Upload Failed\",\r\n          description: \"Invalid CSV format. Please check your file.\",\r\n          variant: \"destructive\",\r\n        });\r\n      } finally {\r\n        setIsUploading(false);\r\n      }\r\n    };\r\n\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Export results to CSV\r\n  const exportResults = () => {\r\n    if (results.length === 0) return;\r\n\r\n    const headers = ['origin', 'destination', 'equipment_type', 'pickup_date', 'rate', 'carrier', 'status'];\r\n    const csvContent = [\r\n      headers.join(','),\r\n      ...results.map(job => [\r\n        job.origin,\r\n        job.destination,\r\n        job.equipment_type,\r\n        job.pickup_date,\r\n        job.rate || '',\r\n        job.carrier || '',\r\n        job.status || ''\r\n      ].join(','))\r\n    ].join('\\n');\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `bulk-rating-results-${new Date().toISOString().split('T')[0]}.csv`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Submit bulk rating request\r\n  const submitBulkRating = async () => {\r\n    if (jobs.length === 0) {\r\n      toast({\r\n        title: \"No Jobs\",\r\n        description: \"Please add at least one job to rate\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Validate jobs\r\n    const invalidJobs = jobs.filter(job => !job.origin || !job.destination);\r\n    if (invalidJobs.length > 0) {\r\n      toast({\r\n        title: \"Validation Error\",\r\n        description: `${invalidJobs.length} jobs are missing required fields`,\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n    setProgress(0);\r\n\r\n    try {\r\n      // Simulate API call to bulk rating endpoint\r\n      const response = await fetch('/api/bulk-rating', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\r\n        },\r\n        body: JSON.stringify({\r\n          company_id: localStorage.getItem('company_id'),\r\n          jobs: jobs.map(job => ({\r\n            origin: job.origin,\r\n            destination: job.destination,\r\n            equipment_type: job.equipment_type,\r\n            pickup_date: job.pickup_date,\r\n            weight: job.weight,\r\n            hazmat: job.hazmat,\r\n            temperature_controlled: job.temperature_controlled,\r\n            special_requirements: job.special_requirements\r\n          })),\r\n          priority: 'normal'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result: BulkRatingRequest = await response.json();\r\n      setCurrentRequest(result);\r\n\r\n      // Simulate progress updates\r\n      const progressInterval = setInterval(() => {\r\n        setProgress(prev => {\r\n          if (prev >= 100) {\r\n            clearInterval(progressInterval);\r\n            setIsProcessing(false);\r\n            // Simulate completed results\r\n            setResults(jobs.map(job => ({\r\n              ...job,\r\n              status: 'completed',\r\n              rate: Math.floor(Math.random() * 2000) + 500,\r\n              carrier: ['ABC Trucking', 'XYZ Logistics', 'Fast Freight'][Math.floor(Math.random() * 3)]\r\n            })));\r\n            return 100;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 1000);\r\n\r\n      toast({\r\n        title: \"Bulk Rating Submitted\",\r\n        description: `Processing ${jobs.length} jobs. Estimated completion: ${new Date(result.estimated_completion).toLocaleTimeString()}`,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Bulk rating error:', error);\r\n      toast({\r\n        title: \"Submission Failed\",\r\n        description: \"Failed to submit bulk rating request. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Bulk Rating Interface</h1>\r\n          <p className=\"text-gray-600\">Rate multiple shipments efficiently for enterprise workflows</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge variant=\"outline\">{jobs.length} Jobs</Badge>\r\n          <Badge variant=\"outline\">Enterprise</Badge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Upload Section */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Upload className=\"h-5 w-5\" />\r\n            <span>Import Jobs</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"csv-upload\">Upload CSV File</Label>\r\n              <Input\r\n                id=\"csv-upload\"\r\n                type=\"file\"\r\n                accept=\".csv\"\r\n                onChange={handleFileUpload}\r\n                disabled={isUploading}\r\n              />\r\n              <p className=\"text-sm text-gray-500 mt-1\">\r\n                CSV should include: origin, destination, equipment_type, pickup_date, weight, hazmat, temperature_controlled, special_requirements\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-end\">\r\n              <Button \r\n                onClick={addJob}\r\n                className=\"w-full\"\r\n                disabled={isUploading}\r\n              >\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                Add Job Manually\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Jobs List */}\r\n      {jobs.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span className=\"flex items-center space-x-2\">\r\n                <FileText className=\"h-5 w-5\" />\r\n                <span>Jobs ({jobs.length})</span>\r\n              </span>\r\n              <Button \r\n                onClick={submitBulkRating}\r\n                disabled={isProcessing || jobs.length === 0}\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                <Play className=\"w-4 h-4 mr-2\" />\r\n                Submit for Rating\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {jobs.map((job, index) => (\r\n                <div key={job.id} className=\"border rounded-lg p-4 space-y-4\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <h3 className=\"font-medium\">Job #{index + 1}</h3>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => removeJob(job.id)}\r\n                    >\r\n                      <Trash2 className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                    <div>\r\n                      <Label>Origin</Label>\r\n                      <Input\r\n                        value={job.origin}\r\n                        onChange={(e) => updateJob(job.id, 'origin', e.target.value)}\r\n                        placeholder=\"City, State\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Destination</Label>\r\n                      <Input\r\n                        value={job.destination}\r\n                        onChange={(e) => updateJob(job.id, 'destination', e.target.value)}\r\n                        placeholder=\"City, State\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Equipment Type</Label>\r\n                      <select\r\n                        value={job.equipment_type}\r\n                        onChange={(e) => updateJob(job.id, 'equipment_type', e.target.value)}\r\n                        className=\"w-full p-2 border rounded-md\"\r\n                      >\r\n                        {equipmentTypes.map(type => (\r\n                          <option key={type} value={type}>{type}</option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n                    <div>\r\n                      <Label>Pickup Date</Label>\r\n                      <Input\r\n                        type=\"date\"\r\n                        value={job.pickup_date}\r\n                        onChange={(e) => updateJob(job.id, 'pickup_date', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Weight (lbs)</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        value={job.weight || ''}\r\n                        onChange={(e) => updateJob(job.id, 'weight', parseFloat(e.target.value) || 0)}\r\n                        placeholder=\"0\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id={`hazmat-${job.id}`}\r\n                          checked={job.hazmat || false}\r\n                          onChange={(e) => updateJob(job.id, 'hazmat', e.target.checked)}\r\n                        />\r\n                        <Label htmlFor={`hazmat-${job.id}`}>Hazmat</Label>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          id={`temp-${job.id}`}\r\n                          checked={job.temperature_controlled || false}\r\n                          onChange={(e) => updateJob(job.id, 'temperature_controlled', e.target.checked)}\r\n                        />\r\n                        <Label htmlFor={`temp-${job.id}`}>Temperature Controlled</Label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label>Special Requirements</Label>\r\n                    <Textarea\r\n                      value={job.special_requirements?.join(', ') || ''}\r\n                      onChange={(e) => updateJob(job.id, 'special_requirements', e.target.value.split(',').map(s => s.trim()))}\r\n                      placeholder=\"Liftgate, Inside delivery, Appointment required...\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Processing Status */}\r\n      {isProcessing && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Clock className=\"h-5 w-5\" />\r\n              <span>Processing Bulk Rating</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <Progress value={progress} className=\"w-full\" />\r\n              <div className=\"flex justify-between text-sm text-gray-600\">\r\n                <span>Progress: {progress}%</span>\r\n                <span>Estimated completion: {currentRequest?.estimated_completion ? new Date(currentRequest.estimated_completion).toLocaleTimeString() : 'Calculating...'}</span>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Results */}\r\n      {results.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span className=\"flex items-center space-x-2\">\r\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n                <span>Rating Results ({results.length})</span>\r\n              </span>\r\n              <Button onClick={exportResults} variant=\"outline\">\r\n                <Download className=\"w-4 h-4 mr-2\" />\r\n                Export CSV\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {results.map((job, index) => (\r\n                <div key={job.id} className=\"border rounded-lg p-4\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <div>\r\n                      <h3 className=\"font-medium\">Job #{index + 1}: {job.origin} ‚Üí {job.destination}</h3>\r\n                      <p className=\"text-sm text-gray-600\">{job.equipment_type} ‚Ä¢ {job.pickup_date}</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <div className=\"text-2xl font-bold text-green-600\">\r\n                        ${job.rate?.toLocaleString()}\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-600\">{job.carrier}</div>\r\n                      <Badge className=\"mt-1\" variant={job.status === 'completed' ? 'default' : 'secondary'}>\r\n                        {job.status}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Usage Limits */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            <span>Usage Limits</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">1,000</div>\r\n              <div className=\"text-sm text-gray-600\">Jobs per request</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">10,000</div>\r\n              <div className=\"text-sm text-gray-600\">Requests per hour</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">2s</div>\r\n              <div className=\"text-sm text-gray-600\">Avg. processing time</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BulkRatingInterface;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\EnhancedQuoteComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\MarginAnalysisCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\MarketIntelligenceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\NewQuoteTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\PDFExportButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteNotifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\QuoteTableRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\data\\mockQuotes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\utils\\marginAnalysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\quotes\\utils\\quoteUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\rates\\RateFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\rates\\RateFormDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\rates\\RateQuoteForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3996,3999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3996,3999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8872,8875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8872,8875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Loader2, Calculator, TrendingUp, AlertCircle } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { useRatesFeature } from \"@/hooks/useEntitlement\";\r\n\r\ninterface QuoteRequest {\r\n  origin: {\r\n    city: string;\r\n    state: string;\r\n    zip: string;\r\n  };\r\n  destination: {\r\n    city: string;\r\n    state: string;\r\n    zip: string;\r\n  };\r\n  equipment: 'dry_van' | 'reefer' | 'flatbed' | 'power_only';\r\n  weight: number;\r\n  class: number;\r\n  hazmat: boolean;\r\n  expedited: boolean;\r\n  company_id: string;\r\n}\r\n\r\ninterface QuoteResponse {\r\n  ok: boolean;\r\n  rate?: number;\r\n  confidence?: number;\r\n  breakdown?: {\r\n    base_rate: number;\r\n    fuel_surcharge: number;\r\n    accessorials: number;\r\n    hazmat_fee?: number;\r\n    expedited_fee?: number;\r\n  };\r\n  error?: string;\r\n  message?: string;\r\n}\r\n\r\nconst EQUIPMENT_TYPES = [\r\n  { value: 'dry_van', label: 'Dry Van' },\r\n  { value: 'reefer', label: 'Reefer' },\r\n  { value: 'flatbed', label: 'Flatbed' },\r\n  { value: 'power_only', label: 'Power Only' },\r\n];\r\n\r\nconst FREIGHT_CLASSES = [\r\n  { value: 50, label: '50 - Light' },\r\n  { value: 55, label: '55' },\r\n  { value: 60, label: '60' },\r\n  { value: 65, label: '65' },\r\n  { value: 70, label: '70' },\r\n  { value: 77.5, label: '77.5' },\r\n  { value: 85, label: '85' },\r\n  { value: 92.5, label: '92.5' },\r\n  { value: 100, label: '100' },\r\n  { value: 110, label: '110' },\r\n  { value: 125, label: '125' },\r\n  { value: 150, label: '150' },\r\n  { value: 175, label: '175' },\r\n  { value: 200, label: '200' },\r\n  { value: 250, label: '250' },\r\n  { value: 300, label: '300' },\r\n  { value: 400, label: '400' },\r\n  { value: 500, label: '500 - Heavy' },\r\n];\r\n\r\nexport function RateQuoteForm() {\r\n  const { toast } = useToast();\r\n  const hasRatesFeature = useRatesFeature();\r\n  \r\n  const [formData, setFormData] = useState<QuoteRequest>({\r\n    origin: { city: '', state: '', zip: '' },\r\n    destination: { city: '', state: '', zip: '' },\r\n    equipment: 'dry_van',\r\n    weight: 0,\r\n    class: 70,\r\n    hazmat: false,\r\n    expedited: false,\r\n    company_id: '00000000-0000-0000-0000-000000000001', // Default company ID\r\n  });\r\n\r\n  const quoteMutation = useMutation({\r\n    mutationFn: async (data: QuoteRequest): Promise<QuoteResponse> => {\r\n      const response = await fetch('/api/v1/rate/quote', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to get quote');\r\n      }\r\n\r\n      return response.json();\r\n    },\r\n    onSuccess: (data) => {\r\n      toast({\r\n        title: \"Quote Generated\",\r\n        description: `Rate: $${data.rate?.toFixed(2)} (${(data.confidence! * 100).toFixed(0)}% confidence)`,\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast({\r\n        title: \"Quote Error\",\r\n        description: error.message,\r\n        variant: \"destructive\",\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!hasRatesFeature) {\r\n      toast({\r\n        title: \"Feature Not Available\",\r\n        description: \"Rate quotes are not available in your current plan.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    quoteMutation.mutate(formData);\r\n  };\r\n\r\n  const updateField = (field: string, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const updateLocation = (type: 'origin' | 'destination', field: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        [field]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  if (!hasRatesFeature) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calculator className=\"h-5 w-5\" />\r\n            Rate Quote\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Get instant freight rates for your shipments\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center gap-2 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n            <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\r\n            <div>\r\n              <p className=\"font-medium text-yellow-800\">Feature Not Available</p>\r\n              <p className=\"text-sm text-yellow-700\">\r\n                Rate quotes are not available in your current plan. Upgrade to access this feature.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Calculator className=\"h-5 w-5\" />\r\n          Rate Quote\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Get instant freight rates for your shipments\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {/* Origin */}\r\n          <div className=\"space-y-4\">\r\n            <Label className=\"text-base font-medium\">Origin</Label>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"origin-city\">City</Label>\r\n                <Input\r\n                  id=\"origin-city\"\r\n                  value={formData.origin.city}\r\n                  onChange={(e) => updateLocation('origin', 'city', e.target.value)}\r\n                  placeholder=\"City\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"origin-state\">State</Label>\r\n                <Input\r\n                  id=\"origin-state\"\r\n                  value={formData.origin.state}\r\n                  onChange={(e) => updateLocation('origin', 'state', e.target.value.toUpperCase())}\r\n                  placeholder=\"CA\"\r\n                  maxLength={2}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"origin-zip\">ZIP Code</Label>\r\n                <Input\r\n                  id=\"origin-zip\"\r\n                  value={formData.origin.zip}\r\n                  onChange={(e) => updateLocation('origin', 'zip', e.target.value)}\r\n                  placeholder=\"90210\"\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Destination */}\r\n          <div className=\"space-y-4\">\r\n            <Label className=\"text-base font-medium\">Destination</Label>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"dest-city\">City</Label>\r\n                <Input\r\n                  id=\"dest-city\"\r\n                  value={formData.destination.city}\r\n                  onChange={(e) => updateLocation('destination', 'city', e.target.value)}\r\n                  placeholder=\"City\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"dest-state\">State</Label>\r\n                <Input\r\n                  id=\"dest-state\"\r\n                  value={formData.destination.state}\r\n                  onChange={(e) => updateLocation('destination', 'state', e.target.value.toUpperCase())}\r\n                  placeholder=\"NY\"\r\n                  maxLength={2}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"dest-zip\">ZIP Code</Label>\r\n                <Input\r\n                  id=\"dest-zip\"\r\n                  value={formData.destination.zip}\r\n                  onChange={(e) => updateLocation('destination', 'zip', e.target.value)}\r\n                  placeholder=\"10001\"\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Equipment and Weight */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"equipment\">Equipment Type</Label>\r\n              <Select\r\n                value={formData.equipment}\r\n                onValueChange={(value: any) => updateField('equipment', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {EQUIPMENT_TYPES.map((type) => (\r\n                    <SelectItem key={type.value} value={type.value}>\r\n                      {type.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"weight\">Weight (lbs)</Label>\r\n              <Input\r\n                id=\"weight\"\r\n                type=\"number\"\r\n                value={formData.weight}\r\n                onChange={(e) => updateField('weight', parseInt(e.target.value) || 0)}\r\n                placeholder=\"5000\"\r\n                min=\"1\"\r\n                max=\"80000\"\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Freight Class */}\r\n          <div>\r\n            <Label htmlFor=\"freight-class\">Freight Class</Label>\r\n            <Select\r\n              value={formData.class.toString()}\r\n              onValueChange={(value) => updateField('class', parseFloat(value))}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {FREIGHT_CLASSES.map((fc) => (\r\n                  <SelectItem key={fc.value} value={fc.value.toString()}>\r\n                    {fc.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Additional Options */}\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"hazmat\"\r\n                checked={formData.hazmat}\r\n                onCheckedChange={(checked) => updateField('hazmat', checked)}\r\n              />\r\n              <Label htmlFor=\"hazmat\">Hazmat</Label>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"expedited\"\r\n                checked={formData.expedited}\r\n                onCheckedChange={(checked) => updateField('expedited', checked)}\r\n              />\r\n              <Label htmlFor=\"expedited\">Expedited</Label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full\"\r\n            disabled={quoteMutation.isPending}\r\n          >\r\n            {quoteMutation.isPending ? (\r\n              <>\r\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                Getting Quote...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Calculator className=\"mr-2 h-4 w-4\" />\r\n                Get Quote\r\n              </>\r\n            )}\r\n          </Button>\r\n        </form>\r\n\r\n        {/* Quote Result */}\r\n        {quoteMutation.data && quoteMutation.data.ok && (\r\n          <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n            <div className=\"flex items-center justify-between mb-3\">\r\n              <h3 className=\"font-semibold text-green-800\">Quote Result</h3>\r\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                {(quoteMutation.data.confidence! * 100).toFixed(0)}% Confidence\r\n              </Badge>\r\n            </div>\r\n            \r\n            <div className=\"text-3xl font-bold text-green-900 mb-3\">\r\n              ${quoteMutation.data.rate?.toFixed(2)}\r\n            </div>\r\n\r\n            {quoteMutation.data.breakdown && (\r\n              <div className=\"space-y-1 text-sm\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Base Rate:</span>\r\n                  <span>${quoteMutation.data.breakdown.base_rate.toFixed(2)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Fuel Surcharge:</span>\r\n                  <span>${quoteMutation.data.breakdown.fuel_surcharge.toFixed(2)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Accessorials:</span>\r\n                  <span>${quoteMutation.data.breakdown.accessorials.toFixed(2)}</span>\r\n                </div>\r\n                {quoteMutation.data.breakdown.hazmat_fee && (\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Hazmat Fee:</span>\r\n                    <span>${quoteMutation.data.breakdown.hazmat_fee.toFixed(2)}</span>\r\n                  </div>\r\n                )}\r\n                {quoteMutation.data.breakdown.expedited_fee && (\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Expedited Fee:</span>\r\n                    <span>${quoteMutation.data.breakdown.expedited_fee.toFixed(2)}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\rates\\RatesPortal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1210,1213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1210,1213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport RateFormDialog from './RateFormDialog';\r\nimport RateFilters from './RateFilters';\r\nimport { DateRange } from 'react-day-picker';\r\n\r\nexport default function RatesPortal() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedMode, setSelectedMode] = useState('all');\r\n  const [selectedEquipment, setSelectedEquipment] = useState('all');\r\n  const [dateRange, setDateRange] = useState<DateRange | undefined>();\r\n  const [isRateDialogOpen, setIsRateDialogOpen] = useState(false);\r\n  const [rateDialogMode, setRateDialogMode] = useState<'add' | 'edit'>('add');\r\n  const [rateDialogType, setRateDialogType] = useState<'buy' | 'sell'>('buy');\r\n\r\n  const activeFiltersCount = [\r\n    searchTerm,\r\n    selectedMode !== 'all',\r\n    selectedEquipment !== 'all',\r\n    dateRange\r\n  ].filter(Boolean).length;\r\n\r\n  const handleClearFilters = () => {\r\n    setSearchTerm('');\r\n    setSelectedMode('all');\r\n    setSelectedEquipment('all');\r\n    setDateRange(undefined);\r\n  };\r\n\r\n  const handleSaveRate = (data: any) => {\r\n    console.log('Saving rate:', data);\r\n    setIsRateDialogOpen(false);\r\n  };\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Rates Portal</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Manage freight rates, quotes, and pricing strategies\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Rate Management</CardTitle>\r\n            <CardDescription>\r\n              View and manage your freight rates and pricing\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <RateFilters \r\n              searchTerm={searchTerm}\r\n              onSearchChange={setSearchTerm}\r\n              selectedMode={selectedMode}\r\n              onModeChange={setSelectedMode}\r\n              selectedEquipment={selectedEquipment}\r\n              onEquipmentChange={setSelectedEquipment}\r\n              dateRange={dateRange}\r\n              onDateRangeChange={setDateRange}\r\n              onClearFilters={handleClearFilters}\r\n              activeFiltersCount={activeFiltersCount}\r\n            />\r\n            <div className=\"mt-4\">\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Rate management features coming soon...\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Quick Actions</CardTitle>\r\n            <CardDescription>\r\n              Common rate-related tasks\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex gap-4\">\r\n              <RateFormDialog \r\n                open={isRateDialogOpen}\r\n                onOpenChange={setIsRateDialogOpen}\r\n                mode={rateDialogMode}\r\n                type={rateDialogType}\r\n                onSave={handleSaveRate}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\CompanySettingsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\GeneralSettingsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\PayrollSettingsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\TemplatesDocumentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\UserBulkActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\UserCreateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\UserEditDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\UserManagementTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\CreateTemplateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\DocumentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\DocumentsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\OverviewStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\TemplatesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\TemplatesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\UploadDocumentDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\templates\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-forms\\UserFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-forms\\UserFormSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-management\\UserSearchAndFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-management\\UserStatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-table\\UserTableHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\settings\\user-table\\UserTableRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shared\\EnhancedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shared\\EnhancedContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shared\\FloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ActiveShipments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\AirFreight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\AllShipmentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\AssignedShipmentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\AutoTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\DeliveredShipmentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\DrayageTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\GroundTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\InTransitShipmentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\IntermodalTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\LTLTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\NewShipmentTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\OceanFreight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\PendingShipmentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\RailFreight.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentDocuments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchShipments'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchShipments]","fix":{"range":[2105,2107],"text":"[fetchShipments]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { Plus, Search, MoreHorizontal, Edit, Eye, Truck, MapPin, Calendar } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { ShipmentForm } from './ShipmentForm';\r\nimport ShipmentTrackingDialog from './ShipmentTrackingDialog';\r\nimport type { Shipment } from '@/types/tms';\r\nimport { format } from 'date-fns';\r\n\r\nconst statusColors = {\r\n  pending: 'bg-yellow-100 text-yellow-800 border-yellow-300',\r\n  assigned: 'bg-blue-100 text-blue-800 border-blue-300',\r\n  picked_up: 'bg-orange-100 text-orange-800 border-orange-300',\r\n  in_transit: 'bg-purple-100 text-purple-800 border-purple-300',\r\n  delivered: 'bg-green-100 text-green-800 border-green-300',\r\n  cancelled: 'bg-red-100 text-red-800 border-red-300',\r\n};\r\n\r\nconst priorityColors = {\r\n  low: 'bg-gray-100 text-gray-800',\r\n  normal: 'bg-blue-100 text-blue-800',\r\n  high: 'bg-orange-100 text-orange-800',\r\n  urgent: 'bg-red-100 text-red-800',\r\n};\r\n\r\nexport const ShipmentList: React.FC = () => {\r\n  const [shipments, setShipments] = useState<Shipment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedShipment, setSelectedShipment] = useState<Shipment | null>(null);\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [isTrackingOpen, setIsTrackingOpen] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchShipments();\r\n  }, []);\r\n\r\n  const fetchShipments = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('shipments')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setShipments(data as Shipment[] || []);\r\n    } catch (error) {\r\n      console.error('Error fetching shipments:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to fetch shipments',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteShipment = async (shipmentId: string) => {\r\n    if (!confirm('Are you sure you want to delete this shipment?')) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('shipments')\r\n        .delete()\r\n        .eq('id', shipmentId);\r\n\r\n      if (error) throw error;\r\n\r\n      setShipments(shipments.filter(s => s.id !== shipmentId));\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Shipment deleted successfully',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting shipment:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to delete shipment',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const filteredShipments = shipments.filter(shipment =>\r\n    shipment.shipment_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    shipment.origin.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    shipment.destination.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    (shipment.customer_reference && shipment.customer_reference.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  const handleFormSuccess = () => {\r\n    fetchShipments();\r\n    setIsFormOpen(false);\r\n    setSelectedShipment(null);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center h-32\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Truck className=\"h-5 w-5\" />\r\n              Shipments ({filteredShipments.length})\r\n            </CardTitle>\r\n            <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\r\n              <DialogTrigger asChild>\r\n                <Button onClick={() => {\r\n                  setSelectedShipment(null);\r\n                  setIsFormOpen(true);\r\n                }}>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  New Shipment\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\r\n                <DialogHeader>\r\n                  <DialogTitle>\r\n                    {selectedShipment ? 'Edit Shipment' : 'Create New Shipment'}\r\n                  </DialogTitle>\r\n                </DialogHeader>\r\n                <ShipmentForm\r\n                  shipment={selectedShipment || undefined}\r\n                  onSuccess={handleFormSuccess}\r\n                  onCancel={() => {\r\n                    setIsFormOpen(false);\r\n                    setSelectedShipment(null);\r\n                  }}\r\n                />\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Search */}\r\n          <div className=\"mb-6\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Search shipments by number, origin, destination, or customer reference...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Shipments Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Shipment #</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Priority</TableHead>\r\n                  <TableHead>Route</TableHead>\r\n                  <TableHead>Equipment</TableHead>\r\n                  <TableHead>Dates</TableHead>\r\n                  <TableHead>Rate</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredShipments.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\r\n                      {searchTerm ? 'No shipments found matching your search.' : 'No shipments found. Create your first shipment to get started.'}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  filteredShipments.map((shipment) => (\r\n                    <TableRow key={shipment.id}>\r\n                      <TableCell className=\"font-medium\">\r\n                        <div>\r\n                          <div className=\"font-semibold\">{shipment.shipment_number}</div>\r\n                          {shipment.customer_reference && (\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              Ref: {shipment.customer_reference}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge \r\n                          variant=\"outline\"\r\n                          className={statusColors[shipment.status as keyof typeof statusColors]}\r\n                        >\r\n                          {shipment.status.replace('_', ' ').toUpperCase()}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge \r\n                          variant=\"secondary\"\r\n                          className={priorityColors[shipment.priority]}\r\n                        >\r\n                          {shipment.priority.toUpperCase()}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-1 text-sm\">\r\n                          <MapPin className=\"h-3 w-3 text-muted-foreground\" />\r\n                          <span className=\"max-w-[100px] truncate\">{shipment.origin}</span>\r\n                          <span>‚Üí</span>\r\n                          <span className=\"max-w-[100px] truncate\">{shipment.destination}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm capitalize\">\r\n                          {shipment.equipment_type?.replace('_', ' ') || 'N/A'}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"text-sm space-y-1\">\r\n                          {shipment.pickup_date && (\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Calendar className=\"h-3 w-3 text-green-600\" />\r\n                              <span>Pick: {format(new Date(shipment.pickup_date), 'MMM dd')}</span>\r\n                            </div>\r\n                          )}\r\n                          {shipment.delivery_date && (\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Calendar className=\"h-3 w-3 text-blue-600\" />\r\n                              <span>Del: {format(new Date(shipment.delivery_date), 'MMM dd')}</span>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {shipment.rate ? (\r\n                          <span className=\"font-medium\">${shipment.rate.toLocaleString()}</span>\r\n                        ) : (\r\n                          <span className=\"text-muted-foreground\">‚Äî</span>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger asChild>\r\n                            <Button variant=\"ghost\" size=\"sm\">\r\n                              <MoreHorizontal className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent align=\"end\">\r\n                            <DropdownMenuItem\r\n                              onClick={() => {\r\n                                setSelectedShipment(shipment);\r\n                                setIsTrackingOpen(true);\r\n                              }}\r\n                            >\r\n                              <Eye className=\"h-4 w-4 mr-2\" />\r\n                              View & Track\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem\r\n                              onClick={() => {\r\n                                setSelectedShipment(shipment);\r\n                                setIsFormOpen(true);\r\n                              }}\r\n                            >\r\n                              <Edit className=\"h-4 w-4 mr-2\" />\r\n                              Edit\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem\r\n                              onClick={() => handleDeleteShipment(shipment.id)}\r\n                              className=\"text-destructive\"\r\n                            >\r\n                              <Truck className=\"h-4 w-4 mr-2\" />\r\n                              Delete\r\n                            </DropdownMenuItem>\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Shipment Tracking Dialog */}\r\n      <Dialog open={isTrackingOpen} onOpenChange={setIsTrackingOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>\r\n              Shipment Tracking - {selectedShipment?.shipment_number}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n          {selectedShipment && (\r\n            <ShipmentTrackingDialog\r\n              shipment={selectedShipment}\r\n              onClose={() => {\r\n                setIsTrackingOpen(false);\r\n                setSelectedShipment(null);\r\n              }}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentPlanning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentTrackingDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\ShipmentsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipments\\TruckloadTransport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipper\\ShipperFloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipper\\ShipperHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipper\\ShipperLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipper\\ShipperPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\shipper\\ShipperSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\sidebar\\AIRecommendationsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\sidebar\\SidebarFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\sidebar\\SidebarHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\sidebar\\SidebarMenuGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\sidebar\\SidebarMenuItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\Empty.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\EmptyCreate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\Error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\ErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\states\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\AutonomousAgentsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\DevelopmentMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\EnhancedPortalOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\EnhancedStatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\EnhancedSuperAdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\GitHubIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\IntegrationStatusPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\N8NIntegrationPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'testWebhook'. Either include it or remove the dependency array.","line":189,"column":6,"nodeType":"ArrayExpression","endLine":189,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [testWebhook]","fix":{"range":[5605,5607],"text":"[testWebhook]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Zap, \r\n  CheckCircle, \r\n  AlertTriangle, \r\n  Loader2, \r\n  RefreshCw,\r\n  ExternalLink,\r\n  Settings,\r\n  Activity,\r\n  Bot,\r\n  Database,\r\n  Globe,\r\n  Clock\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface N8NTestResult {\r\n  success: boolean;\r\n  message?: string;\r\n  response_time?: number;\r\n  status_code?: number;\r\n  data?: unknown;\r\n  error?: string;\r\n}\r\n\r\ninterface N8NStatus {\r\n  webhook_connected: boolean;\r\n  last_test: string;\r\n  response_time: number;\r\n  total_tests: number;\r\n  successful_tests: number;\r\n  error_rate: number;\r\n}\r\n\r\nconst N8NIntegrationPanel = () => {\r\n  const [isTesting, setIsTesting] = useState(false);\r\n  const [testResults, setTestResults] = useState<N8NTestResult[]>([]);\r\n  const [status, setStatus] = useState<N8NStatus>({\r\n    webhook_connected: false,\r\n    last_test: '',\r\n    response_time: 0,\r\n    total_tests: 0,\r\n    successful_tests: 0,\r\n    error_rate: 0\r\n  });\r\n  const [webhookUrl, setWebhookUrl] = useState('https://pixx100.app.n8n.cloud/webhook-test/');\r\n  const { toast } = useToast();\r\n\r\n  const testWebhook = async (testType: 'basic' | 'autonomous' | 'health' = 'basic') => {\r\n    setIsTesting(true);\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      let payload: unknown = {\r\n        timestamp: new Date().toISOString(),\r\n        source: 'super_admin_dashboard',\r\n        test_type: testType\r\n      };\r\n\r\n      // Different payloads for different test types\r\n      switch (testType) {\r\n        case 'autonomous':\r\n          payload = {\r\n            ...payload,\r\n            task_type: 'autonomous_task',\r\n            agent_type: 'test_agent',\r\n            task_name: 'N8N Integration Test',\r\n            description: 'Testing autonomous task creation via N8N webhook',\r\n            priority: 5,\r\n            workflow_id: 'test_workflow_001',\r\n            execution_id: `exec_${Date.now()}`\r\n          };\r\n          break;\r\n        case 'health':\r\n          payload = {\r\n            ...payload,\r\n            task_type: 'system_health_check',\r\n            check_type: 'n8n_connectivity',\r\n            components: ['webhook', 'database', 'autonomous_agents']\r\n          };\r\n          break;\r\n        default:\r\n          payload = {\r\n            ...payload,\r\n            message: 'Basic N8N webhook connectivity test',\r\n            action: 'ping',\r\n            data: { test: true, timestamp: Date.now() }\r\n          };\r\n      }\r\n\r\n      console.log(`Testing N8N webhook (${testType}):`, webhookUrl);\r\n      console.log('Payload:', payload);\r\n\r\n      const response = await fetch(webhookUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'User-Agent': 'TransBot-AI-SuperAdmin/1.0'\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      const responseData = await response.json();\r\n\r\n      const result: N8NTestResult = {\r\n        success: response.ok,\r\n        message: response.ok ? 'Webhook test successful' : 'Webhook test failed',\r\n        response_time: responseTime,\r\n        status_code: response.status,\r\n        data: responseData\r\n      };\r\n\r\n      if (!response.ok) {\r\n        result.error = `HTTP ${response.status}: ${response.statusText}`;\r\n      }\r\n\r\n      setTestResults(prev => [result, ...prev.slice(0, 4)]); // Keep last 5 results\r\n\r\n      // Update status\r\n      setStatus(prev => {\r\n        const total = prev.total_tests + 1;\r\n        const successful = prev.successful_tests + (result.success ? 1 : 0);\r\n        return {\r\n          webhook_connected: result.success,\r\n          last_test: new Date().toLocaleTimeString(),\r\n          response_time: result.response_time || 0,\r\n          total_tests: total,\r\n          successful_tests: successful,\r\n          error_rate: ((total - successful) / total) * 100\r\n        };\r\n      });\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: \"‚úÖ N8N Webhook Test Successful\",\r\n          description: `${testType} test completed in ${responseTime}ms`,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"‚ùå N8N Webhook Test Failed\",\r\n          description: result.error || \"Connection failed\",\r\n          variant: \"destructive\"\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      const result: N8NTestResult = {\r\n        success: false,\r\n        message: 'Webhook test failed',\r\n        response_time: responseTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n\r\n      setTestResults(prev => [result, ...prev.slice(0, 4)]);\r\n\r\n      toast({\r\n        title: \"‚ùå N8N Connection Error\",\r\n        description: \"Could not connect to N8N webhook\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsTesting(false);\r\n    }\r\n  };\r\n\r\n  const runAllTests = async () => {\r\n    setIsTesting(true);\r\n    \r\n    // Run tests in sequence\r\n    await testWebhook('basic');\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    await testWebhook('health');\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    await testWebhook('autonomous');\r\n    \r\n    setIsTesting(false);\r\n  };\r\n\r\n  // Auto-test on component mount\r\n  useEffect(() => {\r\n    testWebhook('basic');\r\n  }, []);\r\n\r\n  const getStatusBadge = () => {\r\n    if (isTesting) {\r\n      return <Badge variant=\"secondary\"><Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />Testing</Badge>;\r\n    }\r\n    \r\n    // Check if we have unknown successful tests\r\n    if (status.total_tests > 0 && status.successful_tests > 0) {\r\n      return <Badge variant=\"default\"><CheckCircle className=\"h-3 w-3 mr-1\" />Connected</Badge>;\r\n    } else if (status.total_tests > 0) {\r\n      return <Badge variant=\"destructive\"><AlertTriangle className=\"h-3 w-3 mr-1\" />Needs Activation</Badge>;\r\n    } else {\r\n      return <Badge variant=\"outline\">Ready to Test</Badge>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 rounded-lg bg-gradient-to-br from-orange-500 to-red-600\">\r\n            <Zap className=\"h-6 w-6 text-white\" />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold\">N8N Integration</h2>\r\n            <p className=\"text-sm text-muted-foreground\">Workflow automation and webhook testing</p>\r\n          </div>\r\n        </div>\r\n        {getStatusBadge()}\r\n      </div>\r\n\r\n      {/* Webhook Configuration */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            Webhook Configuration\r\n          </CardTitle>\r\n          <CardDescription>N8N webhook endpoint configuration</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"space-y-2\">\r\n            <label className=\"text-sm font-medium\">Webhook URL</label>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"text\"\r\n                value={webhookUrl}\r\n                onChange={(e) => setWebhookUrl(e.target.value)}\r\n                className=\"flex-1 px-3 py-2 border rounded-md text-sm\"\r\n                placeholder=\"Enter N8N webhook URL\"\r\n              />\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => window.open(webhookUrl, '_blank')}\r\n              >\r\n                <ExternalLink className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n                     <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n             <div className=\"text-center\">\r\n               <div className=\"text-2xl font-bold text-blue-600\">{status.total_tests}</div>\r\n               <div className=\"text-sm text-muted-foreground\">Total Tests</div>\r\n             </div>\r\n             <div className=\"text-center\">\r\n               <div className=\"text-2xl font-bold text-green-600\">{status.successful_tests}</div>\r\n               <div className=\"text-sm text-muted-foreground\">Successful</div>\r\n             </div>\r\n             <div className=\"text-center\">\r\n               <div className=\"text-2xl font-bold text-orange-600\">{status.response_time}ms</div>\r\n               <div className=\"text-sm text-muted-foreground\">Avg Response</div>\r\n             </div>\r\n             <div className=\"text-center\">\r\n               <div className=\"text-2xl font-bold text-red-600\">{status.error_rate.toFixed(1)}%</div>\r\n               <div className=\"text-sm text-muted-foreground\">Error Rate</div>\r\n             </div>\r\n           </div>\r\n\r\n           {/* Status Message */}\r\n           {status.total_tests > 0 && status.successful_tests === 0 && (\r\n             <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\r\n               <div className=\"flex items-start gap-3\">\r\n                 <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\r\n                 <div>\r\n                   <h4 className=\"text-sm font-medium text-yellow-800\">N8N Webhook Needs Activation</h4>\r\n                   <p className=\"text-sm text-yellow-700 mt-1\">\r\n                     Your webhook is in test mode. To activate it:\r\n                   </p>\r\n                   <ol className=\"text-sm text-yellow-700 mt-2 ml-4 list-decimal space-y-1\">\r\n                     <li>Open your N8N instance at <a href=\"https://pixx100.app.n8n.cloud/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">https://pixx100.app.n8n.cloud/</a></li>\r\n                     <li>Find the workflow named \"cursor-webhook\"</li>\r\n                     <li>Click \"Execute workflow\" to activate the webhook</li>\r\n                     <li>Test again using the buttons below</li>\r\n                   </ol>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n           )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Test Controls */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            Test Controls\r\n          </CardTitle>\r\n          <CardDescription>Run different types of N8N webhook tests</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n            <Button\r\n              onClick={() => testWebhook('basic')}\r\n              disabled={isTesting}\r\n              variant=\"outline\"\r\n              className=\"h-20 flex flex-col gap-2\"\r\n            >\r\n              <Globe className=\"h-5 w-5\" />\r\n              <span className=\"text-sm\">Basic Connectivity</span>\r\n            </Button>\r\n            \r\n            <Button\r\n              onClick={() => testWebhook('health')}\r\n              disabled={isTesting}\r\n              variant=\"outline\"\r\n              className=\"h-20 flex flex-col gap-2\"\r\n            >\r\n              <Database className=\"h-5 w-5\" />\r\n              <span className=\"text-sm\">Health Check</span>\r\n            </Button>\r\n            \r\n            <Button\r\n              onClick={() => testWebhook('autonomous')}\r\n              disabled={isTesting}\r\n              variant=\"outline\"\r\n              className=\"h-20 flex flex-col gap-2\"\r\n            >\r\n              <Bot className=\"h-5 w-5\" />\r\n              <span className=\"text-sm\">Autonomous Task</span>\r\n            </Button>\r\n          </div>\r\n\r\n          <Button\r\n            onClick={runAllTests}\r\n            disabled={isTesting}\r\n            className=\"w-full\"\r\n            size=\"lg\"\r\n          >\r\n            {isTesting ? (\r\n              <>\r\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                Running All Tests...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                Run All Tests\r\n              </>\r\n            )}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Test Results */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Clock className=\"h-5 w-5\" />\r\n            Recent Test Results\r\n          </CardTitle>\r\n          <CardDescription>Latest webhook test outcomes</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {testResults.length === 0 ? (\r\n              <div className=\"text-center py-8 text-muted-foreground\">\r\n                No tests run yet\r\n              </div>\r\n            ) : (\r\n              testResults.map((result, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`p-3 rounded-lg border ${\r\n                    result.success \r\n                      ? 'bg-green-50 border-green-200' \r\n                      : 'bg-red-50 border-red-200'\r\n                  }`}\r\n                >\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {result.success ? (\r\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                      ) : (\r\n                        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\r\n                      )}\r\n                      <span className=\"text-sm font-medium\">\r\n                        {result.success ? 'Success' : 'Failed'}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {result.response_time}ms\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-muted-foreground mb-2\">\r\n                    {result.message}\r\n                  </div>\r\n                  \r\n                  {result.error && (\r\n                    <div className=\"text-xs text-red-600 bg-red-100 p-2 rounded\">\r\n                      Error: {result.error}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {result.data && (\r\n                    <details className=\"mt-2\">\r\n                      <summary className=\"text-xs text-muted-foreground cursor-pointer\">\r\n                        Response Data\r\n                      </summary>\r\n                      <pre className=\"text-xs bg-gray-100 p-2 rounded mt-1 overflow-auto max-h-20\">\r\n                        {JSON.stringify(result.data, null, 2)}\r\n                      </pre>\r\n                    </details>\r\n                  )}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Status Summary */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Integration Status</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm\">Webhook Connectivity</span>\r\n              <Badge variant={status.webhook_connected ? \"default\" : \"destructive\"}>\r\n                {status.webhook_connected ? \"Connected\" : \"Disconnected\"}\r\n              </Badge>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm\">Last Test</span>\r\n              <span className=\"text-sm text-muted-foreground\">\r\n                {status.last_test || \"Never\"}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm\">Success Rate</span>\r\n              <span className=\"text-sm font-medium\">\r\n                {status.total_tests > 0 \r\n                  ? `${((status.successful_tests / status.total_tests) * 100).toFixed(1)}%`\r\n                  : \"N/A\"\r\n                }\r\n              </span>\r\n            </div>\r\n            \r\n            <Progress \r\n              value={status.total_tests > 0 ? (status.successful_tests / status.total_tests) * 100 : 0} \r\n              className=\"h-2\" \r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default N8NIntegrationPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\ResponsiveCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\ResponsiveGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminMegaMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminRunStateDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SuperAdminSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\super-admin\\SystemHealthPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AgentActivationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AgentActivationTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AgentFleetManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AgentGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AgentStatusChecker.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthCheck'. Either include it or remove the dependency array.","line":167,"column":6,"nodeType":"ArrayExpression","endLine":167,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runHealthCheck]","fix":{"range":[5405,5407],"text":"[runHealthCheck]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  CheckCircle, \r\n  AlertTriangle, \r\n  Clock, \r\n  RefreshCw,\r\n  Search,\r\n  Code,\r\n  Database,\r\n  TestTube,\r\n  Rocket,\r\n  Brain\r\n} from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface AgentStatus {\r\n  type: string;\r\n  name: string;\r\n  status: 'healthy' | 'warning' | 'error' | 'checking';\r\n  lastCheck: string;\r\n  responseTime: number;\r\n  message: string;\r\n  icon: React.ComponentType<unknown>;\r\n}\r\n\r\nexport const AgentStatusChecker: React.FC = () => {\r\n  const [agents, setAgents] = useState<AgentStatus[]>([]);\r\n  const [isChecking, setIsChecking] = useState(false);\r\n  const [overallHealth, setOverallHealth] = useState(0);\r\n  const { toast } = useToast();\r\n\r\n  const agentTypes = [\r\n    { type: 'researcher', name: 'Research Agent', icon: Search },\r\n    { type: 'frontend', name: 'Frontend Agent', icon: Code },\r\n    { type: 'backend', name: 'Backend Agent', icon: Database },\r\n    { type: 'database', name: 'Database Agent', icon: Database },\r\n    { type: 'testing', name: 'Testing Agent', icon: TestTube },\r\n    { type: 'deployment', name: 'Deployment Agent', icon: Rocket }\r\n  ];\r\n\r\n  const checkAgentHealth = async (agent: typeof agentTypes[0]): Promise<AgentStatus> => {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Test autonomous AI function call for each agent type\r\n      const { data, error } = await supabase.functions.invoke('autonomous-ai', {\r\n        body: {\r\n          action: 'agent_test',\r\n          data: {\r\n            agent_id: `test-${agent.type}-${Date.now()}`,\r\n            agent_type: agent.type,\r\n            test_prompt: `Perform a health check for ${agent.name}`,\r\n            test_mode: true\r\n          }\r\n        }\r\n      });\r\n\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      if (error) throw error;\r\n\r\n      return {\r\n        type: agent.type,\r\n        name: agent.name,\r\n        status: 'healthy',\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime,\r\n        message: `‚úÖ Agent responding normally (${responseTime}ms)`,\r\n        icon: agent.icon\r\n      };\r\n\r\n    } catch (error: unknown) {\r\n      return {\r\n        type: agent.type,\r\n        name: agent.name,\r\n        status: 'error',\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: Date.now() - startTime,\r\n        message: `‚ùå Error: ${error.message}`,\r\n        icon: agent.icon\r\n      };\r\n    }\r\n  };\r\n\r\n  const runHealthCheck = async () => {\r\n    setIsChecking(true);\r\n    \r\n    // Initialize agents with checking status\r\n    const initialAgents = agentTypes.map(agent => ({\r\n      type: agent.type,\r\n      name: agent.name,\r\n      status: 'checking' as const,\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: 0,\r\n      message: 'Checking agent status...',\r\n      icon: agent.icon\r\n    }));\r\n    \r\n    setAgents(initialAgents);\r\n\r\n    try {\r\n      // Check all agents concurrently but with a small delay to avoid overwhelming\r\n      const results = [];\r\n      for (const agent of agentTypes) {\r\n        const result = await checkAgentHealth(agent);\r\n        results.push(result);\r\n        \r\n        // Update UI immediately as each agent is checked\r\n        setAgents(prev => prev.map(a => \r\n          a.type === result.type ? result : a\r\n        ));\r\n        \r\n        // Small delay between checks\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n\r\n      const healthyCount = results.filter(r => r.status === 'healthy').length;\r\n      const healthPercentage = (healthyCount / results.length) * 100;\r\n      setOverallHealth(healthPercentage);\r\n\r\n      toast({\r\n        title: \"Agent Health Check Complete\",\r\n        description: `${healthyCount}/${results.length} agents are healthy (${Math.round(healthPercentage)}%)`,\r\n        variant: healthPercentage === 100 ? \"default\" : \"destructive\"\r\n      });\r\n\r\n    } catch (error: unknown) {\r\n      toast({\r\n        title: \"Health Check Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsChecking(false);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'warning': return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n      case 'error': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\r\n      case 'checking': return <RefreshCw className=\"h-4 w-4 text-blue-600 animate-spin\" />;\r\n      default: return <Clock className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy': return 'bg-green-100 text-green-800';\r\n      case 'warning': return 'bg-yellow-100 text-yellow-800';\r\n      case 'error': return 'bg-red-100 text-red-800';\r\n      case 'checking': return 'bg-blue-100 text-blue-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Run initial health check on component mount\r\n    runHealthCheck();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Brain className=\"h-5 w-5\" />\r\n                Agent Development Status Checker\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Monitor the health and functionality of all development agents\r\n              </CardDescription>\r\n            </div>\r\n            <Button\r\n              onClick={runHealthCheck}\r\n              disabled={isChecking}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <RefreshCw className={`h-4 w-4 ${isChecking ? 'animate-spin' : ''}`} />\r\n              {isChecking ? 'Checking...' : 'Run Health Check'}\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"mb-4\">\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <span className=\"text-sm font-medium\">Overall System Health</span>\r\n              <span className=\"text-sm font-medium\">{Math.round(overallHealth)}%</span>\r\n            </div>\r\n            <Progress value={overallHealth} className=\"h-3\" />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {agents.map((agent) => {\r\n          const IconComponent = agent.icon;\r\n          return (\r\n            <Card key={agent.type} className=\"relative\">\r\n              <CardHeader className=\"pb-3\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <IconComponent className=\"h-5 w-5\" />\r\n                    <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(agent.status)}\r\n                    <Badge className={getStatusColor(agent.status)}>\r\n                      {agent.status}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"text-sm\">\r\n                  <p className=\"text-muted-foreground mb-1\">Status Message:</p>\r\n                  <p className=\"text-xs bg-gray-50 p-2 rounded\">{agent.message}</p>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n                  <div>\r\n                    <span className=\"text-muted-foreground\">Response Time:</span>\r\n                    <span className=\"ml-1 font-medium\">{agent.responseTime}ms</span>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-muted-foreground\">Last Check:</span>\r\n                    <span className=\"ml-1 font-medium\">\r\n                      {new Date(agent.lastCheck).toLocaleTimeString()}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* System Integration Status */}\r\n      <Card className=\"border-blue-200 bg-blue-50/50\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2 text-blue-800\">\r\n            <CheckCircle className=\"h-5 w-5\" />\r\n            Development Environment Status\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"text-blue-700\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n            <div>\r\n              <div className=\"font-medium\">‚úÖ Supabase Integration</div>\r\n              <div>Database, Edge Functions, Auth</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"font-medium\">‚úÖ OpenAI Integration</div>\r\n              <div>AI generation and processing</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"font-medium\">‚úÖ GitHub Integration</div>\r\n              <div>Auto-commit and version control</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\AutonomousAgentTester.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\DocumentationAgents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\LiveTestingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\N8NQuickTest.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runQuickTest'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runQuickTest]","fix":{"range":[2460,2462],"text":"[runQuickTest]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { CheckCircle, AlertTriangle, Loader2 } from 'lucide-react';\r\n\r\nexport const N8NQuickTest = () => {\r\n  const [testStatus, setTestStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');\r\n  const [testResult, setTestResult] = useState<unknown>(null);\r\n  const { toast } = useToast();\r\n\r\n  const webhookUrl = `https://imcyiofodlnbomemvqto.supabase.co/functions/v1/n8n-webhook`;\r\n\r\n  const runQuickTest = async () => {\r\n    setTestStatus('testing');\r\n    \r\n    try {\r\n      const testPayload = {\r\n        trigger_type: 'autonomous_task',\r\n        task_type: 'quick_test',\r\n        goal: 'Quick N8N webhook connectivity test',\r\n        prompt: 'Testing webhook connection and OpenAI integration',\r\n        action: 'Quick test executed',\r\n        confidence: 0.95,\r\n        success: true,\r\n        timestamp: new Date().toISOString(),\r\n        source: 'dashboard_quick_test'\r\n      };\r\n\r\n      console.log('Running N8N quick test:', webhookUrl);\r\n      \r\n      const response = await fetch(webhookUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(testPayload)\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log('N8N test result:', result);\r\n      \r\n      setTestResult(result);\r\n      \r\n      if (result.success) {\r\n        setTestStatus('success');\r\n        toast({\r\n          title: \"‚úÖ N8N Webhook Working!\",\r\n          description: \"Your N8N integration is functioning properly\",\r\n        });\r\n      } else {\r\n        setTestStatus('error');\r\n        toast({\r\n          title: \"‚ö†Ô∏è N8N Test Issues\",\r\n          description: result.message || \"Some issues detected\",\r\n          variant: \"destructive\"\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('N8N test error:', error);\r\n      setTestStatus('error');\r\n      setTestResult({ error: error.message });\r\n      toast({\r\n        title: \"‚ùå N8N Test Failed\",\r\n        description: \"Could not connect to N8N webhook\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  // Auto-run test on component mount\r\n  useEffect(() => {\r\n    runQuickTest();\r\n  }, []);\r\n\r\n  const getStatusBadge = () => {\r\n    switch (testStatus) {\r\n      case 'testing':\r\n        return <Badge variant=\"secondary\"><Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />Testing...</Badge>;\r\n      case 'success':\r\n        return <Badge variant=\"default\"><CheckCircle className=\"h-3 w-3 mr-1\" />Working</Badge>;\r\n      case 'error':\r\n        return <Badge variant=\"destructive\"><AlertTriangle className=\"h-3 w-3 mr-1\" />Error</Badge>;\r\n      default:\r\n        return <Badge variant=\"outline\">Ready</Badge>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          N8N Webhook Status\r\n          {getStatusBadge()}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Quick connectivity test for your N8N integration\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n          <div className=\"text-sm font-medium mb-1\">Webhook URL:</div>\r\n          <code className=\"text-xs break-all\">{webhookUrl}</code>\r\n        </div>\r\n\r\n        <Button\r\n          onClick={runQuickTest}\r\n          disabled={testStatus === 'testing'}\r\n          className=\"w-full\"\r\n          variant=\"outline\"\r\n        >\r\n          {testStatus === 'testing' ? (\r\n            <>\r\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n              Testing N8N Connection...\r\n            </>\r\n          ) : (\r\n            'Re-test N8N Webhook'\r\n          )}\r\n        </Button>\r\n\r\n        {testResult && (\r\n          <div className=\"mt-4\">\r\n            <div className=\"text-sm font-medium mb-2\">Test Result:</div>\r\n            <pre className=\"text-xs bg-gray-100 p-3 rounded border overflow-auto max-h-32\">\r\n              {JSON.stringify(testResult, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n\r\n        {testStatus === 'success' && (\r\n          <div className=\"bg-green-50 border border-green-200 p-3 rounded-lg\">\r\n            <div className=\"text-green-800 text-sm font-medium\">‚úÖ N8N Integration Status:</div>\r\n            <ul className=\"text-green-700 text-sm mt-1 space-y-1\">\r\n              <li>‚Ä¢ Webhook connectivity: Working</li>\r\n              <li>‚Ä¢ OpenAI key: {testResult?.openai_key_status === 'configured' ? 'Configured' : 'Missing'}</li>\r\n              <li>‚Ä¢ Agent logging: Active</li>\r\n              <li>‚Ä¢ Response time: Good</li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n\r\n        {testStatus === 'error' && (\r\n          <div className=\"bg-red-50 border border-red-200 p-3 rounded-lg\">\r\n            <div className=\"text-red-800 text-sm font-medium\">‚ùå Issues Detected:</div>\r\n            <div className=\"text-red-700 text-sm mt-1\">\r\n              Please check your webhook URL and network connectivity.\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\N8NWebhookTester.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\RealtimeAgentDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\testing\\UserTestingPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\theme-provider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":98,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":98,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\ntype Theme = 'light' | 'dark' | 'system';\r\n\r\ntype ThemeProviderProps = {\r\n  children: React.ReactNode;\r\n  defaultTheme?: Theme;\r\n  storageKey?: string;\r\n};\r\n\r\ntype ThemeProviderState = {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n  isDark: boolean;\r\n};\r\n\r\nconst initialState: ThemeProviderState = {\r\n  theme: 'system',\r\n  setTheme: () => null,\r\n  isDark: false,\r\n};\r\n\r\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\r\n\r\nexport function ThemeProvider({\r\n  children,\r\n  defaultTheme = 'system',\r\n  storageKey = 'tms-theme',\r\n  ...props\r\n}: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\r\n  const [isDark, setIsDark] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem(storageKey) as Theme;\r\n    if (savedTheme) {\r\n      setTheme(savedTheme);\r\n    }\r\n  }, [storageKey]);\r\n\r\n  useEffect(() => {\r\n    const root = window.document.documentElement;\r\n    \r\n    // Remove existing theme classes\r\n    root.classList.remove('light', 'dark');\r\n    \r\n    let effectiveTheme = theme;\r\n    \r\n    if (theme === 'system') {\r\n      effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    }\r\n    \r\n    // Apply the theme class\r\n    root.classList.add(effectiveTheme);\r\n    setIsDark(effectiveTheme === 'dark');\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(storageKey, theme);\r\n    \r\n    // Update meta theme-color\r\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\r\n    if (metaThemeColor) {\r\n      metaThemeColor.setAttribute('content', effectiveTheme === 'dark' ? '#0f172a' : '#ffffff');\r\n    }\r\n  }, [theme, storageKey]);\r\n\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    if (theme === 'system') {\r\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n      \r\n      const handleChange = () => {\r\n        const root = window.document.documentElement;\r\n        root.classList.remove('light', 'dark');\r\n        const newTheme = mediaQuery.matches ? 'dark' : 'light';\r\n        root.classList.add(newTheme);\r\n        setIsDark(newTheme === 'dark');\r\n      };\r\n      \r\n      mediaQuery.addEventListener('change', handleChange);\r\n      return () => mediaQuery.removeEventListener('change', handleChange);\r\n    }\r\n  }, [theme]);\r\n\r\n  const value = {\r\n    theme,\r\n    setTheme,\r\n    isDark,\r\n  };\r\n\r\n  return (\r\n    <ThemeProviderContext.Provider {...props} value={value}>\r\n      {children}\r\n    </ThemeProviderContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeProviderContext);\r\n  \r\n  if (context === undefined)\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  \r\n  return context;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\theme\\ThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":77,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":77,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, createContext, useContext } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\" | \"system\";\r\nconst ThemeCtx = createContext<{theme: Theme; setTheme:(t:Theme)=>void}>({theme:\"system\", setTheme:()=>{}});\r\n\r\ntype ThemeProviderProps = {\r\n  children: React.ReactNode;\r\n  defaultTheme?: Theme;\r\n  enableSystem?: boolean;\r\n  enableTransition?: boolean;\r\n};\r\n\r\nexport function ThemeProvider({ \r\n  children, \r\n  defaultTheme = \"system\",\r\n  enableSystem = true,\r\n  enableTransition = true \r\n}: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    // Check localStorage first\r\n    const saved = localStorage.getItem(\"theme\") as Theme;\r\n    if (saved && [\"light\", \"dark\", \"system\"].includes(saved)) {\r\n      return saved;\r\n    }\r\n    // Use defaultTheme prop\r\n    return defaultTheme;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const root = document.documentElement;\r\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n    \r\n    // Determine if we should use dark mode\r\n    const shouldUseDark = theme === \"dark\" || (theme === \"system\" && enableSystem && prefersDark);\r\n    \r\n    // Apply the appropriate class\r\n    root.classList.remove(\"light\", \"dark\");\r\n    root.classList.add(shouldUseDark ? \"dark\" : \"light\");\r\n    \r\n    // Add transition class if enabled\r\n    if (enableTransition) {\r\n      root.classList.add(\"transition-colors\", \"duration-300\");\r\n    }\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(\"theme\", theme);\r\n    \r\n    // Update meta theme-color for mobile browsers\r\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\r\n    if (metaThemeColor) {\r\n      metaThemeColor.setAttribute('content', shouldUseDark ? '#0a0a0f' : '#ffffff');\r\n    }\r\n  }, [theme, enableSystem, enableTransition]);\r\n\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    if (!enableSystem) return;\r\n    \r\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    \r\n    const handleChange = () => {\r\n      if (theme === \"system\") {\r\n        const root = document.documentElement;\r\n        const prefersDark = mediaQuery.matches;\r\n        root.classList.remove(\"light\", \"dark\");\r\n        root.classList.add(prefersDark ? \"dark\" : \"light\");\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener(\"change\", handleChange);\r\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\r\n  }, [theme, enableSystem]);\r\n\r\n  return <ThemeCtx.Provider value={{ theme, setTheme }}>{children}</ThemeCtx.Provider>;\r\n}\r\n\r\nexport function useTheme(){ return useContext(ThemeCtx); }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\theme\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\tms-admin\\TMSAdminPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\date-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n))\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\r\n)\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n))\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nNavigationMenuViewport.displayName =\r\n  NavigationMenuPrimitive.Viewport.displayName\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n))\r\nNavigationMenuIndicator.displayName =\r\n  NavigationMenuPrimitive.Indicator.displayName\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":384,"column":396,"nodeType":"Identifier","messageId":"namedExport","endLine":384,"endColumn":406}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport { PanelLeft } from \"lucide-react\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\r\nconst SIDEBAR_WIDTH = \"16rem\";\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\";\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  openMobile: boolean;\r\n  setOpenMobile: (open: boolean) => void;\r\n  isMobile: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext);\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\r\n  }\r\n  return context;\r\n}\r\nconst SidebarProvider = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & {\r\n  defaultOpen?: boolean;\r\n  open?: boolean;\r\n  onOpenChange?: (open: boolean) => void;\r\n}>(({\r\n  defaultOpen = true,\r\n  open: openProp,\r\n  onOpenChange: setOpenProp,\r\n  className,\r\n  style,\r\n  children,\r\n  ...props\r\n}, ref) => {\r\n  const isMobile = useIsMobile();\r\n  const [openMobile, setOpenMobile] = React.useState(false);\r\n\r\n  // This is the internal state of the sidebar.\r\n  // We use openProp and setOpenProp for control from outside the component.\r\n  const [_open, _setOpen] = React.useState(defaultOpen);\r\n  const open = openProp ?? _open;\r\n  const setOpen = React.useCallback((value: boolean | ((value: boolean) => boolean)) => {\r\n    const openState = typeof value === \"function\" ? value(open) : value;\r\n    if (setOpenProp) {\r\n      setOpenProp(openState);\r\n    } else {\r\n      _setOpen(openState);\r\n    }\r\n\r\n    // This sets the cookie to keep the sidebar state.\r\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\r\n  }, [setOpenProp, open]);\r\n\r\n  // Helper to toggle the sidebar.\r\n  const toggleSidebar = React.useCallback(() => {\r\n    return isMobile ? setOpenMobile(open => !open) : setOpen(open => !open);\r\n  }, [isMobile, setOpen, setOpenMobile]);\r\n\r\n  // Adds a keyboard shortcut to toggle the sidebar.\r\n  React.useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\r\n        event.preventDefault();\r\n        toggleSidebar();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [toggleSidebar]);\r\n\r\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n  // This makes it easier to style the sidebar with Tailwind classes.\r\n  const state = open ? \"expanded\" : \"collapsed\";\r\n  const contextValue = React.useMemo<SidebarContext>(() => ({\r\n    state,\r\n    open,\r\n    setOpen,\r\n    isMobile,\r\n    openMobile,\r\n    setOpenMobile,\r\n    toggleSidebar\r\n  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]);\r\n  return <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div style={{\r\n        \"--sidebar-width\": SIDEBAR_WIDTH,\r\n        \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n        ...style\r\n      } as React.CSSProperties} className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)} ref={ref} {...props}>\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>;\r\n});\r\nSidebarProvider.displayName = \"SidebarProvider\";\r\nconst Sidebar = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & {\r\n  side?: \"left\" | \"right\";\r\n  variant?: \"sidebar\" | \"floating\" | \"inset\";\r\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\";\r\n}>(({\r\n  side = \"left\",\r\n  variant = \"sidebar\",\r\n  collapsible = \"offcanvas\",\r\n  className,\r\n  children,\r\n  ...props\r\n}, ref) => {\r\n  const {\r\n    isMobile,\r\n    state,\r\n    openMobile,\r\n    setOpenMobile\r\n  } = useSidebar();\r\n  if (collapsible === \"none\") {\r\n    return <div className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)} ref={ref} {...props}>\r\n          {children}\r\n        </div>;\r\n  }\r\n  if (isMobile) {\r\n    return <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent data-sidebar=\"sidebar\" data-mobile=\"true\" className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\" style={{\r\n        \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE\r\n      } as React.CSSProperties} side={side}>\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>;\r\n  }\r\n  return <div ref={ref} className=\"group peer hidden md:block text-sidebar-foreground\" data-state={state} data-collapsible={state === \"collapsed\" ? collapsible : \"\"} data-variant={variant} data-side={side}>\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        \r\n        <div className={cn(\"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\", side === \"left\" ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\" : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n    // Adjust the padding for floating and inset variants.\r\n    variant === \"floating\" || variant === \"inset\" ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\" : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\", className)} {...props}>\r\n          \r\n        </div>\r\n      </div>;\r\n});\r\nSidebar.displayName = \"Sidebar\";\r\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(({\r\n  className,\r\n  onClick,\r\n  ...props\r\n}, ref) => {\r\n  const {\r\n    toggleSidebar\r\n  } = useSidebar();\r\n  return <Button ref={ref} data-sidebar=\"trigger\" variant=\"ghost\" size=\"icon\" className={cn(\"h-7 w-7\", className)} onClick={event => {\r\n    onClick?.(event);\r\n    toggleSidebar();\r\n  }} {...props}>\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>;\r\n});\r\nSidebarTrigger.displayName = \"SidebarTrigger\";\r\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  const {\r\n    toggleSidebar\r\n  } = useSidebar();\r\n  return <button ref={ref} data-sidebar=\"rail\" aria-label=\"Toggle Sidebar\" tabIndex={-1} onClick={toggleSidebar} title=\"Toggle Sidebar\" className={cn(\"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\", \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\", \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\", \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\", \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\", \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\", className)} {...props} />;\r\n});\r\nSidebarRail.displayName = \"SidebarRail\";\r\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <main ref={ref} className={cn(\"relative flex min-h-svh flex-1 flex-col bg-background\", \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\", className)} {...props} />;\r\n});\r\nSidebarInset.displayName = \"SidebarInset\";\r\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <Input ref={ref} data-sidebar=\"input\" className={cn(\"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\", className)} {...props} />;\r\n});\r\nSidebarInput.displayName = \"SidebarInput\";\r\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\r\n});\r\nSidebarHeader.displayName = \"SidebarHeader\";\r\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\r\n});\r\nSidebarFooter.displayName = \"SidebarFooter\";\r\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <Separator ref={ref} data-sidebar=\"separator\" className={cn(\"mx-2 w-auto bg-sidebar-border\", className)} {...props} />;\r\n});\r\nSidebarSeparator.displayName = \"SidebarSeparator\";\r\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <div ref={ref} data-sidebar=\"content\" className={cn(\"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\", className)} {...props} />;\r\n});\r\nSidebarContent.displayName = \"SidebarContent\";\r\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  return <div ref={ref} data-sidebar=\"group\" className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)} {...props} />;\r\n});\r\nSidebarGroup.displayName = \"SidebarGroup\";\r\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & {\r\n  asChild?: boolean;\r\n}>(({\r\n  className,\r\n  asChild = false,\r\n  ...props\r\n}, ref) => {\r\n  const Comp = asChild ? Slot : \"div\";\r\n  return <Comp ref={ref} data-sidebar=\"group-label\" className={cn(\"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\", \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\", className)} {...props} />;\r\n});\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\r\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & {\r\n  asChild?: boolean;\r\n}>(({\r\n  className,\r\n  asChild = false,\r\n  ...props\r\n}, ref) => {\r\n  const Comp = asChild ? Slot : \"button\";\r\n  return <Comp ref={ref} data-sidebar=\"group-action\" className={cn(\"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  // Increases the hit area of the button on mobile.\r\n  \"after:absolute after:-inset-2 after:md:hidden\", \"group-data-[collapsible=icon]:hidden\", className)} {...props} />;\r\n});\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\r\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />);\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\r\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />);\r\nSidebarMenu.displayName = \"SidebarMenu\";\r\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />);\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\r\nconst sidebarMenuButtonVariants = cva(\"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n      outline: \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\"\r\n    },\r\n    size: {\r\n      default: \"h-8 text-sm\",\r\n      sm: \"h-7 text-xs\",\r\n      lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\"\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    size: \"default\"\r\n  }\r\n});\r\nconst SidebarMenuButton = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & {\r\n  asChild?: boolean;\r\n  isActive?: boolean;\r\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>;\r\n} & VariantProps<typeof sidebarMenuButtonVariants>>(({\r\n  asChild = false,\r\n  isActive = false,\r\n  variant = \"default\",\r\n  size = \"default\",\r\n  tooltip,\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  const Comp = asChild ? Slot : \"button\";\r\n  const {\r\n    isMobile,\r\n    state\r\n  } = useSidebar();\r\n  const button = <Comp ref={ref} data-sidebar=\"menu-button\" data-size={size} data-active={isActive} className={cn(sidebarMenuButtonVariants({\r\n    variant,\r\n    size\r\n  }), className)} {...props} />;\r\n  if (!tooltip) {\r\n    return button;\r\n  }\r\n  if (typeof tooltip === \"string\") {\r\n    tooltip = {\r\n      children: tooltip\r\n    };\r\n  }\r\n  return <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\r\n      </Tooltip>;\r\n});\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\r\nconst SidebarMenuAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & {\r\n  asChild?: boolean;\r\n  showOnHover?: boolean;\r\n}>(({\r\n  className,\r\n  asChild = false,\r\n  showOnHover = false,\r\n  ...props\r\n}, ref) => {\r\n  const Comp = asChild ? Slot : \"button\";\r\n  return <Comp ref={ref} data-sidebar=\"menu-action\" className={cn(\"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  // Increases the hit area of the button on mobile.\r\n  \"after:absolute after:-inset-2 after:md:hidden\", \"peer-data-[size=sm]/menu-button:top-1\", \"peer-data-[size=default]/menu-button:top-1.5\", \"peer-data-[size=lg]/menu-button:top-2.5\", \"group-data-[collapsible=icon]:hidden\", showOnHover && \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\", className)} {...props} />;\r\n});\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\r\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => <div ref={ref} data-sidebar=\"menu-badge\" className={cn(\"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\", \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\", \"peer-data-[size=sm]/menu-button:top-1\", \"peer-data-[size=default]/menu-button:top-1.5\", \"peer-data-[size=lg]/menu-button:top-2.5\", \"group-data-[collapsible=icon]:hidden\", className)} {...props} />);\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\r\nconst SidebarMenuSkeleton = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & {\r\n  showIcon?: boolean;\r\n}>(({\r\n  className,\r\n  showIcon = false,\r\n  ...props\r\n}, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`;\r\n  }, []);\r\n  return <div ref={ref} data-sidebar=\"menu-skeleton\" className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)} {...props}>\r\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\r\n      <Skeleton className=\"h-4 flex-1 max-w-[--skeleton-width]\" data-sidebar=\"menu-skeleton-text\" style={{\r\n      \"--skeleton-width\": width\r\n    } as React.CSSProperties} />\r\n    </div>;\r\n});\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\r\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({\r\n  className,\r\n  ...props\r\n}, ref) => <ul ref={ref} data-sidebar=\"menu-sub\" className={cn(\"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\", \"group-data-[collapsible=icon]:hidden\", className)} {...props} />);\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\r\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({\r\n  ...props\r\n}, ref) => <li ref={ref} {...props} />);\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\r\nconst SidebarMenuSubButton = React.forwardRef<HTMLAnchorElement, React.ComponentProps<\"a\"> & {\r\n  asChild?: boolean;\r\n  size?: \"sm\" | \"md\";\r\n  isActive?: boolean;\r\n}>(({\r\n  asChild = false,\r\n  size = \"md\",\r\n  isActive,\r\n  className,\r\n  ...props\r\n}, ref) => {\r\n  const Comp = asChild ? Slot : \"a\";\r\n  return <Comp ref={ref} data-sidebar=\"menu-sub-button\" data-size={size} data-active={isActive} className={cn(\"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\", \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\", size === \"sm\" && \"text-xs\", size === \"md\" && \"text-sm\", \"group-data-[collapsible=icon]:hidden\", className)} {...props} />;\r\n});\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\r\nexport { Sidebar, SidebarContent, SidebarFooter, SidebarGroup, SidebarGroupAction, SidebarGroupContent, SidebarGroupLabel, SidebarHeader, SidebarInput, SidebarInset, SidebarMenu, SidebarMenuAction, SidebarMenuBadge, SidebarMenuButton, SidebarMenuItem, SidebarMenuSkeleton, SidebarMenuSub, SidebarMenuSubButton, SidebarMenuSubItem, SidebarProvider, SidebarRail, SidebarSeparator, SidebarTrigger, useSidebar };","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\workers\\WorkerFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\workers\\WorkerForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\workers\\WorkerStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\workers\\WorkerTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\components\\workers\\WorkerTableSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\context\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":73,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":73,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, ReactNode } from 'react';\r\nimport { Session } from '@supabase/supabase-js';\r\nimport type { UserRole, ExtendedUser } from '@/types/auth';\r\nimport type { MenuItem } from '@/types/menu';\r\nimport { useAuthContext } from '@/hooks/auth/useAuthContext';\r\nimport { useMenuData } from '@/hooks/auth/useMenuData';\r\n\r\ninterface AuthContextType {\r\n  user: ExtendedUser | null;\r\n  session: Session | null;\r\n  selectedRole: UserRole;\r\n  loading: boolean;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\r\n  signUp: (email: string, password: string) => Promise<{ error?: string }>;\r\n  signOut: () => Promise<void>;\r\n  login: (email: string, password: string) => Promise<{ error?: string }>;\r\n  logout: () => Promise<void>;\r\n  setSelectedRole: (role: UserRole) => void;\r\n  switchRole: (role: UserRole) => void;\r\n  availableRoles: UserRole[];\r\n  getMenuForRole: (role?: UserRole) => MenuItem[];\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const {\r\n    user,\r\n    session,\r\n    selectedRole,\r\n    loading,\r\n    availableRoles,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    updateSelectedRole\r\n  } = useAuthContext();\r\n\r\n  const { getMenuForRole } = useMenuData();\r\n\r\n  const contextValue: AuthContextType = {\r\n    user,\r\n    session,\r\n    selectedRole,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n    isLoading: loading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    login: signIn,\r\n    logout: signOut,\r\n    setSelectedRole: updateSelectedRole,\r\n    switchRole: updateSelectedRole,\r\n    availableRoles,\r\n    getMenuForRole: (role?: UserRole) => getMenuForRole(role || selectedRole),\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthProvider;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\context\\auth\\AuthHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\context\\auth\\AuthProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":137,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":137,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, useEffect, ReactNode } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport type { UserRole, ExtendedUser } from '@/types/auth';\r\nimport type { LucideIcon } from 'lucide-react';\r\nimport { useAuthState } from '@/hooks/auth/useAuthState';\r\nimport { useAuthOperations } from '@/hooks/auth/useAuthOperations';\r\nimport { useRoleManagement } from '@/hooks/auth/useRoleManagement';\r\nimport { useMenuGenerator } from '@/hooks/auth/useMenuGenerator';\r\nimport type { Session } from '@supabase/supabase-js';\r\n\r\ninterface AuthContextType {\r\n  user: ExtendedUser | null;\r\n  session: Session | null;\r\n  selectedRole: UserRole;\r\n  loading: boolean;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\r\n  signUp: (email: string, password: string) => Promise<{ error?: string }>;\r\n  signOut: () => Promise<void>;\r\n  login: (email: string, password: string) => Promise<{ error?: string }>;\r\n  logout: () => Promise<void>;\r\n  setSelectedRole: (role: UserRole) => void;\r\n  switchRole: (role: UserRole) => void;\r\n  availableRoles: UserRole[];\r\n  getMenuForRole: (role?: UserRole) => MenuItem[];\r\n}\r\n\r\ninterface MenuItem {\r\n  id: string;\r\n  label: string;\r\n  icon?: LucideIcon;\r\n  path?: string;\r\n  children?: MenuItem[];\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const { authState, initializeAuth, updateAuthState, resetAuthState } = useAuthState();\r\n  const { signIn, signUp, signOut } = useAuthOperations();\r\n  const { \r\n    selectedRole, \r\n    availableRoles, \r\n    loadSavedRole, \r\n    updateSelectedRole, \r\n    clearSelectedRole \r\n  } = useRoleManagement();\r\n  const { getMenuForRole } = useMenuGenerator();\r\n\r\n  useEffect(() => {\r\n    console.log('AuthProvider: Setting up authentication...');\r\n    \r\n    let mounted = true;\r\n    \r\n    const setupAuth = async () => {\r\n      // Initialize auth state\r\n      await initializeAuth();\r\n      \r\n      // Load saved role only after auth is initialized\r\n      if (mounted) {\r\n        loadSavedRole();\r\n      }\r\n    };\r\n\r\n    // Set up auth state listener\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        console.log('AuthProvider: Auth state changed:', event, session?.user ? 'User present' : 'No user');\r\n        \r\n        if (mounted) {\r\n          // Update auth state based on session\r\n          await updateAuthState(session);\r\n\r\n          // Clear role on sign out\r\n          if (event === 'SIGNED_OUT') {\r\n            clearSelectedRole();\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    // Initialize authentication\r\n    setupAuth();\r\n\r\n    return () => {\r\n      console.log('AuthProvider: Cleaning up auth listener');\r\n      mounted = false;\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [initializeAuth, updateAuthState, loadSavedRole, clearSelectedRole]);\r\n\r\n  const handleSignOut = async () => {\r\n    console.log('AuthProvider: Signing out user');\r\n    await signOut();\r\n    resetAuthState();\r\n    clearSelectedRole();\r\n  };\r\n\r\n  const contextValue: AuthContextType = {\r\n    user: authState.user,\r\n    session: authState.session,\r\n    selectedRole,\r\n    loading: authState.loading,\r\n    isAuthenticated: !!authState.user,\r\n    isLoading: authState.loading,\r\n    signIn,\r\n    signUp,\r\n    signOut: handleSignOut,\r\n    login: signIn,\r\n    logout: handleSignOut,\r\n    setSelectedRole: updateSelectedRole,\r\n    switchRole: updateSelectedRole,\r\n    availableRoles,\r\n    getMenuForRole,\r\n  };\r\n\r\n  console.log('AuthProvider: Current state', {\r\n    userEmail: authState.user?.email,\r\n    isAuthenticated: !!authState.user,\r\n    selectedRole,\r\n    loading: authState.loading\r\n  });\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\context\\auth\\AuthState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\context\\role-context.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":23,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":23,"endColumn":47},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":377,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":377,"endColumn":21},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":385,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":385,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\nexport type UserRole = \r\n  | 'super_admin'\r\n  | 'admin'\r\n  | 'freight_broker_admin'\r\n  | 'carrier_admin'\r\n  | 'shipper_admin'\r\n  | 'driver'\r\n  | 'owner_operator'\r\n  | 'factoring_admin'\r\n  | 'analyst';\r\n\r\nexport interface RoleInfo {\r\n  id: UserRole;\r\n  name: string;\r\n  description: string;\r\n  color: string;\r\n  icon: string;\r\n  permissions: string[];\r\n}\r\n\r\nexport const ROLES: Record<UserRole, RoleInfo> = {\r\n  super_admin: {\r\n    id: 'super_admin',\r\n    name: 'Super Admin',\r\n    description: 'Full system control and oversight',\r\n    color: 'indigo',\r\n    icon: 'üëë',\r\n    permissions: ['*']\r\n  },\r\n  admin: {\r\n    id: 'admin',\r\n    name: 'Admin',\r\n    description: 'System administration and management',\r\n    color: 'red',\r\n    icon: '‚öôÔ∏è',\r\n    permissions: ['manage_users', 'system_settings', 'view_logs', 'manage_portals']\r\n  },\r\n  freight_broker_admin: {\r\n    id: 'freight_broker_admin',\r\n    name: 'Freight Broker Admin',\r\n    description: 'Freight brokerage and load management',\r\n    color: 'blue',\r\n    icon: 'üì¶',\r\n    permissions: ['manage_loads', 'manage_carriers', 'view_reports', 'create_quotes']\r\n  },\r\n  carrier_admin: {\r\n    id: 'carrier_admin',\r\n    name: 'Carrier Admin',\r\n    description: 'Fleet operations and driver management',\r\n    color: 'green',\r\n    icon: 'üöõ',\r\n    permissions: ['manage_fleet', 'manage_drivers', 'dispatch_loads', 'view_reports']\r\n  },\r\n  shipper_admin: {\r\n    id: 'shipper_admin',\r\n    name: 'Shipper Admin',\r\n    description: 'Booking and shipment management',\r\n    color: 'orange',\r\n    icon: 'üì¶',\r\n    permissions: ['create_shipments', 'track_shipments', 'manage_quotes', 'view_reports']\r\n  },\r\n  driver: {\r\n    id: 'driver',\r\n    name: 'Driver',\r\n    description: 'Mobile interface for drivers',\r\n    color: 'purple',\r\n    icon: 'üë®‚Äçüíº',\r\n    permissions: ['view_loads', 'update_status', 'check_in', 'upload_docs']\r\n  },\r\n  owner_operator: {\r\n    id: 'owner_operator',\r\n    name: 'Owner Operator',\r\n    description: 'Independent trucking business management',\r\n    color: 'amber',\r\n    icon: 'üè¢',\r\n    permissions: ['manage_business', 'view_contracts', 'track_expenses', 'view_reports']\r\n  },\r\n  factoring_admin: {\r\n    id: 'factoring_admin',\r\n    name: 'Factoring Admin',\r\n    description: 'Financial services and invoice management',\r\n    color: 'emerald',\r\n    icon: 'üí∞',\r\n    permissions: ['process_invoices', 'manage_clients', 'view_finances', 'generate_reports']\r\n  },\r\n  analyst: {\r\n    id: 'analyst',\r\n    name: 'Analyst',\r\n    description: 'Data analysis and reporting',\r\n    color: 'teal',\r\n    icon: 'üìä',\r\n    permissions: ['view_analytics', 'generate_reports', 'export_data', 'view_insights']\r\n  }\r\n};\r\n\r\nexport interface RoleContextType {\r\n  currentRole: UserRole;\r\n  roleInfo: RoleInfo;\r\n  setRole: (role: UserRole) => void;\r\n  hasPermission: (permission: string) => boolean;\r\n  getAvailableRoles: () => RoleInfo[];\r\n  getRoleQuickActions: () => Array<{\r\n    id: string;\r\n    label: string;\r\n    icon: string;\r\n    action: string;\r\n    description: string;\r\n  }>;\r\n}\r\n\r\nconst RoleContext = createContext<RoleContextType | undefined>(undefined);\r\n\r\ninterface RoleProviderProps {\r\n  children: ReactNode;\r\n  initialRole?: UserRole;\r\n}\r\n\r\nexport const RoleProvider: React.FC<RoleProviderProps> = ({ \r\n  children, \r\n  initialRole = 'super_admin' \r\n}) => {\r\n  const [currentRole, setCurrentRole] = useState<UserRole>(initialRole);\r\n\r\n  const roleInfo = ROLES[currentRole];\r\n\r\n  const setRole = (role: UserRole) => {\r\n    setCurrentRole(role);\r\n  };\r\n\r\n  const hasPermission = (permission: string): boolean => {\r\n    if (currentRole === 'super_admin') return true;\r\n    return roleInfo.permissions.includes(permission) || roleInfo.permissions.includes('*');\r\n  };\r\n\r\n  const getAvailableRoles = (): RoleInfo[] => {\r\n    return Object.values(ROLES);\r\n  };\r\n\r\n  const getRoleQuickActions = () => {\r\n    const actions: Record<UserRole, Array<{\r\n      id: string;\r\n      label: string;\r\n      icon: string;\r\n      action: string;\r\n      description: string;\r\n    }>> = {\r\n      super_admin: [\r\n        {\r\n          id: 'create-user',\r\n          label: 'Create User',\r\n          icon: 'üë§',\r\n          action: 'create_user',\r\n          description: 'Create new user account'\r\n        },\r\n        {\r\n          id: 'system-overview',\r\n          label: 'System Overview',\r\n          icon: 'üìä',\r\n          action: 'system_overview',\r\n          description: 'View system overview'\r\n        },\r\n        {\r\n          id: 'security-settings',\r\n          label: 'Security Settings',\r\n          icon: 'üîí',\r\n          action: 'security_settings',\r\n          description: 'Configure security'\r\n        }\r\n      ],\r\n      admin: [\r\n        {\r\n          id: 'manage-users',\r\n          label: 'Manage Users',\r\n          icon: 'üë•',\r\n          action: 'manage_users',\r\n          description: 'Manage system users'\r\n        },\r\n        {\r\n          id: 'system-settings',\r\n          label: 'System Settings',\r\n          icon: '‚öôÔ∏è',\r\n          action: 'system_settings',\r\n          description: 'Configure system settings'\r\n        },\r\n        {\r\n          id: 'view-logs',\r\n          label: 'View Logs',\r\n          icon: 'üìã',\r\n          action: 'view_logs',\r\n          description: 'Access system logs'\r\n        }\r\n      ],\r\n      freight_broker_admin: [\r\n        {\r\n          id: 'create-load',\r\n          label: 'Create Load',\r\n          icon: '‚ûï',\r\n          action: 'create_load',\r\n          description: 'Create a new freight load'\r\n        },\r\n        {\r\n          id: 'find-carriers',\r\n          label: 'Find Carriers',\r\n          icon: 'üîç',\r\n          action: 'find_carriers',\r\n          description: 'Search available carriers'\r\n        },\r\n        {\r\n          id: 'view-reports',\r\n          label: 'View Reports',\r\n          icon: 'üìä',\r\n          action: 'view_reports',\r\n          description: 'Access brokerage reports'\r\n        }\r\n      ],\r\n      carrier_admin: [\r\n        {\r\n          id: 'dispatch-load',\r\n          label: 'Dispatch Load',\r\n          icon: 'üì§',\r\n          action: 'dispatch_load',\r\n          description: 'Dispatch load to driver'\r\n        },\r\n        {\r\n          id: 'manage-fleet',\r\n          label: 'Manage Fleet',\r\n          icon: 'üöõ',\r\n          action: 'manage_fleet',\r\n          description: 'Manage fleet vehicles'\r\n        },\r\n        {\r\n          id: 'driver-schedule',\r\n          label: 'Driver Schedule',\r\n          icon: 'üìÖ',\r\n          action: 'driver_schedule',\r\n          description: 'View driver schedules'\r\n        }\r\n      ],\r\n      shipper_admin: [\r\n        {\r\n          id: 'create-shipment',\r\n          label: 'Create Shipment',\r\n          icon: 'üì¶',\r\n          action: 'create_shipment',\r\n          description: 'Create new shipment'\r\n        },\r\n        {\r\n          id: 'track-shipments',\r\n          label: 'Track Shipments',\r\n          icon: 'üìç',\r\n          action: 'track_shipments',\r\n          description: 'Track active shipments'\r\n        },\r\n        {\r\n          id: 'get-quote',\r\n          label: 'Get Quote',\r\n          icon: 'üí∞',\r\n          action: 'get_quote',\r\n          description: 'Get shipping quote'\r\n        }\r\n      ],\r\n      driver: [\r\n        {\r\n          id: 'view-loads',\r\n          label: 'View Loads',\r\n          icon: 'üìã',\r\n          action: 'view_loads',\r\n          description: 'View assigned loads'\r\n        },\r\n        {\r\n          id: 'update-status',\r\n          label: 'Update Status',\r\n          icon: 'üì±',\r\n          action: 'update_status',\r\n          description: 'Update delivery status'\r\n        },\r\n        {\r\n          id: 'check-in',\r\n          label: 'Check In',\r\n          icon: 'üìç',\r\n          action: 'check_in',\r\n          description: 'Check in at location'\r\n        }\r\n      ],\r\n      owner_operator: [\r\n        {\r\n          id: 'view-contracts',\r\n          label: 'View Contracts',\r\n          icon: 'üìã',\r\n          action: 'view_contracts',\r\n          description: 'View business contracts'\r\n        },\r\n        {\r\n          id: 'financial-reports',\r\n          label: 'Financial Reports',\r\n          icon: 'üìä',\r\n          action: 'financial_reports',\r\n          description: 'View financial reports'\r\n        },\r\n        {\r\n          id: 'manage-expenses',\r\n          label: 'Manage Expenses',\r\n          icon: 'üí∏',\r\n          action: 'manage_expenses',\r\n          description: 'Track business expenses'\r\n        }\r\n      ],\r\n      factoring_admin: [\r\n        {\r\n          id: 'process-invoice',\r\n          label: 'Process Invoice',\r\n          icon: 'üìÑ',\r\n          action: 'process_invoice',\r\n          description: 'Process invoice payment'\r\n        },\r\n        {\r\n          id: 'view-finances',\r\n          label: 'View Finances',\r\n          icon: 'üí∞',\r\n          action: 'view_finances',\r\n          description: 'View financial reports'\r\n        },\r\n        {\r\n          id: 'manage-clients',\r\n          label: 'Manage Clients',\r\n          icon: 'üë•',\r\n          action: 'manage_clients',\r\n          description: 'Manage factoring clients'\r\n        }\r\n      ],\r\n      analyst: [\r\n        {\r\n          id: 'generate-report',\r\n          label: 'Generate Report',\r\n          icon: 'üìà',\r\n          action: 'generate_report',\r\n          description: 'Generate analytics report'\r\n        },\r\n        {\r\n          id: 'view-dashboard',\r\n          label: 'View Dashboard',\r\n          icon: 'üìä',\r\n          action: 'view_dashboard',\r\n          description: 'View analytics dashboard'\r\n        },\r\n        {\r\n          id: 'export-data',\r\n          label: 'Export Data',\r\n          icon: 'üì§',\r\n          action: 'export_data',\r\n          description: 'Export analytics data'\r\n        }\r\n      ]\r\n    };\r\n\r\n    return actions[currentRole] || [];\r\n  };\r\n\r\n  const value: RoleContextType = {\r\n    currentRole,\r\n    roleInfo,\r\n    setRole,\r\n    hasPermission,\r\n    getAvailableRoles,\r\n    getRoleQuickActions\r\n  };\r\n\r\n  return (\r\n    <RoleContext.Provider value={value}>\r\n      {children}\r\n    </RoleContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useRole = (): RoleContextType => {\r\n  const context = useContext(RoleContext);\r\n  if (context === undefined) {\r\n    throw new Error('useRole must be used within a RoleProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const useRoleContext = useRole; // Alias for backward compatibility\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\dashboard\\activity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\dashboard\\health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\dashboard\\kpis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\dashboard\\performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\dashboard\\portals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\mockAPIData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\mockCRMData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\data\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\flags.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\useAILearningData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\useAnalyticsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\useRoleMetricsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\useSystemHealthData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\analytics\\useUserBehaviorData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useAuthContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useAuthOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useAuthState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useMenuData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useMenuGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\auth\\useRoleManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\activation\\useActivationStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\activation\\useAutoActivation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useAgentInitializer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useAgentTasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useAutonomousActivation.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'executeComprehensiveTesting' and 'setActivationStatus'. Either include them or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [agents, executeAgentTask, executeComprehensiveTesting, setActivationStatus]","fix":{"range":[2077,2103],"text":"[agents, executeAgentTask, executeComprehensiveTesting, setActivationStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useCallback } from 'react';\r\nimport { useAutonomousAgentManager } from './useAutonomousAgentManager';\r\nimport { useAutonomousAI } from '@/hooks/useAutonomousAI';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useActivationStatus } from './activation/useActivationStatus';\r\nimport { useAutoActivation } from './activation/useAutoActivation';\r\n\r\nexport const useAutonomousActivation = () => {\r\n  const { activationStatus, setActivationStatus } = useActivationStatus();\r\n  const { agents, setSystemStatus, executeAgentTask } = useAutonomousAgentManager();\r\n  const { callAutonomousAI } = useAutonomousAI();\r\n  const { toast } = useToast();\r\n\r\n  const startContinuousOperation = useCallback(() => {\r\n    const continuousInterval = setInterval(async () => {\r\n      const persistentStatus = localStorage.getItem('tms_autonomous_24_7_status');\r\n      if (!persistentStatus) return;\r\n      \r\n      const status = JSON.parse(persistentStatus);\r\n      if (!status.isActive || !status.isPersistent) {\r\n        clearInterval(continuousInterval);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        for (const agent of agents) {\r\n          if (agent.status === 'active') {\r\n            await executeAgentTask(agent);\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n          }\r\n        }\r\n\r\n        const hoursSinceLastTest = status.lastTestingCycle \r\n          ? (Date.now() - new Date(status.lastTestingCycle).getTime()) / (1000 * 60 * 60)\r\n          : 999;\r\n\r\n        if (hoursSinceLastTest >= 1) {\r\n          await executeComprehensiveTesting();\r\n        }\r\n\r\n        const updatedStatus = {\r\n          ...status,\r\n          totalCycles: status.totalCycles + 1\r\n        };\r\n        localStorage.setItem('tms_autonomous_24_7_status', JSON.stringify(updatedStatus));\r\n        setActivationStatus(updatedStatus);\r\n\r\n      } catch (error) {\r\n        console.error('Continuous operation error:', error);\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(continuousInterval);\r\n  }, [agents, executeAgentTask]);\r\n\r\n  const executeComprehensiveTesting = useCallback(async () => {\r\n    try {\r\n      const testResults = await callAutonomousAI('comprehensive_testing', {\r\n        test_scope: 'last_48_hours',\r\n        session_independent: true,\r\n        persistent_mode: true,\r\n        features_to_test: [\r\n          'quote_comparison_functionality',\r\n          'ai_recommendations_accuracy',\r\n          'role_based_dashboards',\r\n          'margin_analysis_calculations',\r\n          'pdf_export_generation',\r\n          'autonomous_agent_operations',\r\n          'system_performance_metrics',\r\n          'session_independent_operations'\r\n        ]\r\n      });\r\n\r\n      setActivationStatus(prev => {\r\n        const newStatus = {\r\n          ...prev,\r\n          lastTestingCycle: new Date().toISOString(),\r\n          totalCycles: prev.totalCycles + 1\r\n        };\r\n        \r\n        if (newStatus.isPersistent) {\r\n          localStorage.setItem('tms_autonomous_24_7_status', JSON.stringify(newStatus));\r\n        }\r\n        \r\n        return newStatus;\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Comprehensive testing failed:', error);\r\n    }\r\n  }, [callAutonomousAI, setActivationStatus]);\r\n\r\n  // Auto-activation hook\r\n  useAutoActivation(\r\n    setActivationStatus,\r\n    setSystemStatus,\r\n    startContinuousOperation,\r\n    executeComprehensiveTesting,\r\n    agents\r\n  );\r\n\r\n  const activateAutonomousSystem = useCallback(async () => {\r\n    try {\r\n      const newStatus = {\r\n        isActive: true,\r\n        startTime: new Date().toISOString(),\r\n        totalCycles: 0,\r\n        lastTestingCycle: null,\r\n        gptConsultations: 0,\r\n        isPersistent: true,\r\n        isAutoActivated: false\r\n      };\r\n\r\n      setActivationStatus(newStatus);\r\n      setSystemStatus('autonomous');\r\n      localStorage.setItem('tms_autonomous_24_7_status', JSON.stringify(newStatus));\r\n\r\n      await executeComprehensiveTesting();\r\n      startContinuousOperation();\r\n\r\n      toast({\r\n        title: \"ü§ñ 24/7 Autonomous System Manually Activated\",\r\n        description: \"System will continue running even if admins log out. Persistent 24/7 operation enabled.\",\r\n        duration: 6000,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Manual activation failed:', error);\r\n      toast({\r\n        title: \"Activation Error\",\r\n        description: \"Failed to activate persistent autonomous system\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  }, [setActivationStatus, setSystemStatus, executeComprehensiveTesting, startContinuousOperation, toast]);\r\n\r\n  const deactivateAutonomousSystem = useCallback(async () => {\r\n    const newStatus = {\r\n      isActive: false,\r\n      startTime: null,\r\n      totalCycles: 0,\r\n      lastTestingCycle: null,\r\n      gptConsultations: 0,\r\n      isPersistent: false,\r\n      isAutoActivated: false\r\n    };\r\n\r\n    setActivationStatus(newStatus);\r\n    setSystemStatus('manual');\r\n    localStorage.removeItem('tms_autonomous_24_7_status');\r\n\r\n    toast({\r\n      title: \"Autonomous System Deactivated\",\r\n      description: \"24/7 auto-activation has been stopped\",\r\n    });\r\n  }, [setActivationStatus, setSystemStatus, toast]);\r\n\r\n  return {\r\n    activationStatus,\r\n    activateAutonomousSystem,\r\n    deactivateAutonomousSystem,\r\n    executeComprehensiveTesting\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useAutonomousAgentManager.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'executeAgentTask'. Either include it or remove the dependency array.","line":172,"column":6,"nodeType":"ArrayExpression","endLine":172,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [agents, executeAgentTask, systemStatus]","fix":{"range":[6382,6404],"text":"[agents, executeAgentTask, systemStatus]"}}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":203,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":203,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":204,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":204,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { usePerformanceOptimization } from '@/hooks/usePerformanceOptimization';\r\nimport { AutonomousAgent, SystemStats } from '@/types/autonomous-agents';\r\nimport { useAgentInitializer } from './useAgentInitializer';\r\nimport { useAgentTasks } from './useAgentTasks';\r\nimport { useGPTAssistance } from './useGPTAssistance';\r\nimport { calculateNextRun } from '@/utils/agentUtils';\r\n\r\nexport const useAutonomousAgentManager = () => {\r\n  const [agents, setAgents] = useState<AutonomousAgent[]>([]);\r\n  const [systemStatus, setSystemStatus] = useState<'autonomous' | 'manual' | 'maintenance'>('autonomous');\r\n  const [totalTasksCompleted, setTotalTasksCompleted] = useState(0);\r\n  const { toast } = useToast();\r\n  const { systemHealth } = usePerformanceOptimization();\r\n  const { initializeAgents } = useAgentInitializer();\r\n  const { seekGPTAssistance } = useGPTAssistance();\r\n  const {\r\n    executeRefactoringTask,\r\n    executeOptimizationTask,\r\n    executeUIImprovementTask,\r\n    executeMonitoringTask,\r\n    executeLearningTask,\r\n    executeResearchTask,\r\n    executeFrontendTask,\r\n    executeBackendTask,\r\n    executeDatabaseTask,\r\n    executeTestingTask,\r\n    executeDeploymentTask\r\n  } = useAgentTasks();\r\n\r\n  const executeAgentTask = async (agent: AutonomousAgent) => {\r\n    setAgents(prev => prev.map(a => \r\n      a.id === agent.id ? { ...a, status: 'working' as const } : a\r\n    ));\r\n\r\n    try {\r\n      let result;\r\n      let actionDescription = '';\r\n\r\n      switch (agent.type) {\r\n        case 'refactoring':\r\n          result = await executeRefactoringTask();\r\n          actionDescription = 'Refactored code modules for better maintainability';\r\n          break;\r\n        case 'optimization':\r\n          result = await executeOptimizationTask();\r\n          actionDescription = 'Optimized system performance and resource allocation';\r\n          break;\r\n        case 'ui_improvement':\r\n          result = await executeUIImprovementTask();\r\n          actionDescription = 'Enhanced UI/UX based on user behavior analysis';\r\n          break;\r\n        case 'monitoring':\r\n          result = await executeMonitoringTask();\r\n          actionDescription = 'Monitored system health and generated alerts';\r\n          \r\n          // Auto-create alerts for issues found\r\n          if (result?.alerts && result.alerts.length > 0) {\r\n            for (const alert of result.alerts) {\r\n              await supabase.from('alerts').insert({\r\n                title: alert.title,\r\n                message: alert.message,\r\n                severity: alert.severity,\r\n                category: 'system_health',\r\n                source: 'autonomous_monitoring_agent'\r\n              });\r\n            }\r\n          }\r\n          break;\r\n        case 'learning':\r\n          result = await executeLearningTask();\r\n          actionDescription = 'Updated AI learning models and thresholds';\r\n          break;\r\n        case 'research':\r\n          result = await executeResearchTask();\r\n          actionDescription = 'Conducted market research and competitive analysis';\r\n          break;\r\n        case 'frontend':\r\n          result = await executeFrontendTask();\r\n          actionDescription = 'Enhanced frontend components and user interface';\r\n          \r\n          // Auto-create or update website pages\r\n          if (result?.pages && result.pages.length > 0) {\r\n            for (const page of result.pages) {\r\n              await createOrUpdateWebsitePage(page);\r\n            }\r\n          }\r\n          break;\r\n        case 'backend':\r\n          result = await executeBackendTask();\r\n          actionDescription = 'Improved backend services and API endpoints';\r\n          break;\r\n        case 'database':\r\n          result = await executeDatabaseTask();\r\n          actionDescription = 'Optimized database queries and schema';\r\n          break;\r\n        case 'testing':\r\n          result = await executeTestingTask();\r\n          actionDescription = 'Enhanced test coverage and quality assurance';\r\n          break;\r\n        case 'deployment':\r\n          result = await executeDeploymentTask();\r\n          actionDescription = 'Enhanced deployment pipelines and infrastructure';\r\n          break;\r\n      }\r\n\r\n      // Update agent status and stats\r\n      setAgents(prev => prev.map(a => \r\n        a.id === agent.id ? {\r\n          ...a,\r\n          status: 'active' as const,\r\n          lastAction: actionDescription,\r\n          tasksCompleted: a.tasksCompleted + 1,\r\n          successRate: Math.min(100, a.successRate + 0.1),\r\n          nextScheduledRun: calculateNextRun(agent.type)\r\n        } : a\r\n      ));\r\n\r\n      setTotalTasksCompleted(prev => prev + 1);\r\n\r\n      // Log successful autonomous action\r\n      await supabase.from('agent_memory').insert({\r\n        agent_id: agent.id,\r\n        goal: `Autonomous ${agent.type} task`,\r\n        context: { task_type: agent.type, system_status: systemStatus },\r\n        prompt: `Execute ${agent.type} task autonomously`,\r\n        response: JSON.stringify(result),\r\n        action_taken: actionDescription,\r\n        confidence: 0.95,\r\n        outcome: 'success'\r\n      });\r\n\r\n      toast({\r\n        title: \"Autonomous Action Completed\",\r\n        description: `${agent.name}: ${actionDescription}`,\r\n      });\r\n\r\n    } catch (error: unknown) {\r\n      console.error(`Agent ${agent.id} task failed:`, error);\r\n      \r\n      setAgents(prev => prev.map(a => \r\n        a.id === agent.id ? {\r\n          ...a,\r\n          status: 'error' as const,\r\n          lastAction: `Error: ${error.message}`,\r\n          successRate: Math.max(0, a.successRate - 1),\r\n          nextScheduledRun: calculateNextRun(agent.type, true)\r\n        } : a\r\n      ));\r\n\r\n      // Try to get GPT assistance for complex problems\r\n      await seekGPTAssistance(agent, error, systemHealth, agents);\r\n    }\r\n  };\r\n\r\n  // Autonomous agent scheduler\r\n  useEffect(() => {\r\n    if (systemStatus !== 'autonomous') return;\r\n\r\n    const interval = setInterval(() => {\r\n      agents.forEach(agent => {\r\n        if (agent.status === 'active' && new Date(agent.nextScheduledRun) <= new Date()) {\r\n          executeAgentTask(agent);\r\n        }\r\n      });\r\n    }, 60000); // Check every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [agents, systemStatus]);\r\n\r\n  // Initialize agents on mount\r\n  useEffect(() => {\r\n    setAgents(initializeAgents());\r\n  }, [initializeAgents]);\r\n\r\n  const getSystemStats = (): SystemStats => {\r\n    const activeAgents = agents.filter(a => a.status === 'active').length;\r\n    const averageSuccessRate = agents.reduce((sum, a) => sum + a.successRate, 0) / agents.length;\r\n    const totalTasks = agents.reduce((sum, a) => sum + a.tasksCompleted, 0);\r\n\r\n    return {\r\n      active_agents: activeAgents,\r\n      total_agents: agents.length,\r\n      average_success_rate: Math.round(averageSuccessRate),\r\n      total_tasks_completed: totalTasks,\r\n      system_status: systemStatus,\r\n      uptime_hours: Math.round((Date.now() - new Date().setHours(0, 0, 0, 0)) / (1000 * 60 * 60))\r\n    };\r\n  };\r\n\r\n  // Website page creation and updating functionality\r\n  const createOrUpdateWebsitePage = async (pageData: {\r\n    name: string;\r\n    path: string;\r\n    component: string;\r\n    content: string;\r\n    type: 'page' | 'component' | 'layout';\r\n  }) => {\r\n    try {\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // Determine the correct file path based on type\r\n      let filePath: string;\r\n      switch (pageData.type) {\r\n        case 'page':\r\n          filePath = `src/pages/${pageData.component}.tsx`;\r\n          break;\r\n        case 'component':\r\n          filePath = `src/components/${pageData.component}.tsx`;\r\n          break;\r\n        case 'layout':\r\n          filePath = `src/components/layout/${pageData.component}.tsx`;\r\n          break;\r\n        default:\r\n          filePath = `src/pages/${pageData.component}.tsx`;\r\n      }\r\n      \r\n      // Ensure the directory exists\r\n      const dir = path.dirname(filePath);\r\n      if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir, { recursive: true });\r\n      }\r\n      \r\n      // Write the file\r\n      fs.writeFileSync(filePath, pageData.content, 'utf8');\r\n      \r\n      // Save to database\r\n      await supabase.from('website_pages').upsert({\r\n        name: pageData.name,\r\n        path: pageData.path,\r\n        component: pageData.component,\r\n        content: pageData.content,\r\n        status: 'active',\r\n        updated_at: new Date().toISOString()\r\n      });\r\n      \r\n      console.log(`‚úÖ Created/Updated website page: ${filePath}`);\r\n      \r\n    } catch (error) {\r\n      console.error(`‚ùå Error creating/updating website page: ${error}`);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Enhanced frontend task execution with page creation\r\n  const executeFrontendTask = async () => {\r\n    try {\r\n      // Generate sample pages that might be missing\r\n      const samplePages = [\r\n        {\r\n          name: 'User Management',\r\n          path: '/admin/users',\r\n          component: 'UserManagement',\r\n          type: 'page' as const,\r\n          content: `import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Users, Plus, Search, Edit, Trash2 } from 'lucide-react';\r\n\r\nconst UserManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Load users data\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">User Management</h1>\r\n          <p className=\"text-muted-foreground\">Manage system users and permissions</p>\r\n        </div>\r\n        <Button>\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          Add User\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Users</CardTitle>\r\n          <CardDescription>Manage all system users</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Search users...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"max-w-sm\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"space-y-2\">\r\n              {users.length === 0 && !loading && (\r\n                <p className=\"text-muted-foreground\">No users found</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;`\r\n        },\r\n        {\r\n          name: 'Settings Dashboard',\r\n          path: '/admin/settings',\r\n          component: 'SettingsDashboard',\r\n          type: 'page' as const,\r\n          content: `import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Settings, Shield, Database, Bell, Globe } from 'lucide-react';\r\n\r\nconst SettingsDashboard = () => {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\r\n        <p className=\"text-muted-foreground\">Configure system settings and preferences</p>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Shield className=\"h-5 w-5 mr-2\" />\r\n              Security\r\n            </CardTitle>\r\n            <CardDescription>Manage security settings and permissions</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Database className=\"h-5 w-5 mr-2\" />\r\n              Database\r\n            </CardTitle>\r\n            <CardDescription>Database configuration and maintenance</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center\">\r\n              <Bell className=\"h-5 w-5 mr-2\" />\r\n              Notifications\r\n            </CardTitle>\r\n            <CardDescription>Configure notification preferences</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button variant=\"outline\" className=\"w-full\">Configure</Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsDashboard;`\r\n        }\r\n      ];\r\n\r\n      return {\r\n        success: true,\r\n        pages: samplePages,\r\n        message: 'Frontend improvements completed with new pages created'\r\n      };\r\n    } catch (error) {\r\n      console.error('Frontend task execution failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    agents,\r\n    systemStatus,\r\n    setSystemStatus,\r\n    totalTasksCompleted,\r\n    executeAgentTask,\r\n    getSystemStats,\r\n    initializeAgents: () => setAgents(initializeAgents())\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useAutonomousIntelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useContinuousAgentManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useGPTAssistance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useN8NIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\autonomous\\useRealtimeUIOptimization.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'executeOptimization'. Either include it or remove the dependency array.","line":110,"column":6,"nodeType":"ArrayExpression","endLine":110,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [isOptimizing, fetchUserBehaviorData, optimizationRules, executeOptimization]","fix":{"range":[3398,3454],"text":"[isOptimizing, fetchUserBehaviorData, optimizationRules, executeOptimization]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useUserBehaviorData } from '@/hooks/analytics/useUserBehaviorData';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface UIOptimizationRule {\r\n  id: string;\r\n  trigger: string;\r\n  condition: string;\r\n  action: string;\r\n  impact_score: number;\r\n  active: boolean;\r\n}\r\n\r\ninterface UIChange {\r\n  id: string;\r\n  type: 'color' | 'layout' | 'typography' | 'spacing' | 'animation';\r\n  target_element: string;\r\n  change_description: string;\r\n  css_changes: Record<string, string>;\r\n  ab_test_group?: string;\r\n  performance_impact: number;\r\n  user_feedback_score?: number;\r\n  applied_at: string;\r\n  reverted_at?: string;\r\n}\r\n\r\nexport const useRealtimeUIOptimization = () => {\r\n  const { toast } = useToast();\r\n  const { fetchUserBehaviorData } = useUserBehaviorData();\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const [appliedChanges, setAppliedChanges] = useState<UIChange[]>([]);\r\n  const [optimizationRules, setOptimizationRules] = useState<UIOptimizationRule[]>([]);\r\n\r\n  // Load optimization rules\r\n  useEffect(() => {\r\n    loadOptimizationRules();\r\n  }, []);\r\n\r\n  const loadOptimizationRules = async () => {\r\n    // Mock optimization rules - in production these would come from the database\r\n    const rules: UIOptimizationRule[] = [\r\n      {\r\n        id: '1',\r\n        trigger: 'low_engagement',\r\n        condition: 'user_engagement < 80',\r\n        action: 'optimize_button_colors',\r\n        impact_score: 8.5,\r\n        active: true\r\n      },\r\n      {\r\n        id: '2',\r\n        trigger: 'high_bounce_rate',\r\n        condition: 'page_bounce_rate > 60',\r\n        action: 'improve_visual_hierarchy',\r\n        impact_score: 7.2,\r\n        active: true\r\n      },\r\n      {\r\n        id: '3',\r\n        trigger: 'slow_interaction',\r\n        condition: 'avg_interaction_time > 2000ms',\r\n        action: 'optimize_animations',\r\n        impact_score: 6.8,\r\n        active: true\r\n      }\r\n    ];\r\n    setOptimizationRules(rules);\r\n  };\r\n\r\n  // Real-time behavior analysis and optimization\r\n  const analyzeAndOptimize = useCallback(async () => {\r\n    if (!isOptimizing) return;\r\n\r\n    try {\r\n      const behaviorData = await fetchUserBehaviorData(\r\n        new Date(Date.now() - 3600000).toISOString() // Last hour\r\n      );\r\n\r\n      if (!behaviorData) return;\r\n\r\n      // Analyze metrics and trigger optimizations\r\n      const { sessionMetrics, featureUsage, heatmapData } = behaviorData;\r\n      \r\n      // Check if unknown optimization rules are triggered\r\n      for (const rule of optimizationRules) {\r\n        if (!rule.active) continue;\r\n\r\n        let shouldTrigger = false;\r\n\r\n        switch (rule.trigger) {\r\n          case 'low_engagement':\r\n            shouldTrigger = sessionMetrics.avgSessionDuration < 120; // Less than 2 minutes\r\n            break;\r\n          case 'high_bounce_rate':\r\n            shouldTrigger = sessionMetrics.activeUsers < 5; // Low active users\r\n            break;\r\n          case 'slow_interaction':\r\n            shouldTrigger = sessionMetrics.avgPageViews < 3; // Low page views\r\n            break;\r\n        }\r\n\r\n        if (shouldTrigger) {\r\n          await executeOptimization(rule, behaviorData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in UI optimization analysis:', error);\r\n    }\r\n  }, [isOptimizing, optimizationRules, fetchUserBehaviorData]);\r\n\r\n  // Execute specific optimization\r\n  const executeOptimization = async (rule: UIOptimizationRule, behaviorData: unknown) => {\r\n    const change: UIChange = {\r\n      id: Date.now().toString(),\r\n      type: getOptimizationType(rule.action),\r\n      target_element: getTargetElement(rule.action),\r\n      change_description: getChangeDescription(rule.action),\r\n      css_changes: generateCSSChanges(rule.action),\r\n      performance_impact: rule.impact_score,\r\n      applied_at: new Date().toISOString()\r\n    };\r\n\r\n    // Apply the change to the DOM\r\n    applyUIChange(change);\r\n    \r\n    // Store in state\r\n    setAppliedChanges(prev => [change, ...prev.slice(0, 9)]); // Keep last 10 changes\r\n\r\n    // Log to database for tracking\r\n    await logUIOptimization(change, rule, behaviorData);\r\n\r\n    toast({\r\n      title: \"UI Optimized\",\r\n      description: change.change_description,\r\n      duration: 3000,\r\n    });\r\n  };\r\n\r\n  // Apply UI changes to the DOM\r\n  const applyUIChange = (change: UIChange) => {\r\n    const elements = document.querySelectorAll(change.target_element);\r\n    \r\n    elements.forEach(element => {\r\n      Object.entries(change.css_changes).forEach(([property, value]) => {\r\n        (element as HTMLElement).style.setProperty(property, value);\r\n      });\r\n    });\r\n  };\r\n\r\n  // Revert a specific change\r\n  const revertUIChange = useCallback((changeId: string) => {\r\n    const change = appliedChanges.find(c => c.id === changeId);\r\n    if (!change) return;\r\n\r\n    const elements = document.querySelectorAll(change.target_element);\r\n    \r\n    elements.forEach(element => {\r\n      Object.keys(change.css_changes).forEach(property => {\r\n        (element as HTMLElement).style.removeProperty(property);\r\n      });\r\n    });\r\n\r\n    setAppliedChanges(prev => \r\n      prev.map(c => \r\n        c.id === changeId \r\n          ? { ...c, reverted_at: new Date().toISOString() }\r\n          : c\r\n      )\r\n    );\r\n\r\n    toast({\r\n      title: \"Change Reverted\",\r\n      description: `Reverted: ${change.change_description}`,\r\n      duration: 2000,\r\n    });\r\n  }, [appliedChanges, toast]);\r\n\r\n  // Helper functions\r\n  const getOptimizationType = (action: string): UIChange['type'] => {\r\n    if (action.includes('color')) return 'color';\r\n    if (action.includes('layout') || action.includes('hierarchy')) return 'layout';\r\n    if (action.includes('animation')) return 'animation';\r\n    if (action.includes('spacing')) return 'spacing';\r\n    return 'typography';\r\n  };\r\n\r\n  const getTargetElement = (action: string): string => {\r\n    switch (action) {\r\n      case 'optimize_button_colors': return '.btn, button';\r\n      case 'improve_visual_hierarchy': return 'h1, h2, h3, .card-title';\r\n      case 'optimize_animations': return '.transition, .animate';\r\n      default: return 'body';\r\n    }\r\n  };\r\n\r\n  const getChangeDescription = (action: string): string => {\r\n    switch (action) {\r\n      case 'optimize_button_colors': return 'Enhanced button contrast and hover states';\r\n      case 'improve_visual_hierarchy': return 'Adjusted heading sizes and spacing';\r\n      case 'optimize_animations': return 'Refined transition timing and easing';\r\n      default: return 'Applied UI optimization';\r\n    }\r\n  };\r\n\r\n  const generateCSSChanges = (action: string): Record<string, string> => {\r\n    switch (action) {\r\n      case 'optimize_button_colors':\r\n        return {\r\n          '--primary': 'hsl(220, 100%, 55%)',\r\n          '--primary-foreground': 'hsl(0, 0%, 100%)',\r\n          'transition': 'all 0.2s ease-in-out'\r\n        };\r\n      case 'improve_visual_hierarchy':\r\n        return {\r\n          'line-height': '1.6',\r\n          'margin-bottom': '1rem'\r\n        };\r\n      case 'optimize_animations':\r\n        return {\r\n          'transition-duration': '0.15s',\r\n          'transition-timing-function': 'cubic-bezier(0.4, 0, 0.2, 1)'\r\n        };\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n\r\n  // Log optimization to database  \r\n  const logUIOptimization = async (change: UIChange, rule: UIOptimizationRule, behaviorData: unknown) => {\r\n    try {\r\n      const insertData = {\r\n        decision_type: 'ui_optimization',\r\n        context: {\r\n          rule_triggered: rule,\r\n          behavior_data: behaviorData,\r\n          change_applied: change\r\n        },\r\n        decision: change,\r\n        confidence_score: rule.impact_score / 10\r\n      };\r\n      \r\n      await supabase.from('ai_decisions').insert(insertData as unknown);\r\n    } catch (error) {\r\n      console.error('Error logging UI optimization:', error);\r\n    }\r\n  };\r\n\r\n  // Start/stop optimization monitoring\r\n  const startOptimization = useCallback(() => {\r\n    setIsOptimizing(true);\r\n  }, []);\r\n\r\n  const stopOptimization = useCallback(() => {\r\n    setIsOptimizing(false);\r\n  }, []);\r\n\r\n  // Run optimization check every 30 seconds when active\r\n  useEffect(() => {\r\n    if (!isOptimizing) return;\r\n\r\n    const interval = setInterval(analyzeAndOptimize, 30000); // Every 30 seconds\r\n    \r\n    // Initial check\r\n    analyzeAndOptimize();\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isOptimizing, analyzeAndOptimize]);\r\n\r\n  return {\r\n    isOptimizing,\r\n    appliedChanges,\r\n    optimizationRules,\r\n    startOptimization,\r\n    stopOptimization,\r\n    revertUIChange,\r\n    executeOptimization: (rule: UIOptimizationRule) => executeOptimization(rule, null)\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMActivities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMCompanies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMContacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMEmails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMLeads.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMOpportunities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\crm\\useCRMProjects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\directory\\useDirectorySearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\driver\\useDriverActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\driver\\useDriverData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\driver\\useDriverForms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\login\\useLoginForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\market-research\\useMarketResearchAgents.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'executeMarketResearch'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [agents, executeMarketResearch, researchActive]","fix":{"range":[5101,5125],"text":"[agents, executeMarketResearch, researchActive]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { MarketResearchAgent, MarketIntelligenceData, CompetitiveAnalysis, MarketForecast } from '@/types/market-research';\r\n\r\nexport const useMarketResearchAgents = () => {\r\n  const [agents, setAgents] = useState<MarketResearchAgent[]>([]);\r\n  const [marketData, setMarketData] = useState<MarketIntelligenceData[]>([]);\r\n  const [competitorData, setCompetitorData] = useState<CompetitiveAnalysis[]>([]);\r\n  const [forecasts, setForecasts] = useState<MarketForecast[]>([]);\r\n  const [researchActive, setResearchActive] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  // Initialize market research agents\r\n  useEffect(() => {\r\n    const initializeAgents = () => {\r\n      const marketResearchAgents: MarketResearchAgent[] = [\r\n        {\r\n          id: 'market-intelligence-agent',\r\n          name: 'Market Intelligence Agent',\r\n          type: 'market_intelligence',\r\n          status: 'active',\r\n          last_research: new Date().toISOString(),\r\n          research_completed: 0,\r\n          success_rate: 100,\r\n          next_research_cycle: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n          focus_areas: ['pricing_trends', 'technology_analysis', 'industry_reports']\r\n        },\r\n        {\r\n          id: 'competitive-analysis-agent',\r\n          name: 'Competitive Analysis Agent',\r\n          type: 'competitive_analysis',\r\n          status: 'active',\r\n          last_research: new Date().toISOString(),\r\n          research_completed: 0,\r\n          success_rate: 100,\r\n          next_research_cycle: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(),\r\n          focus_areas: ['competitor_features', 'market_positioning', 'customer_feedback']\r\n        },\r\n        {\r\n          id: 'demand-forecasting-agent',\r\n          name: 'Market Demand & Forecasting Agent',\r\n          type: 'demand_forecasting',\r\n          status: 'active',\r\n          last_research: new Date().toISOString(),\r\n          research_completed: 0,\r\n          success_rate: 100,\r\n          next_research_cycle: new Date(Date.now() + 12 * 60 * 60 * 1000).toISOString(),\r\n          focus_areas: ['demand_prediction', 'capacity_analysis', 'route_optimization']\r\n        }\r\n      ];\r\n      \r\n      setAgents(marketResearchAgents);\r\n    };\r\n\r\n    initializeAgents();\r\n  }, []);\r\n\r\n  const executeMarketResearch = async (agent: MarketResearchAgent) => {\r\n    setAgents(prev => prev.map(a => \r\n      a.id === agent.id ? { ...a, status: 'researching' } : a\r\n    ));\r\n\r\n    try {\r\n      const { data: result, error } = await supabase.functions.invoke('autonomous-ai', {\r\n        body: {\r\n          action: 'market_research',\r\n          data: {\r\n            agent_type: agent.type,\r\n            focus_areas: agent.focus_areas,\r\n            research_depth: 'comprehensive'\r\n          }\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Update agent status and research data\r\n      setAgents(prev => prev.map(a => \r\n        a.id === agent.id ? {\r\n          ...a,\r\n          status: 'active',\r\n          research_completed: a.research_completed + 1,\r\n          last_research: new Date().toISOString(),\r\n          next_research_cycle: new Date(Date.now() + (agent.type === 'demand_forecasting' ? 12 : 24) * 60 * 60 * 1000).toISOString()\r\n        } : a\r\n      ));\r\n\r\n      // Process research results\r\n      if (result && result.research_data) {\r\n        switch (agent.type) {\r\n          case 'market_intelligence':\r\n            setMarketData(prev => [...prev, result.research_data]);\r\n            break;\r\n          case 'competitive_analysis':\r\n            setCompetitorData(prev => [...prev, result.research_data]);\r\n            break;\r\n          case 'demand_forecasting':\r\n            setForecasts(prev => [...prev, result.research_data]);\r\n            break;\r\n        }\r\n      }\r\n\r\n      toast({\r\n        title: \"Market Research Completed\",\r\n        description: `${agent.name}: Research cycle completed successfully`,\r\n      });\r\n\r\n    } catch (error: unknown) {\r\n      console.error(`Market research agent ${agent.id} failed:`, error);\r\n      \r\n      setAgents(prev => prev.map(a => \r\n        a.id === agent.id ? {\r\n          ...a,\r\n          status: 'active',\r\n          success_rate: Math.max(0, a.success_rate - 5),\r\n          next_research_cycle: new Date(Date.now() + 60 * 60 * 1000).toISOString() // Retry in 1 hour\r\n        } : a\r\n      ));\r\n\r\n      toast({\r\n        title: \"Research Error\",\r\n        description: `${agent.name}: ${error.message}`,\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Auto-execute research cycles\r\n  useEffect(() => {\r\n    if (!researchActive) return;\r\n\r\n    const interval = setInterval(() => {\r\n      agents.forEach(agent => {\r\n        if (agent.status === 'active' && new Date(agent.next_research_cycle) <= new Date()) {\r\n          executeMarketResearch(agent);\r\n        }\r\n      });\r\n    }, 60 * 60 * 1000); // Check every hour\r\n\r\n    return () => clearInterval(interval);\r\n  }, [agents, researchActive]);\r\n\r\n  const getMarketInsights = () => {\r\n    const recentData = marketData.slice(-5);\r\n    const recentCompetitors = competitorData.slice(-3);\r\n    const recentForecasts = forecasts.slice(-3);\r\n\r\n    return {\r\n      latest_intelligence: recentData,\r\n      competitive_landscape: recentCompetitors,\r\n      market_predictions: recentForecasts,\r\n      total_insights: marketData.length + competitorData.length + forecasts.length\r\n    };\r\n  };\r\n\r\n  const getActionableRecommendations = () => {\r\n    const allRecommendations = [\r\n      ...marketData.flatMap(d => d.actionable_items),\r\n      ...competitorData.flatMap(c => c.feature_gaps),\r\n      ...forecasts.flatMap(f => f.recommendations.immediate_actions)\r\n    ];\r\n\r\n    return allRecommendations.slice(0, 10); // Top 10 recommendations\r\n  };\r\n\r\n  return {\r\n    agents,\r\n    marketData,\r\n    competitorData,\r\n    forecasts,\r\n    researchActive,\r\n    setResearchActive,\r\n    executeMarketResearch,\r\n    getMarketInsights,\r\n    getActionableRecommendations\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\rates\\useRateQuote.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\sidebar\\useAdaptiveMenu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\sidebar\\useMenuRecommendations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\sidebar\\useRealTimeUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\sidebar\\useUserActivity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\testing\\useFeedbackSubmission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\testing\\usePerformanceMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\testing\\useTaskCompletion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\testing\\useTestingSession.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\testing\\useTestingTasks.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'defaultTasks'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [defaultTasks]","fix":{"range":[1536,1538],"text":"[defaultTasks]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { TestingTask } from '@/types/testing';\r\n\r\nexport const useTestingTasks = () => {\r\n  const [testingTasks, setTestingTasks] = useState<TestingTask[]>([]);\r\n\r\n  const defaultTasks: TestingTask[] = [\r\n    {\r\n      id: 'task-1',\r\n      name: 'Compare Multiple Quotes',\r\n      description: 'Select 3-5 quotes and use the comparison tool to analyze them',\r\n      expectedOutcome: 'User can easily identify the most profitable quote',\r\n      category: 'quote_comparison',\r\n      estimatedDuration: 10\r\n    },\r\n    {\r\n      id: 'task-2',\r\n      name: 'Analyze Profit Margins',\r\n      description: 'Use the margin analysis tab to review profit calculations',\r\n      expectedOutcome: 'User understands margin breakdown and profitability indicators',\r\n      category: 'margin_analysis',\r\n      estimatedDuration: 8\r\n    },\r\n    {\r\n      id: 'task-3',\r\n      name: 'Review AI Recommendations',\r\n      description: 'Examine AI-powered suggestions and apply one recommendation',\r\n      expectedOutcome: 'User finds AI recommendations helpful and actionable',\r\n      category: 'ai_recommendations',\r\n      estimatedDuration: 12\r\n    },\r\n    {\r\n      id: 'task-4',\r\n      name: 'Export Analysis Report',\r\n      description: 'Generate and export a PDF report with quote analysis',\r\n      expectedOutcome: 'User successfully exports comprehensive report',\r\n      category: 'quote_comparison',\r\n      estimatedDuration: 5\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setTestingTasks(defaultTasks);\r\n  }, []);\r\n\r\n  return { testingTasks };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\use-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAIConfidenceLogs.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":172,"column":6,"nodeType":"ArrayExpression","endLine":172,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLogs]","fix":{"range":[5164,5166],"text":"[fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { AIConfidenceLog, AIConfidenceFilters, AIConfidenceStats } from '@/types/ai-confidence';\r\nimport type { Json } from '@/integrations/supabase/types';\r\n\r\nexport const useAIConfidenceLogs = () => {\r\n  const [logs, setLogs] = useState<AIConfidenceLog[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const fetchLogs = async (filters?: AIConfidenceFilters) => {\r\n    setLoading(true);\r\n    try {\r\n      let query = supabase\r\n        .from('ai_confidence_logs')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (filters?.decision_type?.length) {\r\n        query = query.in('decision_type', filters.decision_type);\r\n      }\r\n\r\n      if (filters?.confidence_threshold !== undefined) {\r\n        query = query.lte('confidence_score', filters.confidence_threshold);\r\n      }\r\n\r\n      if (filters?.flagged_for_review !== undefined) {\r\n        query = query.eq('flagged_for_review', filters.flagged_for_review);\r\n      }\r\n\r\n      if (filters?.date_range) {\r\n        query = query\r\n          .gte('created_at', filters.date_range.start)\r\n          .lte('created_at', filters.date_range.end);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n      setLogs((data || []) as AIConfidenceLog[]);\r\n    } catch (error) {\r\n      console.error('Error fetching AI confidence logs:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch AI confidence logs\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createLog = async (logData: Omit<AIConfidenceLog, 'id' | 'created_at' | 'updated_at'>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('ai_confidence_logs')\r\n        .insert([logData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setLogs(prev => [data as AIConfidenceLog, ...prev]);\r\n      \r\n      toast({\r\n        title: \"Success\",\r\n        description: \"AI decision logged successfully\",\r\n      });\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating AI confidence log:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to log AI decision\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateLog = async (id: string, updates: Partial<AIConfidenceLog>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('ai_confidence_logs')\r\n        .update({ ...updates, updated_at: new Date().toISOString() })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setLogs(prev => prev.map(log => log.id === id ? data as AIConfidenceLog : log));\r\n      \r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Log updated successfully\",\r\n      });\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error updating log:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to update log\",\r\n        variant: \"destructive\",\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const flagForReview = async (id: string, flag: boolean): Promise<void> => {\r\n    await updateLog(id, { flagged_for_review: flag });\r\n  };\r\n\r\n  const markAsReviewed = async (id: string, reviewedBy: string): Promise<void> => {\r\n    await updateLog(id, {\r\n      reviewed_by: reviewedBy,\r\n      reviewed_at: new Date().toISOString(),\r\n      flagged_for_review: false\r\n    });\r\n  };\r\n\r\n  const getStats = (): AIConfidenceStats => {\r\n    const total_decisions = logs.length;\r\n    const avg_confidence = logs.length > 0 \r\n      ? logs.reduce((sum, log) => sum + log.confidence_score, 0) / logs.length \r\n      : 0;\r\n    \r\n    const flagged_count = logs.filter(log => log.flagged_for_review).length;\r\n    const low_confidence_count = logs.filter(log => log.confidence_score < 0.8).length;\r\n\r\n    const by_decision_type = logs.reduce((acc, log) => {\r\n      acc[log.decision_type] = (acc[log.decision_type] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    const confidence_distribution = {\r\n      high: logs.filter(log => log.confidence_score >= 0.8).length,\r\n      medium: logs.filter(log => log.confidence_score >= 0.6 && log.confidence_score < 0.8).length,\r\n      low: logs.filter(log => log.confidence_score < 0.6).length,\r\n    };\r\n\r\n    return {\r\n      total_decisions,\r\n      avg_confidence,\r\n      flagged_count,\r\n      low_confidence_count,\r\n      by_decision_type,\r\n      confidence_distribution\r\n    };\r\n  };\r\n\r\n  // Real-time subscription\r\n  useEffect(() => {\r\n    const channel = supabase\r\n      .channel('ai-confidence-logs-changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'ai_confidence_logs' },\r\n        () => fetchLogs()\r\n      )\r\n      .subscribe();\r\n\r\n    // Initial load\r\n    fetchLogs();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    logs,\r\n    loading,\r\n    fetchLogs,\r\n    createLog,\r\n    updateLog,\r\n    flagForReview,\r\n    markAsReviewed,\r\n    getStats\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAnalyticsTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAssetManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAutonomousAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAutonomousKnowledge.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateNewRules', 'loadKnowledgeBase', and 'runPatternAnalysis'. Either include them or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [generateNewRules, loadKnowledgeBase, runPatternAnalysis]","fix":{"range":[1279,1281],"text":"[generateNewRules, loadKnowledgeBase, runPatternAnalysis]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { KnowledgeRule, KnowledgePattern, KnowledgeVersion, PerformanceMetrics } from '@/types/knowledge-base';\r\n\r\nexport const useAutonomousKnowledge = () => {\r\n  const [knowledgeRules, setKnowledgeRules] = useState<KnowledgeRule[]>([]);\r\n  const [patterns, setPatterns] = useState<KnowledgePattern[]>([]);\r\n  const [versions, setVersions] = useState<KnowledgeVersion[]>([]);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics>({\r\n    efficiency_score: 0,\r\n    cost_savings: 0,\r\n    accuracy_improvement: 0,\r\n    decision_speed: 0,\r\n    error_reduction: 0\r\n  });\r\n  const [isLearning, setIsLearning] = useState(false);\r\n  const [lastAnalysis, setLastAnalysis] = useState<string | null>(null);\r\n  const [currentVersion, setCurrentVersion] = useState<KnowledgeVersion | null>(null);\r\n  const { toast } = useToast();\r\n\r\n  // Simulate real-time pattern discovery\r\n  useEffect(() => {\r\n    loadKnowledgeBase();\r\n    \r\n    const interval = setInterval(() => {\r\n      runPatternAnalysis();\r\n      generateNewRules();\r\n    }, 10 * 60 * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadKnowledgeBase = async () => {\r\n    try {\r\n      // Load knowledge rules\r\n      const { data: rules, error: rulesError } = await supabase\r\n        .from('ai_confidence_logs')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .limit(100);\r\n\r\n      if (rulesError) throw rulesError;\r\n\r\n      // Transform confidence logs into knowledge rules\r\n      const transformedRules: KnowledgeRule[] = (rules || []).map(log => ({\r\n        id: log.id,\r\n        rule_type: 'routing' as const,\r\n        name: `Rule for ${log.decision_type}`,\r\n        description: log.reasoning || 'Autonomous rule',\r\n        conditions: (log.context && typeof log.context === 'object' && log.context !== null) \r\n          ? log.context as Record<string, unknown> \r\n          : {},\r\n        actions: (log.decision_data && typeof log.decision_data === 'object' && log.decision_data !== null) \r\n          ? log.decision_data as Record<string, unknown> \r\n          : {},\r\n        confidence_score: log.confidence_score || 0,\r\n        performance_impact: Math.random() * 10,\r\n        created_at: log.created_at,\r\n        updated_at: log.updated_at,\r\n        version: 1,\r\n        is_active: !log.flagged_for_review,\r\n        auto_generated: true,\r\n        success_rate: log.confidence_score ? log.confidence_score * 100 : 80,\r\n        usage_count: Math.floor(Math.random() * 50)\r\n      }));\r\n\r\n      setKnowledgeRules(transformedRules);\r\n\r\n      // Generate mock performance metrics\r\n      setPerformanceMetrics({\r\n        efficiency_score: 85 + Math.random() * 10,\r\n        cost_savings: Math.random() * 15000,\r\n        accuracy_improvement: Math.random() * 20,\r\n        decision_speed: 150 + Math.random() * 100,\r\n        error_reduction: Math.random() * 30\r\n      });\r\n\r\n      setLastAnalysis(new Date().toISOString());\r\n\r\n    } catch (error) {\r\n      console.error('Error loading knowledge base:', error);\r\n      toast({\r\n        title: \"Knowledge Base Error\",\r\n        description: \"Failed to load autonomous knowledge base\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const runPatternAnalysis = async () => {\r\n    setIsLearning(true);\r\n    try {\r\n      // Fetch recent AI decisions for pattern analysis\r\n      const { data: decisions, error } = await supabase\r\n        .from('ai_decisions')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .limit(50);\r\n\r\n      if (error) throw error;\r\n\r\n      // Analyze patterns from decisions\r\n      const newPatterns: KnowledgePattern[] = [];\r\n      \r\n      if (decisions && decisions.length > 0) {\r\n        // Group decisions by type\r\n        const decisionGroups = decisions.reduce((acc: Record<string, typeof decisions>, decision) => {\r\n          if (!acc[decision.decision_type]) {\r\n            acc[decision.decision_type] = [];\r\n          }\r\n          acc[decision.decision_type].push(decision);\r\n          return acc;\r\n        }, {});\r\n\r\n        // Generate patterns for each group\r\n        Object.entries(decisionGroups).forEach(([type, groupDecisions]) => {\r\n          if (groupDecisions.length >= 3) {\r\n            newPatterns.push({\r\n              id: `pattern-${Date.now()}-${type}`,\r\n              pattern_type: type,\r\n              data_points: groupDecisions.map(d => d.decision),\r\n              confidence: groupDecisions.reduce((sum, d) => sum + (d.confidence_score || 0), 0) / groupDecisions.length,\r\n              frequency: groupDecisions.length,\r\n              impact_score: Math.random() * 10,\r\n              discovered_at: new Date().toISOString(),\r\n              rule_generated: false\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      setPatterns(newPatterns);\r\n      setLastAnalysis(new Date().toISOString());\r\n\r\n      toast({\r\n        title: \"Pattern Analysis Complete\",\r\n        description: `Discovered ${newPatterns.length} new behavioral patterns`,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error in pattern analysis:', error);\r\n      toast({\r\n        title: \"Analysis Error\",\r\n        description: \"Failed to complete pattern analysis\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLearning(false);\r\n    }\r\n  };\r\n\r\n  const generateNewRules = async () => {\r\n    try {\r\n      const newRules: KnowledgeRule[] = patterns\r\n        .filter(pattern => !pattern.rule_generated && pattern.confidence > 0.7)\r\n        .map(pattern => ({\r\n          id: `rule-${Date.now()}-${pattern.id}`,\r\n          rule_type: 'routing' as const,\r\n          name: `Auto-generated rule for ${pattern.pattern_type}`,\r\n          description: `Rule generated from pattern analysis with ${pattern.frequency} occurrences`,\r\n          conditions: { pattern_type: pattern.pattern_type, min_confidence: pattern.confidence },\r\n          actions: { apply_pattern: true, confidence_threshold: pattern.confidence },\r\n          confidence_score: pattern.confidence,\r\n          performance_impact: pattern.impact_score,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          version: 1,\r\n          is_active: true,\r\n          auto_generated: true,\r\n          success_rate: Math.round(pattern.confidence * 100),\r\n          usage_count: 0\r\n        }));\r\n\r\n      if (newRules.length > 0) {\r\n        setKnowledgeRules(prev => [...prev, ...newRules]);\r\n        \r\n        // Mark patterns as having rules generated\r\n        setPatterns(prev => prev.map(p => \r\n          newRules.some(r => r.name.includes(p.pattern_type)) \r\n            ? { ...p, rule_generated: true }\r\n            : p\r\n        ));\r\n\r\n        toast({\r\n          title: \"Rules Generated\",\r\n          description: `Generated ${newRules.length} new autonomous rules`,\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error generating rules:', error);\r\n      toast({\r\n        title: \"Rule Generation Error\",\r\n        description: \"Failed to generate new rules\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const createKnowledgeVersion = async () => {\r\n    const newVersion: KnowledgeVersion = {\r\n      id: `version-${Date.now()}`,\r\n      version_number: versions.length + 1,\r\n      changes_summary: `Version ${versions.length + 1} with ${knowledgeRules.length} rules`,\r\n      performance_before: performanceMetrics.efficiency_score - 5,\r\n      performance_after: performanceMetrics.efficiency_score,\r\n      created_at: new Date().toISOString(),\r\n      is_active: true,\r\n      rules_count: knowledgeRules.length\r\n    };\r\n\r\n    setVersions(prev => prev.map(v => ({ ...v, is_active: false })).concat(newVersion));\r\n    setCurrentVersion(newVersion);\r\n\r\n    toast({\r\n      title: \"Version Created\",\r\n      description: `Knowledge base version ${newVersion.version_number} created`,\r\n    });\r\n  };\r\n\r\n  const rollbackToVersion = async (version: KnowledgeVersion) => {\r\n    setVersions(prev => prev.map(v => ({ ...v, is_active: v.id === version.id })));\r\n    setCurrentVersion(version);\r\n\r\n    toast({\r\n      title: \"Rollback Complete\",\r\n      description: `Rolled back to version ${version.version_number}`,\r\n    });\r\n  };\r\n\r\n  const toggleRule = async (ruleId: string) => {\r\n    setKnowledgeRules(prev => prev.map(rule => \r\n      rule.id === ruleId ? { ...rule, is_active: !rule.is_active } : rule\r\n    ));\r\n  };\r\n\r\n  const optimizeRoute = (routeData: Record<string, unknown>) => {\r\n    // Type-safe access to route data properties\r\n    const fuelEfficiency = routeData && typeof routeData === 'object' && routeData !== null && 'fuel_efficiency' in routeData \r\n      ? routeData.fuel_efficiency as number \r\n      : 25; // default value\r\n    \r\n    const distance = routeData && typeof routeData === 'object' && routeData !== null && 'distance' in routeData \r\n      ? routeData.distance as number \r\n      : 100; // default value\r\n\r\n    const trafficFactor = routeData && typeof routeData === 'object' && routeData !== null && 'traffic_factor' in routeData \r\n      ? routeData.traffic_factor as number \r\n      : 1.2; // default value\r\n\r\n    // Apply knowledge rules for route optimization\r\n    const applicableRules = knowledgeRules.filter(rule => \r\n      rule.rule_type === 'routing' && rule.is_active\r\n    );\r\n\r\n    let optimizedDistance = distance;\r\n    let optimizedFuelCost = (distance / fuelEfficiency) * 3.5; // Base fuel cost\r\n\r\n    applicableRules.forEach(rule => {\r\n      if (rule.confidence_score > 0.8) {\r\n        optimizedDistance *= 0.95; // 5% reduction\r\n        optimizedFuelCost *= 0.92; // 8% reduction\r\n      }\r\n    });\r\n\r\n    return {\r\n      original_distance: distance,\r\n      optimized_distance: Math.round(optimizedDistance),\r\n      fuel_savings: Math.round((distance / fuelEfficiency - optimizedDistance / fuelEfficiency) * 3.5),\r\n      time_savings: Math.round((distance - optimizedDistance) / 60 * trafficFactor),\r\n      rules_applied: applicableRules.length\r\n    };\r\n  };\r\n\r\n  return {\r\n    knowledgeRules,\r\n    patterns,\r\n    versions,\r\n    performanceMetrics,\r\n    isLearning,\r\n    lastAnalysis,\r\n    currentVersion,\r\n    discoveredPatterns: patterns, // Alias for compatibility\r\n    knowledgeVersions: versions, // Alias for compatibility\r\n    setIsLearning,\r\n    loadKnowledgeBase,\r\n    runPatternAnalysis,\r\n    generateNewRules,\r\n    createKnowledgeVersion,\r\n    rollbackToVersion,\r\n    toggleRule,\r\n    optimizeRoute\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useAutonomousSidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useCRM.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAllCRMData'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAllCRMData, user]","fix":{"range":[2053,2059],"text":"[fetchAllCRMData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { useCRMCompanies } from './crm/useCRMCompanies';\r\nimport { useCRMContacts } from './crm/useCRMContacts';\r\nimport { useCRMLeads } from './crm/useCRMLeads';\r\nimport { useCRMOpportunities } from './crm/useCRMOpportunities';\r\nimport { useCRMProjects } from './crm/useCRMProjects';\r\nimport { useCRMEvents } from './crm/useCRMEvents';\r\nimport { useCRMEmails } from './crm/useCRMEmails';\r\nimport { useCRMActivities } from './crm/useCRMActivities';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { \r\n  mockCompanies, \r\n  enrichedContacts, \r\n  enrichedLeads, \r\n  enrichedOpportunities, \r\n  enrichedProjects, \r\n  enrichedEvents, \r\n  enrichedEmails, \r\n  enrichedActivities \r\n} from '@/data/mockCRMData';\r\n\r\nexport const useCRM = () => {\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const companies = useCRMCompanies();\r\n  const contacts = useCRMContacts();\r\n  const leads = useCRMLeads();\r\n  const opportunities = useCRMOpportunities();\r\n  const projects = useCRMProjects();\r\n  const events = useCRMEvents();\r\n  const emails = useCRMEmails();\r\n  const activities = useCRMActivities();\r\n\r\n  const fetchAllCRMData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // For demo purposes, use mock data immediately\r\n      // In production, you would fetch from Supabase\r\n      companies.setCompanies(mockCompanies);\r\n      contacts.setContacts(enrichedContacts);\r\n      leads.setLeads(enrichedLeads);\r\n      opportunities.setOpportunities(enrichedOpportunities);\r\n      projects.setProjects(enrichedProjects);\r\n      events.setEvents(enrichedEvents);\r\n      emails.setEmails(enrichedEmails);\r\n      activities.setActivities(enrichedActivities);\r\n\r\n      // Simulate API delay for realistic loading state\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    } catch (error) {\r\n      console.error('Error loading CRM data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllCRMData();\r\n  }, [user]);\r\n\r\n  return {\r\n    // Data\r\n    companies: companies.companies.length > 0 ? companies.companies : mockCompanies,\r\n    contacts: contacts.contacts.length > 0 ? contacts.contacts : enrichedContacts,\r\n    leads: leads.leads.length > 0 ? leads.leads : enrichedLeads,\r\n    opportunities: opportunities.opportunities.length > 0 ? opportunities.opportunities : enrichedOpportunities,\r\n    projects: projects.projects.length > 0 ? projects.projects : enrichedProjects,\r\n    events: events.events.length > 0 ? events.events : enrichedEvents,\r\n    emails: emails.emails.length > 0 ? emails.emails : enrichedEmails,\r\n    activities: activities.activities.length > 0 ? activities.activities : enrichedActivities,\r\n    loading,\r\n    \r\n    // Operations\r\n    createCompany: companies.createCompany,\r\n    updateCompany: companies.updateCompany,\r\n    deleteCompany: companies.deleteCompany,\r\n    createContact: contacts.createContact,\r\n    updateContact: contacts.updateContact,\r\n    createLead: leads.createLead,\r\n    updateLead: leads.updateLead,\r\n    createOpportunity: opportunities.createOpportunity,\r\n    updateOpportunity: opportunities.updateOpportunity,\r\n    createProject: projects.createProject,\r\n    updateProject: projects.updateProject,\r\n    createEvent: events.createEvent,\r\n    updateEvent: events.updateEvent,\r\n    createEmail: emails.createEmail,\r\n    createActivity: activities.createActivity,\r\n    \r\n    // Refresh\r\n    fetchAllCRMData\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useCodingAssistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useDashboardData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useDemandForecast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useEntitlement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useFinancialsManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useFlag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\usePerformanceOptimization.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'calculateSystemHealth', 'executeOptimization', and 'generateOptimizationAction'. Either include them or remove the dependency array.","line":254,"column":6,"nodeType":"ArrayExpression","endLine":254,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [calculateSystemHealth, executeOptimization, generateOptimizationAction, metrics, optimizationActive]","fix":{"range":[9238,9267],"text":"[calculateSystemHealth, executeOptimization, generateOptimizationAction, metrics, optimizationActive]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface PerformanceMetrics {\r\n  cpu_usage: number;\r\n  memory_usage: number;\r\n  response_time_ms: number;\r\n  throughput_per_second: number;\r\n  error_rate: number;\r\n  ai_decision_latency: number;\r\n}\r\n\r\ninterface OptimizationAction {\r\n  id: string;\r\n  type: 'scale_up' | 'scale_down' | 'cache_optimize' | 'algorithm_switch' | 'resource_rebalance';\r\n  description: string;\r\n  trigger_condition: string;\r\n  impact_score: number;\r\n  timestamp: string;\r\n  success: boolean;\r\n}\r\n\r\ninterface PerformanceThresholds {\r\n  cpu_warning: number;\r\n  cpu_critical: number;\r\n  memory_warning: number;\r\n  memory_critical: number;\r\n  response_time_warning: number;\r\n  response_time_critical: number;\r\n  error_rate_warning: number;\r\n  error_rate_critical: number;\r\n}\r\n\r\nexport const usePerformanceOptimization = () => {\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\r\n    cpu_usage: 45,\r\n    memory_usage: 62,\r\n    response_time_ms: 150,\r\n    throughput_per_second: 85,\r\n    error_rate: 2.1,\r\n    ai_decision_latency: 89\r\n  });\r\n\r\n  const [thresholds, setThresholds] = useState<PerformanceThresholds>({\r\n    cpu_warning: 70,\r\n    cpu_critical: 85,\r\n    memory_warning: 75,\r\n    memory_critical: 90,\r\n    response_time_warning: 200,\r\n    response_time_critical: 500,\r\n    error_rate_warning: 5,\r\n    error_rate_critical: 10\r\n  });\r\n\r\n  const [optimizationActions, setOptimizationActions] = useState<OptimizationAction[]>([]);\r\n  const [optimizationActive, setOptimizationActive] = useState(true);\r\n  const [systemHealth, setSystemHealth] = useState<'optimal' | 'warning' | 'critical'>('optimal');\r\n  const { toast } = useToast();\r\n\r\n  const generateOptimizationAction = (metrics: PerformanceMetrics): OptimizationAction | null => {\r\n    const now = new Date().toISOString();\r\n    \r\n    // CPU optimization\r\n    if (metrics.cpu_usage > thresholds.cpu_critical) {\r\n      return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        type: 'scale_up',\r\n        description: 'Scaling up CPU resources due to critical load',\r\n        trigger_condition: `CPU usage: ${metrics.cpu_usage}% > ${thresholds.cpu_critical}%`,\r\n        impact_score: 8.5,\r\n        timestamp: now,\r\n        success: Math.random() > 0.1 // 90% success rate\r\n      };\r\n    }\r\n\r\n    // Memory optimization\r\n    if (metrics.memory_usage > thresholds.memory_critical) {\r\n      return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        type: 'resource_rebalance',\r\n        description: 'Rebalancing memory allocation and clearing unused caches',\r\n        trigger_condition: `Memory usage: ${metrics.memory_usage}% > ${thresholds.memory_critical}%`,\r\n        impact_score: 7.8,\r\n        timestamp: now,\r\n        success: Math.random() > 0.15 // 85% success rate\r\n      };\r\n    }\r\n\r\n    // Response time optimization\r\n    if (metrics.response_time_ms > thresholds.response_time_critical) {\r\n      return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        type: 'algorithm_switch',\r\n        description: 'Switching to faster algorithm variant for improved response times',\r\n        trigger_condition: `Response time: ${metrics.response_time_ms}ms > ${thresholds.response_time_critical}ms`,\r\n        impact_score: 6.9,\r\n        timestamp: now,\r\n        success: Math.random() > 0.2 // 80% success rate\r\n      };\r\n    }\r\n\r\n    // Cache optimization for moderate performance issues\r\n    if (metrics.response_time_ms > thresholds.response_time_warning || \r\n        metrics.ai_decision_latency > 120) {\r\n      return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        type: 'cache_optimize',\r\n        description: 'Optimizing cache strategy and preloading frequently accessed data',\r\n        trigger_condition: `Response time or AI latency above warning thresholds`,\r\n        impact_score: 5.2,\r\n        timestamp: now,\r\n        success: Math.random() > 0.25 // 75% success rate\r\n      };\r\n    }\r\n\r\n    // Scale down if system is over-provisioned\r\n    if (metrics.cpu_usage < 20 && metrics.memory_usage < 30 && metrics.response_time_ms < 50) {\r\n      return {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        type: 'scale_down',\r\n        description: 'Scaling down resources to optimize cost efficiency',\r\n        trigger_condition: 'System under-utilized for extended period',\r\n        impact_score: 4.1,\r\n        timestamp: now,\r\n        success: Math.random() > 0.1 // 90% success rate\r\n      };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const executeOptimization = async (action: OptimizationAction): Promise<boolean> => {\r\n    try {\r\n      console.log(`Executing optimization: ${action.description}`);\r\n      \r\n      // Simulate optimization execution time\r\n      await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));\r\n      \r\n      if (action.success) {\r\n        // Apply performance improvements based on action type\r\n        setMetrics(prev => {\r\n          const improvement = action.impact_score / 10;\r\n          \r\n          switch (action.type) {\r\n            case 'scale_up':\r\n              return {\r\n                ...prev,\r\n                cpu_usage: Math.max(10, prev.cpu_usage - improvement * 15),\r\n                response_time_ms: Math.max(50, prev.response_time_ms - improvement * 30)\r\n              };\r\n            case 'resource_rebalance':\r\n              return {\r\n                ...prev,\r\n                memory_usage: Math.max(20, prev.memory_usage - improvement * 20),\r\n                cpu_usage: Math.max(10, prev.cpu_usage - improvement * 10)\r\n              };\r\n            case 'algorithm_switch':\r\n              return {\r\n                ...prev,\r\n                response_time_ms: Math.max(50, prev.response_time_ms - improvement * 40),\r\n                ai_decision_latency: Math.max(30, prev.ai_decision_latency - improvement * 25)\r\n              };\r\n            case 'cache_optimize':\r\n              return {\r\n                ...prev,\r\n                response_time_ms: Math.max(50, prev.response_time_ms - improvement * 20),\r\n                throughput_per_second: Math.min(150, prev.throughput_per_second + improvement * 10)\r\n              };\r\n            case 'scale_down':\r\n              return {\r\n                ...prev,\r\n                cpu_usage: Math.min(100, prev.cpu_usage + improvement * 5),\r\n                memory_usage: Math.min(100, prev.memory_usage + improvement * 5)\r\n              };\r\n            default:\r\n              return prev;\r\n          }\r\n        });\r\n\r\n        toast({\r\n          title: \"Autonomous Optimization\",\r\n          description: action.description,\r\n        });\r\n      }\r\n\r\n      setOptimizationActions(prev => [\r\n        { ...action, success: action.success },\r\n        ...prev.slice(0, 19) // Keep last 20 actions\r\n      ]);\r\n\r\n      return action.success;\r\n    } catch (error) {\r\n      console.error('Optimization execution failed:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const calculateSystemHealth = (metrics: PerformanceMetrics): 'optimal' | 'warning' | 'critical' => {\r\n    const criticalConditions = [\r\n      metrics.cpu_usage > thresholds.cpu_critical,\r\n      metrics.memory_usage > thresholds.memory_critical,\r\n      metrics.response_time_ms > thresholds.response_time_critical,\r\n      metrics.error_rate > thresholds.error_rate_critical\r\n    ];\r\n\r\n    const warningConditions = [\r\n      metrics.cpu_usage > thresholds.cpu_warning,\r\n      metrics.memory_usage > thresholds.memory_warning,\r\n      metrics.response_time_ms > thresholds.response_time_warning,\r\n      metrics.error_rate > thresholds.error_rate_warning\r\n    ];\r\n\r\n    if (criticalConditions.some(condition => condition)) {\r\n      return 'critical';\r\n    } else if (warningConditions.some(condition => condition)) {\r\n      return 'warning';\r\n    } else {\r\n      return 'optimal';\r\n    }\r\n  };\r\n\r\n  // Simulate real-time metrics updates\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setMetrics(prev => ({\r\n        cpu_usage: Math.max(5, Math.min(100, prev.cpu_usage + (Math.random() - 0.5) * 10)),\r\n        memory_usage: Math.max(10, Math.min(100, prev.memory_usage + (Math.random() - 0.5) * 8)),\r\n        response_time_ms: Math.max(30, Math.min(1000, prev.response_time_ms + (Math.random() - 0.5) * 50)),\r\n        throughput_per_second: Math.max(10, Math.min(200, prev.throughput_per_second + (Math.random() - 0.5) * 15)),\r\n        error_rate: Math.max(0, Math.min(20, prev.error_rate + (Math.random() - 0.5) * 2)),\r\n        ai_decision_latency: Math.max(20, Math.min(300, prev.ai_decision_latency + (Math.random() - 0.5) * 20))\r\n      }));\r\n    }, 3000); // Update every 3 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Autonomous optimization logic\r\n  useEffect(() => {\r\n    if (!optimizationActive) return;\r\n\r\n    const health = calculateSystemHealth(metrics);\r\n    setSystemHealth(health);\r\n\r\n    // Attempt optimization if system is not optimal\r\n    if (health !== 'optimal') {\r\n      const action = generateOptimizationAction(metrics);\r\n      if (action) {\r\n        // Execute optimization after a brief delay\r\n        setTimeout(() => executeOptimization(action), 1000);\r\n      }\r\n    }\r\n  }, [metrics, optimizationActive]);\r\n\r\n  const getOptimizationStats = () => {\r\n    const total = optimizationActions.length;\r\n    const successful = optimizationActions.filter(action => action.success).length;\r\n    const byType = optimizationActions.reduce((acc, action) => {\r\n      acc[action.type] = (acc[action.type] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    return {\r\n      total_optimizations: total,\r\n      successful_optimizations: successful,\r\n      success_rate: total > 0 ? (successful / total) * 100 : 0,\r\n      optimizations_by_type: byType,\r\n      avg_impact_score: total > 0 \r\n        ? optimizationActions.reduce((sum, action) => sum + action.impact_score, 0) / total \r\n        : 0\r\n    };\r\n  };\r\n\r\n  return {\r\n    metrics,\r\n    thresholds,\r\n    setThresholds,\r\n    optimizationActions,\r\n    optimizationActive,\r\n    setOptimizationActive,\r\n    systemHealth,\r\n    getOptimizationStats,\r\n    executeOptimization\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\usePredictiveScaling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useRealAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useRealtimeAgentUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useResourceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useScalingActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useSelfHealingAlerts.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'attemptSelfHealing' and 'healingAttempts'. Either include them or remove the dependency array.","line":187,"column":6,"nodeType":"ArrayExpression","endLine":187,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [alerts, attemptSelfHealing, healingActive, healingAttempts]","fix":{"range":[6053,6076],"text":"[alerts, attemptSelfHealing, healingActive, healingAttempts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useAlerts } from '@/hooks/useAlerts';\r\nimport type { Alert } from '@/types/alerts';\r\n\r\ninterface HealingStrategy {\r\n  name: string;\r\n  description: string;\r\n  applicable_categories: string[];\r\n  success_rate: number;\r\n  execution_time_ms: number;\r\n}\r\n\r\ninterface HealingAttempt {\r\n  alert_id: string;\r\n  strategy_name: string;\r\n  attempt_time: string;\r\n  success: boolean;\r\n  details: string;\r\n}\r\n\r\nconst HEALING_STRATEGIES: HealingStrategy[] = [\r\n  {\r\n    name: 'retry_operation',\r\n    description: 'Retry the failed operation with exponential backoff',\r\n    applicable_categories: ['system_error', 'performance'],\r\n    success_rate: 0.75,\r\n    execution_time_ms: 5000\r\n  },\r\n  {\r\n    name: 'fallback_algorithm',\r\n    description: 'Switch to alternative algorithm or method',\r\n    applicable_categories: ['ai_confidence', 'system_error'],\r\n    success_rate: 0.85,\r\n    execution_time_ms: 3000\r\n  },\r\n  {\r\n    name: 'resource_reallocation',\r\n    description: 'Reallocate system resources to resolve bottlenecks',\r\n    applicable_categories: ['performance'],\r\n    success_rate: 0.80,\r\n    execution_time_ms: 8000\r\n  },\r\n  {\r\n    name: 'parameter_adjustment',\r\n    description: 'Automatically adjust system parameters',\r\n    applicable_categories: ['ai_confidence', 'performance'],\r\n    success_rate: 0.70,\r\n    execution_time_ms: 2000\r\n  },\r\n  {\r\n    name: 'cache_refresh',\r\n    description: 'Clear and refresh system caches',\r\n    applicable_categories: ['system_error', 'performance'],\r\n    success_rate: 0.65,\r\n    execution_time_ms: 1500\r\n  }\r\n];\r\n\r\nexport const useSelfHealingAlerts = () => {\r\n  const [healingAttempts, setHealingAttempts] = useState<HealingAttempt[]>([]);\r\n  const [healingActive, setHealingActive] = useState(true);\r\n  const [healingStats, setHealingStats] = useState({\r\n    total_attempts: 0,\r\n    successful_healings: 0,\r\n    failed_healings: 0,\r\n    success_rate: 0,\r\n    avg_healing_time: 0\r\n  });\r\n  const { toast } = useToast();\r\n  const { alerts, updateAlert } = useAlerts();\r\n\r\n  const selectBestStrategy = (alert: Alert): HealingStrategy | null => {\r\n    const applicableStrategies = HEALING_STRATEGIES.filter(strategy =>\r\n      strategy.applicable_categories.includes(alert.category)\r\n    );\r\n\r\n    if (applicableStrategies.length === 0) return null;\r\n\r\n    // Sort by success rate and select the best one\r\n    return applicableStrategies.sort((a, b) => b.success_rate - a.success_rate)[0];\r\n  };\r\n\r\n  const executeHealingStrategy = async (alert: Alert, strategy: HealingStrategy): Promise<boolean> => {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Simulate healing strategy execution\r\n      await new Promise(resolve => setTimeout(resolve, strategy.execution_time_ms));\r\n      \r\n      // Simulate success/failure based on strategy success rate\r\n      const success = Math.random() < strategy.success_rate;\r\n      \r\n      const attempt: HealingAttempt = {\r\n        alert_id: alert.id,\r\n        strategy_name: strategy.name,\r\n        attempt_time: new Date().toISOString(),\r\n        success,\r\n        details: success \r\n          ? `Successfully resolved using ${strategy.description}`\r\n          : `Failed to resolve: ${strategy.description} did not work`\r\n      };\r\n\r\n      setHealingAttempts(prev => [attempt, ...prev.slice(0, 49)]); // Keep last 50\r\n\r\n      if (success) {\r\n        // Mark alert as resolved\r\n        await updateAlert(alert.id, {\r\n          status: 'resolved',\r\n          resolved_at: new Date().toISOString()\r\n        });\r\n\r\n        toast({\r\n          title: \"Self-Healing Success\",\r\n          description: `Automatically resolved: ${alert.title}`,\r\n        });\r\n      }\r\n\r\n      // Update stats\r\n      setHealingStats(prev => {\r\n        const newTotal = prev.total_attempts + 1;\r\n        const newSuccessful = prev.successful_healings + (success ? 1 : 0);\r\n        const newFailed = prev.failed_healings + (success ? 0 : 1);\r\n        const newSuccessRate = newTotal > 0 ? (newSuccessful / newTotal) * 100 : 0;\r\n        const executionTime = Date.now() - startTime;\r\n        const newAvgTime = (prev.avg_healing_time * prev.total_attempts + executionTime) / newTotal;\r\n\r\n        return {\r\n          total_attempts: newTotal,\r\n          successful_healings: newSuccessful,\r\n          failed_healings: newFailed,\r\n          success_rate: newSuccessRate,\r\n          avg_healing_time: newAvgTime\r\n        };\r\n      });\r\n\r\n      return success;\r\n    } catch (error) {\r\n      console.error('Healing strategy execution failed:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const attemptSelfHealing = async (alert: Alert): Promise<boolean> => {\r\n    if (!healingActive) return false;\r\n\r\n    const strategy = selectBestStrategy(alert);\r\n    if (!strategy) {\r\n      console.log(`No applicable healing strategy for alert: ${alert.title}`);\r\n      return false;\r\n    }\r\n\r\n    console.log(`Attempting self-healing for alert ${alert.id} using strategy: ${strategy.name}`);\r\n    \r\n    // Update alert to show healing in progress\r\n    await updateAlert(alert.id, {\r\n      status: 'acknowledged',\r\n      acknowledged_by: 'Self-Healing AI',\r\n      acknowledged_at: new Date().toISOString()\r\n    });\r\n\r\n    return executeHealingStrategy(alert, strategy);\r\n  };\r\n\r\n  // Monitor alerts and attempt healing\r\n  useEffect(() => {\r\n    if (!healingActive) return;\r\n\r\n    const activeAlerts = alerts.filter(alert => \r\n      alert.status === 'active' && \r\n      (alert.severity === 'high' || alert.severity === 'critical')\r\n    );\r\n\r\n    // Process each active alert\r\n    activeAlerts.forEach(alert => {\r\n      // Check if we haven't already attempted healing for this alert\r\n      const existingAttempt = healingAttempts.find(attempt => \r\n        attempt.alert_id === alert.id\r\n      );\r\n\r\n      if (!existingAttempt) {\r\n        // Attempt healing after a short delay to avoid overwhelming the system\r\n        setTimeout(() => attemptSelfHealing(alert), Math.random() * 5000);\r\n      }\r\n    });\r\n  }, [alerts, healingActive]);\r\n\r\n  const getStrategyStats = () => {\r\n    const strategyPerformance = HEALING_STRATEGIES.map(strategy => {\r\n      const attempts = healingAttempts.filter(attempt => \r\n        attempt.strategy_name === strategy.name\r\n      );\r\n      const successful = attempts.filter(attempt => attempt.success).length;\r\n      \r\n      return {\r\n        ...strategy,\r\n        actual_attempts: attempts.length,\r\n        actual_success_rate: attempts.length > 0 ? (successful / attempts.length) * 100 : 0\r\n      };\r\n    });\r\n\r\n    return strategyPerformance;\r\n  };\r\n\r\n  return {\r\n    healingActive,\r\n    setHealingActive,\r\n    healingStats,\r\n    healingAttempts,\r\n    attemptSelfHealing,\r\n    getStrategyStats\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useSelfLearning.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runLearningCycle'. Either include it or remove the dependency array.","line":193,"column":6,"nodeType":"ArrayExpression","endLine":193,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [learningActive, runLearningCycle]","fix":{"range":[6487,6503],"text":"[learningActive, runLearningCycle]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface LearningData {\r\n  decision_type: string;\r\n  confidence_score: number;\r\n  outcome_success: boolean;\r\n  execution_time: number;\r\n  context: Record<string, unknown>;\r\n}\r\n\r\ninterface ThresholdConfig {\r\n  decision_type: string;\r\n  current_threshold: number;\r\n  success_rate: number;\r\n  total_decisions: number;\r\n  last_updated: string;\r\n}\r\n\r\nexport const useSelfLearning = () => {\r\n  const [thresholds, setThresholds] = useState<Record<string, ThresholdConfig>>({});\r\n  const [learningActive, setLearningActive] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  const analyzePerfomanceData = async () => {\r\n    try {\r\n      // Get recent AI decision logs\r\n      const { data: logs, error } = await supabase\r\n        .from('ai_confidence_logs')\r\n        .select('*')\r\n        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      // Group by decision type and analyze performance\r\n      const performanceByType: Record<string, {\r\n        total: number;\r\n        successful: number;\r\n        avgConfidence: number;\r\n        decisions: unknown[];\r\n      }> = {};\r\n\r\n      logs?.forEach(log => {\r\n        if (!performanceByType[log.decision_type]) {\r\n          performanceByType[log.decision_type] = {\r\n            total: 0,\r\n            successful: 0,\r\n            avgConfidence: 0,\r\n            decisions: []\r\n          };\r\n        }\r\n\r\n        performanceByType[log.decision_type].total++;\r\n        performanceByType[log.decision_type].decisions.push(log);\r\n        performanceByType[log.decision_type].avgConfidence += log.confidence_score;\r\n        \r\n        // Assume decisions with confidence > 0.8 that weren't flagged for review are successful\r\n        if (log.confidence_score > 0.8 && !log.flagged_for_review) {\r\n          performanceByType[log.decision_type].successful++;\r\n        }\r\n      });\r\n\r\n      return performanceByType;\r\n    } catch (error) {\r\n      console.error('Error analyzing performance data:', error);\r\n      return {};\r\n    }\r\n  };\r\n\r\n  const adjustThresholds = async (performanceData: Record<string, {\r\n    total: number;\r\n    successful: number;\r\n    avgConfidence: number;\r\n    decisions: unknown[];\r\n  }>) => {\r\n    const adjustments: unknown[] = [];\r\n\r\n    for (const [decisionType, data] of Object.entries(performanceData)) {\r\n      const successRate = data.successful / data.total;\r\n      const avgConfidence = data.avgConfidence / data.total;\r\n      \r\n      let newThreshold = thresholds[decisionType]?.current_threshold || 0.8;\r\n      let adjustmentReason = '';\r\n\r\n      // Adjust threshold based on success rate and confidence patterns\r\n      if (successRate > 0.95 && avgConfidence > 0.9) {\r\n        // Very high success rate - can lower threshold for efficiency\r\n        newThreshold = Math.max(0.6, newThreshold - 0.05);\r\n        adjustmentReason = 'High success rate allows for lower threshold';\r\n      } else if (successRate < 0.85) {\r\n        // Lower success rate - increase threshold for safety\r\n        newThreshold = Math.min(0.95, newThreshold + 0.05);\r\n        adjustmentReason = 'Lower success rate requires higher threshold';\r\n      } else if (successRate > 0.9 && avgConfidence < 0.75) {\r\n        // Good success rate but low confidence - slight increase\r\n        newThreshold = Math.min(0.9, newThreshold + 0.02);\r\n        adjustmentReason = 'Optimizing for confidence consistency';\r\n      }\r\n\r\n      // Only adjust if change is significant\r\n      if (Math.abs(newThreshold - (thresholds[decisionType]?.current_threshold || 0.8)) > 0.01) {\r\n        const config: ThresholdConfig = {\r\n          decision_type: decisionType,\r\n          current_threshold: newThreshold,\r\n          success_rate: successRate,\r\n          total_decisions: data.total,\r\n          last_updated: new Date().toISOString()\r\n        };\r\n\r\n        adjustments.push({\r\n          ...config,\r\n          adjustment_reason: adjustmentReason,\r\n          old_threshold: thresholds[decisionType]?.current_threshold || 0.8\r\n        });\r\n\r\n        setThresholds(prev => ({\r\n          ...prev,\r\n          [decisionType]: config\r\n        }));\r\n      }\r\n    }\r\n\r\n    return adjustments;\r\n  };\r\n\r\n  const logLearningData = async (data: LearningData) => {\r\n    try {\r\n      // Convert context to JSON-compatible format for Supabase\r\n      const decisionData = {\r\n        outcome_success: data.outcome_success,\r\n        execution_time: data.execution_time,\r\n        context: data.context\r\n      };\r\n\r\n      await supabase.from('ai_confidence_logs').insert({\r\n        decision_type: data.decision_type,\r\n        confidence_score: data.confidence_score,\r\n        decision_data: decisionData as never, // Cast to never to bypass type checking\r\n        reasoning: `Self-learning outcome: ${data.outcome_success ? 'successful' : 'failed'}`,\r\n        flagged_for_review: !data.outcome_success && data.confidence_score > 0.8\r\n      });\r\n    } catch (error) {\r\n      console.error('Error logging learning data:', error);\r\n    }\r\n  };\r\n\r\n  const runLearningCycle = async () => {\r\n    if (!learningActive) return;\r\n\r\n    try {\r\n      console.log('Running self-learning cycle...');\r\n      \r\n      const performanceData = await analyzePerfomanceData();\r\n      const adjustments = await adjustThresholds(performanceData);\r\n\r\n      if (adjustments.length > 0) {\r\n        toast({\r\n          title: \"Self-Learning Update\",\r\n          description: `AI autonomously adjusted ${adjustments.length} decision threshold(s)`,\r\n        });\r\n\r\n        console.log('Threshold adjustments made:', adjustments);\r\n      }\r\n\r\n      return adjustments;\r\n    } catch (error) {\r\n      console.error('Self-learning cycle error:', error);\r\n      toast({\r\n        title: \"Learning Error\",\r\n        description: \"Self-learning cycle encountered an error\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const getThresholdForDecision = (decisionType: string): number => {\r\n    return thresholds[decisionType]?.current_threshold || 0.8;\r\n  };\r\n\r\n  // Run learning cycle every 5 minutes\r\n  useEffect(() => {\r\n    if (!learningActive) return;\r\n\r\n    const interval = setInterval(runLearningCycle, 5 * 60 * 1000);\r\n    \r\n    // Run initial cycle\r\n    runLearningCycle();\r\n\r\n    return () => clearInterval(interval);\r\n  }, [learningActive]);\r\n\r\n  return {\r\n    thresholds,\r\n    learningActive,\r\n    setLearningActive,\r\n    runLearningCycle,\r\n    logLearningData,\r\n    getThresholdForDecision,\r\n    analyzePerfomanceData,\r\n    adjustThresholds\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useUserManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useUserTesting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\useWorkerManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\user-management\\useUserActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\user-management\\useUserBulkOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\user-management\\useUserData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\user-management\\useUserForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\hooks\\user-management\\useUserOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\data\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\feature-flags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\flags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\lead-scoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\agents-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\broker-admin-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\carrier-admin-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\driver-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\drivers-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\employee-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\executive-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\owner-operator-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\shipper-admin-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\super-admin-menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\menus\\ui-constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\otelLinks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\types\\menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\observability.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\otel\\browser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\APIReferencePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AboutPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AdminPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AlertsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AutonomousAIPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AutonomousDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\AutonomousTMS.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\BillingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\BlogPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\BrokerPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CareersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CarrierPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CaseStudiesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CertificationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CommunityPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\CompliancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ContactPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\DevelopmentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\DocumentationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\DownloadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\DriverManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\EventsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\FeaturesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\FleetManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ForgotPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ForumPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\HelpCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\InnovationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\IntegrationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\LiveMonitoringPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\LoadBoardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\LoadManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\MarketingLanding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\MigrationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ModernIndex.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\NewsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PartnersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PerformancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PortalSelection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1796,1799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1796,1799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Truck, \r\n  Building2, \r\n  Users, \r\n  Package, \r\n  Car, \r\n  Settings,\r\n  BarChart3,\r\n  Activity,\r\n  ArrowRight,\r\n  Shield,\r\n  Zap,\r\n  Globe,\r\n  DollarSign,\r\n  ClipboardList,\r\n  ShoppingCart,\r\n  TrendingUp,\r\n  BookOpen,\r\n  Briefcase,\r\n  Database\r\n} from 'lucide-react';\r\nimport { PORTALS, getPortalsByRole } from '@/portals/registry';\r\n\r\nconst PortalSelection = () => {\r\n  const { selectedRole, user } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  // Filter portals by user role\r\n  const allowedPortals = selectedRole ? getPortalsByRole(selectedRole) : PORTALS;\r\n\r\n  // Icon mapping\r\n  const iconMap: Record<string, React.ReactNode> = {\r\n    Settings: <Settings className=\"h-8 w-8\" />,\r\n    Shield: <Shield className=\"h-8 w-8\" />,\r\n    Truck: <Truck className=\"h-8 w-8\" />,\r\n    Building2: <Building2 className=\"h-8 w-8\" />,\r\n    Users: <Users className=\"h-8 w-8\" />,\r\n    Package: <Package className=\"h-8 w-8\" />,\r\n    Car: <Car className=\"h-8 w-8\" />,\r\n    BarChart3: <BarChart3 className=\"h-8 w-8\" />,\r\n    Activity: <Activity className=\"h-8 w-8\" />,\r\n    DollarSign: <DollarSign className=\"h-8 w-8\" />,\r\n    ClipboardList: <ClipboardList className=\"h-8 w-8\" />,\r\n    ShoppingCart: <ShoppingCart className=\"h-8 w-8\" />,\r\n    TrendingUp: <TrendingUp className=\"h-8 w-8\" />,\r\n    BookOpen: <BookOpen className=\"h-8 w-8\" />,\r\n    Briefcase: <Briefcase className=\"h-8 w-8\" />,\r\n    Database: <Database className=\"h-8 w-8\" />\r\n  };\r\n\r\n  const handlePortalSelect = (portal: any) => {\r\n    console.log(`Navigating to ${portal.title} at ${portal.path}`);\r\n    navigate(portal.path);\r\n  };\r\n\r\n  const getStatusBadge = (status?: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\r\n      case 'maintenance':\r\n        return <Badge variant=\"outline\" className=\"text-yellow-600\">Maintenance</Badge>;\r\n      case 'beta':\r\n        return <Badge variant=\"outline\" className=\"text-blue-600\">Beta</Badge>;\r\n      default:\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {/* Header */}\r\n        <div className=\"text-center mb-12\">\r\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\r\n            <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\r\n              <Globe className=\"h-6 w-6\" />\r\n            </div>\r\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\">\r\n              Portal Selection\r\n            </h1>\r\n          </div>\r\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\r\n            Welcome back! Choose the portal that best fits your role and responsibilities.\r\n          </p>\r\n          {user && (\r\n            <div className=\"mt-4 flex items-center justify-center gap-2\">\r\n              <Shield className=\"h-4 w-4 text-green-500\" />\r\n              <span className=\"text-sm text-muted-foreground\">\r\n                Authenticated as {user.email}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Portal Grid */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto\">\r\n          {allowedPortals.map((portal) => (\r\n            <Card \r\n              key={portal.key} \r\n              data-testid=\"portal-card\"\r\n              className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer border-2 hover:border-primary/50\"\r\n              onClick={() => handlePortalSelect(portal)}\r\n            >\r\n              <CardHeader className=\"pb-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className={`flex h-12 w-12 items-center justify-center rounded-lg ${portal.color} text-white`}>\r\n                    {iconMap[portal.icon] || <Settings className=\"h-8 w-8\" />}\r\n                  </div>\r\n                  {getStatusBadge(portal.status)}\r\n                </div>\r\n                <CardTitle className=\"text-xl font-bold mt-4 group-hover:text-primary transition-colors\">\r\n                  {portal.title}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"pt-0\">\r\n                <p className=\"text-muted-foreground mb-4 leading-relaxed\">\r\n                  {portal.description}\r\n                </p>\r\n                \r\n                <div className=\"space-y-2 mb-6\">\r\n                  <h4 className=\"font-semibold text-sm text-foreground\">Key Features:</h4>\r\n                  <ul className=\"space-y-1\">\r\n                    {portal.features.slice(0, 3).map((feature, index) => (\r\n                      <li key={index} className=\"text-xs text-muted-foreground flex items-center gap-2\">\r\n                        <Zap className=\"h-3 w-3 text-primary\" />\r\n                        {feature}\r\n                      </li>\r\n                    ))}\r\n                    {portal.features.length > 3 && (\r\n                      <li className=\"text-xs text-muted-foreground\">\r\n                        +{portal.features.length - 3} more features\r\n                      </li>\r\n                    )}\r\n                  </ul>\r\n                </div>\r\n\r\n                <Button \r\n                  className=\"w-full group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-300\"\r\n                  variant=\"outline\"\r\n                >\r\n                  <span>Access Portal</span>\r\n                  <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"mt-12 text-center\">\r\n          <div className=\"inline-flex items-center gap-4 p-4 bg-card/50 rounded-lg border\">\r\n            <span className=\"text-sm text-muted-foreground\">Quick Actions:</span>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              onClick={() => navigate('/dashboard')}\r\n            >\r\n              Dashboard\r\n            </Button>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              onClick={() => navigate('/profile')}\r\n            >\r\n              Profile\r\n            </Button>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              onClick={() => navigate('/settings')}\r\n            >\r\n              Settings\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Autonomous Agent Status */}\r\n        <div className=\"mt-8 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            <Activity className=\"h-4 w-4 text-green-600\" />\r\n            <span className=\"font-semibold text-green-800\">Autonomous Agents Active</span>\r\n          </div>\r\n          <p className=\"text-sm text-green-700\">\r\n            All 250 autonomous agents are running and monitoring system health. \r\n            Your portals are being continuously optimized and enhanced.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PortalSelection;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PredictiveScalingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\PrivacyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ProductsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\RegisterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ReleaseNotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ResearchPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ResourcesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\RoadmapPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\RouteOptimizationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ScalabilityPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SecurityPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ServicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SettingsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\ShipperPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SimpleTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SolutionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\StatusPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SuperAdminPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SupportPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\SystemHealthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\TermsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\TestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\TestimonialsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\TrainingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\UpdatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\_scaffold\\PortalScaffold.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\admin\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\analysis\\PortalAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\analytics\\AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\analytics\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\api\\APIDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\api\\APIErrorsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\api\\APIKeysPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\api\\APILogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\assets\\AssetsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\auth\\LoginPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'nav'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [nav, user]","fix":{"range":[1632,1638],"text":"[nav, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1676,1679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1676,1679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2548,2551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2548,2551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3598,3601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3598,3601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4981,4984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4981,4984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5865,5868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5865,5868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11255,11258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11255,11258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as React from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { supabase } from \"@/lib/supabaseClient\";\nimport { Mail, Lock, Eye, EyeOff, Building2, ShieldCheck, AlertTriangle } from \"lucide-react\";\n\ntype State = {\n  email: string;\n  password: string;\n  company?: string;\n  showPw: boolean;\n  loading: boolean;\n  error?: string;\n  capsLock?: boolean;\n  magicSent?: boolean;\n  rememberMe: boolean;\n  showMfa: boolean;\n};\n\nexport default function LoginPage() {\n  const nav = useNavigate();\n  const location = useLocation();\n  const { signIn, user } = useAuth();\n  const [s, setS] = React.useState<State>({\n    email: \"\",\n    password: \"\",\n    company: \"\",\n    showPw: false,\n    loading: false,\n    rememberMe: false,\n    showMfa: false,\n  });\n\n  // i18n helper for future internationalization\n  const t = (k: string, d?: string) => d ?? k;\n\n  // Auto-fill company code from subdomain\n  React.useEffect(() => {\n    const sub = window.location.hostname.split(\".\")[0];\n    if (sub && sub !== \"localhost\" && sub !== \"127\" && sub !== \"www\") {\n      setS(x => ({ ...x, company: sub }));\n    }\n  }, []);\n\n  // Preload portal selection for instant navigation\n  React.useEffect(() => {\n    const link = document.createElement(\"link\");\n    link.rel = \"prefetch\";\n    link.href = \"/portal-selection\";\n    document.head.appendChild(link);\n    return () => {\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (user) nav(\"/portal-selection\", { replace: true });\n  }, [user]);\n\n  const from = (location.state as any)?.from?.pathname ?? \"/portal-selection\";\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setS((x) => ({ ...x, loading: true, error: undefined }));\n    \n    // OTEL breadcrumb - submit\n    window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.submit\" }}));\n    \n    try {\n      const result = await signIn(s.email, s.password);\n      if (result.error) throw new Error(result.error);\n      \n      // OTEL breadcrumb - success\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.success\" }}));\n      \n      // Handle session persistence\n      if (s.rememberMe) {\n        // Note: Implement session persistence based on your auth system\n        // supabase.auth.setSession({ ...current }, { persistSession: true });\n      }\n      \n      nav(from, { replace: true });\n    } catch (err: any) {\n      // Check for MFA requirement\n      if (/mfa/i.test(err?.message ?? \"\")) {\n        setS(x => ({ ...x, error: undefined, showMfa: true }));\n        return;\n      }\n      \n      const msg = normalizeAuthError(err?.message);\n      setS((x) => ({ ...x, loading: false, error: msg }));\n      \n      // OTEL breadcrumb - error\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.error\", code: msg }}));\n    }\n  }\n\n  async function handleSSO(provider: \"google\" | \"azure\") {\n    setS((x) => ({ ...x, loading: true, error: undefined }));\n    \n    // OTEL breadcrumb - SSO attempt\n    window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: `auth.login.sso.${provider}` }}));\n    \n    try {\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: provider === \"azure\" ? \"azure\" : \"google\",\n        options: { redirectTo: `${window.location.origin}/portal-selection` },\n      });\n      if (error) throw error;\n      // supabase will redirect\n      return data;\n    } catch (err: any) {\n      setS((x) => ({ ...x, loading: false, error: normalizeAuthError(err?.message) }));\n      \n      // OTEL breadcrumb - SSO error\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: `auth.login.sso.${provider}.error` }}));\n    }\n  }\n\n  async function handlePasskey() {\n    setS(x => ({ ...x, error: \"Passkey not yet set up. Ask admin to enable WebAuthn.\", loading: false }));\n    // If/when enabled with Supabase:\n    // const { data, error } = await supabase.auth.signInWithWebAuthn(); // placeholder; implement per your auth\n  }\n\n  async function handleMagicLink() {\n    if (!s.email) {\n      setS((x) => ({ ...x, error: \"Enter your email to receive a magic link.\" }));\n      return;\n    }\n    setS((x) => ({ ...x, loading: true, error: undefined }));\n    \n    // OTEL breadcrumb - magic link\n    window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.magic_link\" }}));\n    \n    try {\n      const { error } = await supabase.auth.signInWithOtp({\n        email: s.email,\n        options: { emailRedirectTo: `${window.location.origin}/portal-selection` },\n      });\n      if (error) throw error;\n      setS((x) => ({ ...x, loading: false, magicSent: true }));\n      \n      // OTEL breadcrumb - magic link sent\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.magic_link.sent\" }}));\n    } catch (err: any) {\n      setS((x) => ({ ...x, loading: false, error: normalizeAuthError(err?.message) }));\n      \n      // OTEL breadcrumb - magic link error\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.magic_link.error\" }}));\n    }\n  }\n\n  async function handleMfaVerify(code: string) {\n    setS(x => ({ ...x, loading: true }));\n    \n    // OTEL breadcrumb - MFA attempt\n    window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.mfa.verify\" }}));\n    \n    try {\n      // Implement your MFA verification logic here\n      // const result = await verifyMfa(code);\n      // if (result.success) {\n      //   nav(from, { replace: true });\n      // } else {\n      //   throw new Error(\"Invalid MFA code\");\n      // }\n      \n      // For now, just close the modal\n      setS(x => ({ ...x, loading: false, showMfa: false }));\n    } catch (err: any) {\n      setS(x => ({ ...x, loading: false, error: normalizeAuthError(err?.message) }));\n      \n      // OTEL breadcrumb - MFA error\n      window.dispatchEvent(new CustomEvent(\"otel:b\", { detail: { name: \"auth.login.mfa.error\" }}));\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen grid grid-cols-1 lg:grid-cols-2 bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-slate-50 via-white to-slate-50 dark:from-slate-900 dark:via-slate-950 dark:to-slate-900\">\n      {/* Left brand / value panel */}\n      <aside className=\"hidden lg:flex flex-col justify-between p-10 pr-16\">\n        <div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-10 w-10 rounded-xl bg-black/90 dark:bg-white/90\" />\n            <span className=\"text-xl font-semibold tracking-wide\">Trans Bot AI</span>\n          </div>\n          <h1 className=\"mt-10 text-4xl font-semibold leading-tight\">\n            {t(\"Login to your\", \"Login to your\")} <span className=\"text-slate-500 dark:text-slate-400\">{t(\"Autonomous TMS\", \"Autonomous TMS\")}</span>\n          </h1>\n          <p className=\"mt-4 text-slate-600 dark:text-slate-300\">\n            {t(\"One account for all 20 portals. Role-aware access. SSO ready. Secure by default.\", \"One account for all 20 portals. Role-aware access. SSO ready. Secure by default.\")}\n          </p>\n          <ul className=\"mt-6 space-y-2 text-sm text-slate-600 dark:text-slate-300\">\n            <li className=\"flex items-center gap-2\"><ShieldCheck className=\"h-4 w-4\" /> RLS + JWT + HMAC v2</li>\n            <li className=\"flex items-center gap-2\"><ShieldCheck className=\"h-4 w-4\" /> MFA-ready & passkey-friendly</li>\n            <li className=\"flex items-center gap-2\"><ShieldCheck className=\"h-4 w-4\" /> OTEL traces on auth events</li>\n          </ul>\n        </div>\n        <EnvBanner />\n      </aside>\n\n      {/* Right auth card */}\n      <main className=\"flex items-center justify-center p-6 lg:p-10\">\n        <div className=\"w-full max-w-md rounded-2xl border border-slate-200 dark:border-slate-800 bg-white/70 dark:bg-slate-900/60 backdrop-blur p-6 shadow-sm\">\n          <h2 className=\"text-xl font-semibold\">{t(\"Login to TMS\", \"Login to TMS\")}</h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">{t(\"Access your portals with a single secure sign-in.\", \"Access your portals with a single secure sign-in.\")}</p>\n\n          {s.error && (\n            <div className=\"mt-4 flex items-start gap-2 rounded-md border border-rose-200/60 dark:border-rose-900/60 bg-rose-50/70 dark:bg-rose-950/30 p-3 text-sm text-rose-700 dark:text-rose-300\" role=\"alert\" aria-live=\"assertive\">\n              <AlertTriangle className=\"h-4 w-4 mt-0.5\" />\n              <span>{s.error}</span>\n            </div>\n          )}\n\n          {s.magicSent && (\n            <div className=\"mt-4 rounded-md border border-emerald-200/60 dark:border-emerald-900/60 bg-emerald-50/70 dark:bg-emerald-950/30 p-3 text-sm text-emerald-700 dark:text-emerald-300\">\n              {t(\"Magic link sent! Check your email to continue.\", \"Magic link sent! Check your email to continue.\")}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"mt-6 space-y-4\">\n            {/* Optional company code (helps multi-tenant routing if not using subdomain) */}\n            <div>\n              <label htmlFor=\"company\" className=\"block text-sm font-medium\">{t(\"Company code (optional)\", \"Company code (optional)\")}</label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"company\"\n                  type=\"text\"\n                  inputMode=\"text\"\n                  placeholder=\"acme-logistics\"\n                  value={s.company ?? \"\"}\n                  onChange={(e) => setS((x) => ({ ...x, company: e.target.value }))}\n                  className=\"w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 px-3 py-2 outline-none focus:ring-2 focus:ring-indigo-500\"\n                />\n                <Building2 className=\"absolute right-3 top-2.5 h-4 w-4 text-slate-400\" />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium\">{t(\"Email\", \"Email\")}</label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"email\"\n              type=\"email\"\n                  autoComplete=\"email\"\n              required\n                  placeholder=\"you@company.com\"\n                  value={s.email}\n                  onChange={(e) => setS((x) => ({ ...x, email: e.target.value }))}\n                  className=\"w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 px-3 py-2 pl-9 outline-none focus:ring-2 focus:ring-indigo-500\"\n                />\n                <Mail className=\"absolute left-3 top-2.5 h-4 w-4 text-slate-400\" />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium\">{t(\"Password\", \"Password\")}</label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  type={s.showPw ? \"text\" : \"password\"}\n                  autoComplete=\"current-password\"\n              required\n                  placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                  onKeyUp={(e: any) =>\n                    setS((x) => ({ ...x, capsLock: e.getModifierState?.(\"CapsLock\") }))\n                  }\n                  value={s.password}\n                  onChange={(e) => setS((x) => ({ ...x, password: e.target.value }))}\n                  className=\"w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 px-3 py-2 pr-10 outline-none focus:ring-2 focus:ring-indigo-500\"\n                />\n                <button\n                  type=\"button\"\n                  aria-label={s.showPw ? t(\"Hide password\", \"Hide password\") : t(\"Show password\", \"Show password\")}\n                  className=\"absolute right-2.5 top-2.5 text-slate-400 hover:text-slate-600\"\n                  onClick={() => setS((x) => ({ ...x, showPw: !x.showPw }))}\n                >\n                  {s.showPw ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n              {s.capsLock && <p className=\"mt-1 text-xs text-amber-600\">{t(\"Caps Lock is on\", \"Caps Lock is on\")}</p>}\n            </div>\n\n            <div className=\"flex items-center justify-between text-sm\">\n              <label className=\"inline-flex items-center gap-2\">\n                <input \n                  type=\"checkbox\" \n                  className=\"rounded border-slate-300 dark:border-slate-700\"\n                  checked={s.rememberMe}\n                  onChange={(e) => setS(x => ({ ...x, rememberMe: e.target.checked }))}\n                />\n                {t(\"Remember me\", \"Remember me\")}\n              </label>\n              <a className=\"text-indigo-600 hover:underline\" href=\"/forgot-password\">{t(\"Forgot password?\", \"Forgot password?\")}</a>\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={s.loading}\n              className=\"w-full rounded-lg bg-indigo-600 text-white py-2.5 font-medium hover:bg-indigo-700 disabled:opacity-60\"\n            >\n              {s.loading ? t(\"Signing in‚Ä¶\", \"Signing in‚Ä¶\") : t(\"Sign in\", \"Sign in\")}\n            </button>\n          </form>\n\n          <div className=\"my-4 flex items-center gap-4\">\n            <div className=\"h-px flex-1 bg-slate-200 dark:bg-slate-800\" />\n            <span className=\"text-xs text-slate-500\">{t(\"or\", \"or\")}</span>\n            <div className=\"h-px flex-1 bg-slate-200 dark:bg-slate-800\" />\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-3\">\n            <button\n              onClick={() => handleSSO(\"google\")}\n              disabled={s.loading}\n              className=\"rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 py-2 text-sm hover:bg-slate-50\"\n            >\n              {t(\"Google\", \"Google\")}\n            </button>\n            <button\n              onClick={() => handleSSO(\"azure\")}\n              disabled={s.loading}\n              className=\"rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 py-2 text-sm hover:bg-slate-50\"\n            >\n              {t(\"Microsoft\", \"Microsoft\")}\n            </button>\n            <button\n              onClick={handlePasskey}\n              disabled={s.loading}\n              className=\"rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 py-2 text-sm hover:bg-slate-50\"\n            >\n              {t(\"Passkey\", \"Passkey\")}\n            </button>\n          </div>\n\n          <button\n            onClick={handleMagicLink}\n            disabled={s.loading}\n            className=\"mt-3 w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white/60 dark:bg-slate-950/40 py-2 text-sm hover:bg-slate-50\"\n          >\n            {t(\"Email me a magic link\", \"Email me a magic link\")}\n          </button>\n\n          <p className=\"mt-6 text-xs text-slate-500\">\n            {t(\"By continuing, you agree to our\", \"By continuing, you agree to our\")} <a className=\"underline\" href=\"/legal/terms\">{t(\"Terms\", \"Terms\")}</a> {t(\"and\", \"and\")} <a className=\"underline\" href=\"/legal/privacy\">{t(\"Privacy Policy\", \"Privacy Policy\")}</a>.\n          </p>\n        </div>\n      </main>\n\n      {/* MFA Modal */}\n      {s.showMfa && (\n        <MfaPrompt onVerify={handleMfaVerify} />\n      )}\n    </div>\n  );\n}\n\nfunction MfaPrompt({ onVerify }: { onVerify: (code: string) => void }) {\n  const [code, setCode] = React.useState(\"\");\n  const t = (k: string, d?: string) => d ?? k;\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\" className=\"fixed inset-0 grid place-items-center bg-black/30\">\n      <div className=\"w-full max-w-sm rounded-xl bg-white dark:bg-slate-900 p-5 shadow-xl\">\n        <h3 className=\"font-semibold mb-2\">{t(\"Two-factor code\", \"Two-factor code\")}</h3>\n        <input \n          inputMode=\"numeric\" \n          pattern=\"\\d*\" \n          maxLength={6}\n          className=\"w-full rounded-lg border px-3 py-2\" \n          value={code}\n          onChange={e => setCode(e.target.value)} \n          placeholder=\"123456\" \n        />\n        <button \n          className=\"mt-3 w-full rounded-lg bg-indigo-600 text-white py-2\"\n          onClick={() => onVerify(code)}\n        >\n          {t(\"Verify\", \"Verify\")}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction EnvBanner() {\n  const env = import.meta.env.MODE || \"production\";\n  const isProd = env === \"production\";\n  const t = (k: string, d?: string) => d ?? k;\n  \n  return (\n    <div className=\"text-xs text-slate-500\">\n      <div className=\"inline-flex items-center gap-2 rounded-full border border-slate-200 dark:border-slate-800 px-3 py-1 backdrop-blur\">\n        <span className={`h-2 w-2 rounded-full ${isProd ? \"bg-emerald-500\" : \"bg-amber-500\"}`} />\n        {isProd ? t(\"Production\", \"Production\") : `${t(\"Environment\", \"Environment\")}: ${env}`}\n      </div>\n      <a href=\"/status\" className=\"ml-3 underline\">{t(\"Status\", \"Status\")}</a>\n      <a href=\"/changelog\" className=\"ml-3 underline\">{t(\"Changelog\", \"Changelog\")}</a>\n    </div>\n  );\n}\n\nfunction normalizeAuthError(msg?: string) {\n  if (!msg) return \"Unable to sign in. Please try again.\";\n  const m = msg.toLowerCase();\n  if (m.includes(\"invalid\") && m.includes(\"credentials\")) return \"Invalid email or password.\";\n  if (m.includes(\"rate\")) return \"Too many attempts. Please wait and try again.\";\n  if (m.includes(\"mfa\")) return \"Additional security verification required.\";\n  if (m.includes(\"network\")) return \"Network issue. Check your connection and retry.\";\n  return \"Sign-in failed. Please retry.\";\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\AutonomousAgentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\AutonomousSystemPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\AutonomousTasksPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\MarketResearchPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\PerformanceOptimizationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\RealtimeUIDesignPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\autonomous\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\BrokerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\APIDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\APIDocumentation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\APIErrorTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\APIKeysManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\APILogsViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\CarrierPartnerIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\RateLimitsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\TransportationModes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\api\\WebhooksManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\CRMAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\CRMDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\CarrierRelations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\Communications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\CustomerAccounts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\LeadManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\MarketIntelligence.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\Opportunities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\QuoteCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\RevenueForecast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\SalesPipeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\crm\\TaskCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\ComplianceAuditing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\EDIOverviewDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\ErrorManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\MappingConfiguration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\MonitoringAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\PartnerManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\edi\\TransactionCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\AccountsPayable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\AccountsReceivable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\AuditTrail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\BankReconciliation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\BillsExpenses.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\BudgetingForecasting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\CashFlowManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\ChartOfAccounts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\CheckPrinting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\CustomerStatements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\Employees.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\FinancialDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\FinancialReporting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\GeneralLedger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\InvoiceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\PaymentProcessing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\Payroll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\ProductsServices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\TaxManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\financials\\Timesheets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\networks\\NetworkAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\networks\\NetworksOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\networks\\PartnerManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\AllQuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\AnalyticsReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\NewQuotePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\PricingRatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\QuickQuotePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\QuoteDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\QuoteManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\QuotePageComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\SettingsToolsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\quotes\\management\\ActiveQuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\AccessorialRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\BrokerRateIntegration.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBrokerRates'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBrokerRates]","fix":{"range":[3107,3109],"text":"[fetchBrokerRates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport Layout from '@/components/layout/Layout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Slider } from '@/components/ui/slider';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { \r\n  TrendingUp, \r\n  ArrowUpDown, \r\n  Search, \r\n  Plus, \r\n  Filter, \r\n  DollarSign, \r\n  MapPin, \r\n  Calendar, \r\n  Truck, \r\n  Building, \r\n  RefreshCw as Sync, \r\n  CheckCircle, \r\n  Clock, \r\n  BarChart3,\r\n  AlertTriangle,\r\n  Percent,\r\n  Settings\r\n} from 'lucide-react';\r\n\r\ninterface BrokerRate {\r\n  id: string;\r\n  broker_rate_id: string;\r\n  carrier_rate_id?: string;\r\n  carrier_id?: string;\r\n  customer_id?: string;\r\n  rate_type: 'buy' | 'sell';\r\n  origin_city: string;\r\n  origin_state: string;\r\n  destination_city: string;\r\n  destination_state: string;\r\n  equipment_type: string;\r\n  carrier_rate?: number;\r\n  broker_rate: number;\r\n  margin_amount: number;\r\n  margin_percentage: number;\r\n  fuel_surcharge_rate: number;\r\n  effective_date: string;\r\n  expiry_date?: string;\r\n  status: 'active' | 'inactive' | 'expired';\r\n  auto_margin_enabled: boolean;\r\n  min_margin_percentage: number;\r\n  max_margin_percentage: number;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface IntegrationSettings {\r\n  id: string;\r\n  carrier_id: string;\r\n  broker_id: string;\r\n  auto_sync_enabled: boolean;\r\n  default_margin_percentage: number;\r\n  min_margin_percentage: number;\r\n  max_margin_percentage: number;\r\n  auto_approval_threshold: number;\r\n  integration_status: 'active' | 'inactive' | 'pending';\r\n  sync_frequency: 'real_time' | 'hourly' | 'daily';\r\n  last_sync?: string;\r\n  settings: unknown;\r\n}\r\n\r\nconst BrokerRateIntegration = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedRateType, setSelectedRateType] = useState<'all' | 'buy' | 'sell'>('all');\r\n  const [brokerRates, setBrokerRates] = useState<BrokerRate[]>([]);\r\n  const [integrationSettings, setIntegrationSettings] = useState<IntegrationSettings[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [marginSettings, setMarginSettings] = useState({\r\n    defaultMargin: 15,\r\n    minMargin: 10,\r\n    maxMargin: 30,\r\n    autoSync: true\r\n  });\r\n  const { toast } = useToast();\r\n\r\n  // Fetch broker rates and integration settings\r\n  useEffect(() => {\r\n    fetchBrokerRates();\r\n    fetchIntegrationSettings();\r\n  }, []);\r\n\r\n  const fetchBrokerRates = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('broker_rates')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setBrokerRates((data || []) as BrokerRate[]);\r\n    } catch (error) {\r\n      console.error('Error fetching broker rates:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch broker rates\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchIntegrationSettings = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('rate_integration_settings')\r\n        .select('*')\r\n        .eq('integration_status', 'active');\r\n\r\n      if (error) throw error;\r\n      setIntegrationSettings((data || []) as IntegrationSettings[]);\r\n    } catch (error) {\r\n      console.error('Error fetching integration settings:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createBrokerRate = async (rateData: Partial<BrokerRate>) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('broker_rates')\r\n        .insert([{\r\n          broker_rate_id: `BR-${Date.now()}`,\r\n          rate_type: rateData.rate_type!,\r\n          origin_city: rateData.origin_city!,\r\n          origin_state: rateData.origin_state!,\r\n          destination_city: rateData.destination_city!,\r\n          destination_state: rateData.destination_state!,\r\n          equipment_type: rateData.equipment_type!,\r\n          carrier_rate: rateData.carrier_rate || 0,\r\n          broker_rate: rateData.broker_rate!,\r\n          margin_amount: rateData.broker_rate! - (rateData.carrier_rate || 0),\r\n          margin_percentage: rateData.carrier_rate ? \r\n            ((rateData.broker_rate! - rateData.carrier_rate) / rateData.carrier_rate) * 100 : 0,\r\n          fuel_surcharge_rate: rateData.fuel_surcharge_rate || 0,\r\n          effective_date: rateData.effective_date!,\r\n          expiry_date: rateData.expiry_date,\r\n          status: 'active',\r\n          auto_margin_enabled: true,\r\n          min_margin_percentage: rateData.min_margin_percentage || 10,\r\n          max_margin_percentage: rateData.max_margin_percentage || 30\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setBrokerRates(prev => [data as BrokerRate, ...prev]);\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Broker rate created successfully\"\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating broker rate:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to create broker rate\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateMarginSettings = async (newSettings: typeof marginSettings) => {\r\n    try {\r\n      // Update existing integration settings\r\n      for (const setting of integrationSettings) {\r\n        const { error } = await supabase\r\n          .from('rate_integration_settings')\r\n          .update({\r\n            default_margin_percentage: newSettings.defaultMargin,\r\n            min_margin_percentage: newSettings.minMargin,\r\n            max_margin_percentage: newSettings.maxMargin,\r\n            auto_sync_enabled: newSettings.autoSync\r\n          })\r\n          .eq('id', setting.id);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      setMarginSettings(newSettings);\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Margin settings updated successfully\"\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating margin settings:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to update margin settings\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const filteredRates = brokerRates.filter(rate => {\r\n    const matchesSearch = \r\n      rate.origin_city.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.destination_city.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.equipment_type.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = selectedRateType === 'all' || rate.rate_type === selectedRateType;\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  // Calculate statistics\r\n  const totalRates = brokerRates.length;\r\n  const activeRates = brokerRates.filter(rate => rate.status === 'active').length;\r\n  const averageMargin = brokerRates.length > 0 ? \r\n    brokerRates.reduce((sum, rate) => sum + rate.margin_percentage, 0) / brokerRates.length : 0;\r\n  const totalRevenue = brokerRates.reduce((sum, rate) => sum + rate.margin_amount, 0);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Layout>\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\r\n            <p className=\"mt-2 text-muted-foreground\">Loading broker integration...</p>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\r\n              <ArrowUpDown className=\"h-8 w-8 text-indigo-600\" />\r\n              Broker Rate Integration\r\n            </h1>\r\n            <p className=\"text-muted-foreground\">Manage carrier-broker rate integration and margin calculations</p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Dialog>\r\n              <DialogTrigger asChild>\r\n                <Button variant=\"outline\">\r\n                  <Settings className=\"h-4 w-4 mr-2\" />\r\n                  Margin Settings\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"max-w-md\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Margin Configuration</DialogTitle>\r\n                  <DialogDescription>Configure automatic margin calculations for broker rates</DialogDescription>\r\n                </DialogHeader>\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"space-y-2\">\r\n                    <label className=\"text-sm font-medium\">Default Margin: {marginSettings.defaultMargin}%</label>\r\n                    <Slider \r\n                      value={[marginSettings.defaultMargin]} \r\n                      onValueChange={([value]) => setMarginSettings(prev => ({...prev, defaultMargin: value}))}\r\n                      max={50}\r\n                      min={5}\r\n                      step={1}\r\n                      className=\"w-full\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <label className=\"text-sm font-medium\">Min Margin: {marginSettings.minMargin}%</label>\r\n                      <Slider \r\n                        value={[marginSettings.minMargin]} \r\n                        onValueChange={([value]) => setMarginSettings(prev => ({...prev, minMargin: value}))}\r\n                        max={25}\r\n                        min={1}\r\n                        step={1}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <label className=\"text-sm font-medium\">Max Margin: {marginSettings.maxMargin}%</label>\r\n                      <Slider \r\n                        value={[marginSettings.maxMargin]} \r\n                        onValueChange={([value]) => setMarginSettings(prev => ({...prev, maxMargin: value}))}\r\n                        max={100}\r\n                        min={10}\r\n                        step={1}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <label className=\"text-sm font-medium\">Auto-sync enabled</label>\r\n                    <Switch \r\n                      checked={marginSettings.autoSync} \r\n                      onCheckedChange={(checked) => setMarginSettings(prev => ({...prev, autoSync: checked}))}\r\n                    />\r\n                  </div>\r\n                  <Button \r\n                    className=\"w-full\" \r\n                    onClick={() => updateMarginSettings(marginSettings)}\r\n                  >\r\n                    Save Margin Settings\r\n                  </Button>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n            <Dialog>\r\n              <DialogTrigger asChild>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Create Broker Rate\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"max-w-md\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Create Broker Rate</DialogTitle>\r\n                  <DialogDescription>Create a new buy or sell rate with automatic margin calculation</DialogDescription>\r\n                </DialogHeader>\r\n                <form onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  const formData = new FormData(e.currentTarget);\r\n                  const carrierRate = Number(formData.get('carrier_rate'));\r\n                  const marginPercent = Number(formData.get('margin_percentage') || marginSettings.defaultMargin);\r\n                  const brokerRate = carrierRate * (1 + marginPercent / 100);\r\n                  \r\n                  createBrokerRate({\r\n                    rate_type: formData.get('rate_type') as 'buy' | 'sell',\r\n                    origin_city: formData.get('origin_city') as string,\r\n                    origin_state: formData.get('origin_state') as string,\r\n                    destination_city: formData.get('destination_city') as string,\r\n                    destination_state: formData.get('destination_state') as string,\r\n                    equipment_type: formData.get('equipment_type') as string,\r\n                    carrier_rate: carrierRate,\r\n                    broker_rate: Math.round(brokerRate * 100) / 100,\r\n                    margin_percentage: marginPercent,\r\n                    fuel_surcharge_rate: Number(formData.get('fuel_surcharge_rate') || 0),\r\n                    effective_date: formData.get('effective_date') as string,\r\n                    expiry_date: formData.get('expiry_date') as string || undefined,\r\n                    status: 'active',\r\n                    auto_margin_enabled: true,\r\n                    min_margin_percentage: marginSettings.minMargin,\r\n                    max_margin_percentage: marginSettings.maxMargin\r\n                  });\r\n                }}>\r\n                  <div className=\"space-y-4\">\r\n                    <Select name=\"rate_type\" required>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Rate Type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"buy\">Buy Rate</SelectItem>\r\n                        <SelectItem value=\"sell\">Sell Rate</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      <Input name=\"origin_city\" placeholder=\"Origin City\" required />\r\n                      <Input name=\"origin_state\" placeholder=\"State\" required />\r\n                    </div>\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      <Input name=\"destination_city\" placeholder=\"Destination City\" required />\r\n                      <Input name=\"destination_state\" placeholder=\"State\" required />\r\n                    </div>\r\n                    <Select name=\"equipment_type\" required>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Equipment Type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"Dry Van\">Dry Van</SelectItem>\r\n                        <SelectItem value=\"Reefer\">Reefer</SelectItem>\r\n                        <SelectItem value=\"Flatbed\">Flatbed</SelectItem>\r\n                        <SelectItem value=\"Step Deck\">Step Deck</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    <Input name=\"carrier_rate\" placeholder=\"Carrier Rate ($)\" type=\"number\" step=\"0.01\" required />\r\n                    <Input name=\"margin_percentage\" placeholder={`Margin % (default: ${marginSettings.defaultMargin}%)`} type=\"number\" step=\"0.1\" />\r\n                    <Input name=\"fuel_surcharge_rate\" placeholder=\"Fuel Surcharge %\" type=\"number\" step=\"0.1\" />\r\n                    <Input name=\"effective_date\" placeholder=\"Effective Date\" type=\"date\" required />\r\n                    <Input name=\"expiry_date\" placeholder=\"Expiry Date\" type=\"date\" />\r\n                    <Button type=\"submit\" className=\"w-full\">Create Rate</Button>\r\n                  </div>\r\n                </form>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Rates</CardTitle>\r\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{totalRates}</div>\r\n              <p className=\"text-xs text-muted-foreground\">{activeRates} active rates</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Avg Margin</CardTitle>\r\n              <Percent className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{averageMargin.toFixed(1)}%</div>\r\n              <p className=\"text-xs text-muted-foreground\">Across all rates</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Margin Revenue</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${totalRevenue.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">From margin calculations</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Integration Status</CardTitle>\r\n              <Sync className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold text-green-600\">Active</div>\r\n              <p className=\"text-xs text-muted-foreground\">{integrationSettings.length} integrations</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Filter Rates</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex gap-4\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search by origin, destination, or equipment...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedRateType} onValueChange={(value) => setSelectedRateType(value as unknown)}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"Rate Type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Rates</SelectItem>\r\n                  <SelectItem value=\"buy\">Buy Rates</SelectItem>\r\n                  <SelectItem value=\"sell\">Sell Rates</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Button variant=\"outline\">\r\n                <Filter className=\"h-4 w-4 mr-2\" />\r\n                More Filters\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Broker Rates Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Integrated Broker Rates</CardTitle>\r\n            <CardDescription>Carrier rates with automatic broker margin calculations</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Type</TableHead>\r\n                  <TableHead>Route</TableHead>\r\n                  <TableHead>Equipment</TableHead>\r\n                  <TableHead>Carrier Rate</TableHead>\r\n                  <TableHead>Broker Rate</TableHead>\r\n                  <TableHead>Margin</TableHead>\r\n                  <TableHead>Margin $</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Valid Until</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredRates.map((rate) => (\r\n                  <TableRow key={rate.id}>\r\n                    <TableCell>\r\n                      <Badge variant={rate.rate_type === 'buy' ? 'default' : 'secondary'}>\r\n                        {rate.rate_type.toUpperCase()}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\r\n                        <span className=\"text-sm\">{rate.origin_city}, {rate.origin_state} ‚Üí {rate.destination_city}, {rate.destination_state}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>{rate.equipment_type}</TableCell>\r\n                    <TableCell>\r\n                      {rate.carrier_rate ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <DollarSign className=\"h-3 w-3\" />\r\n                          {rate.carrier_rate.toLocaleString()}\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-muted-foreground\">-</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <DollarSign className=\"h-3 w-3 text-green-600\" />\r\n                        <span className=\"font-medium text-green-600\">{rate.broker_rate.toLocaleString()}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\r\n                        {rate.margin_percentage.toFixed(1)}%\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"font-medium text-green-600\">+${rate.margin_amount.toLocaleString()}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={rate.status === 'active' ? 'default' : 'secondary'}>\r\n                        {rate.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {rate.expiry_date ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"h-3 w-3 text-muted-foreground\" />\r\n                          {new Date(rate.expiry_date).toLocaleDateString()}\r\n                        </div>\r\n                      ) : (\r\n                        <span className=\"text-muted-foreground\">No expiry</span>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button size=\"sm\" variant=\"outline\">Edit</Button>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <Sync className=\"h-3 w-3 mr-1\" />\r\n                          Sync\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BrokerRateIntegration;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\BuyRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\CarrierRateIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\FuelSurcharge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\MarginAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\RateComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\RatesManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\SellRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\rates\\TargetRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\shipments\\CreateShipmentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\shipments\\DispatchCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\shipments\\LiveTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\shipments\\ShipmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\Departments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\Employees.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\ExecutiveTeam.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\PayrollBenefits.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\Performance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\SalesAgents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\TrainingDevelopment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\WorkersOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker-admin\\workers\\WorkersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\broker\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\CRMDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\CarrierDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\DriversPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\LoadBoardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\NewQuotePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\OwnerOperatorsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\PersonnelManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\QuoteTemplatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\RatesPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getInitialTab'. Either include it or remove the dependency array.","line":203,"column":6,"nodeType":"ArrayExpression","endLine":203,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [getInitialTab, location.pathname, searchParams]","fix":{"range":[6315,6348],"text":"[getInitialTab, location.pathname, searchParams]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useLocation } from 'react-router-dom';\r\nimport { \r\n  DollarSign, \r\n  TrendingUp, \r\n  Fuel, \r\n  Calculator, \r\n  Target, \r\n  Plus, \r\n  Filter, \r\n  Search, \r\n  Edit, \r\n  Trash2, \r\n  Copy, \r\n  Download, \r\n  Upload, \r\n  BarChart3,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Calendar,\r\n  MapPin,\r\n  Truck,\r\n  Package\r\n} from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\n\r\ninterface Rate {\r\n  id: string;\r\n  rateType: 'buy' | 'sell';\r\n  category: 'base' | 'fuel_surcharge' | 'accessorial';\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  transportMode: string;\r\n  origin: string;\r\n  destination: string;\r\n  effectiveDate: string;\r\n  expiryDate: string;\r\n  status: 'active' | 'inactive' | 'pending';\r\n  margin?: number;\r\n  target?: number;\r\n  description?: string;\r\n  conditions?: string[];\r\n}\r\n\r\nconst mockRates: Rate[] = [\r\n  {\r\n    id: 'BUY001',\r\n    rateType: 'buy',\r\n    category: 'base',\r\n    name: 'FTL Dry Van Rate',\r\n    amount: 2.85,\r\n    unit: '$/mile',\r\n    transportMode: 'FTL',\r\n    origin: 'Chicago, IL',\r\n    destination: 'Atlanta, GA',\r\n    effectiveDate: '2024-01-01',\r\n    expiryDate: '2024-06-30',\r\n    status: 'active',\r\n    margin: 0.45,\r\n    target: 3.30,\r\n    description: 'Standard dry van freight rate for Chicago to Atlanta corridor',\r\n    conditions: ['Minimum 48hr notice', 'No hazmat', 'Standard loading dock']\r\n  },\r\n  {\r\n    id: 'SELL001',\r\n    rateType: 'sell',\r\n    category: 'base',\r\n    name: 'FTL Reefer Rate',\r\n    amount: 3.75,\r\n    unit: '$/mile',\r\n    transportMode: 'FTL',\r\n    origin: 'Miami, FL',\r\n    destination: 'New York, NY',\r\n    effectiveDate: '2024-01-15',\r\n    expiryDate: '2024-07-15',\r\n    status: 'active',\r\n    margin: 0.65,\r\n    target: 4.40,\r\n    description: 'Temperature-controlled freight rate for produce shipments',\r\n    conditions: ['Temperature monitoring required', '24hr max transit', 'Reefer certified driver']\r\n  },\r\n  {\r\n    id: 'FUEL001',\r\n    rateType: 'buy',\r\n    category: 'fuel_surcharge',\r\n    name: 'National Fuel Surcharge',\r\n    amount: 0.42,\r\n    unit: '$/mile',\r\n    transportMode: 'All',\r\n    origin: 'National',\r\n    destination: 'National',\r\n    effectiveDate: '2024-01-01',\r\n    expiryDate: '2024-12-31',\r\n    status: 'active',\r\n    description: 'DOE-based fuel surcharge calculation',\r\n    conditions: ['Updated weekly', 'Based on DOE average']\r\n  },\r\n  {\r\n    id: 'ACC001',\r\n    rateType: 'sell',\r\n    category: 'accessorial',\r\n    name: 'Detention Rate',\r\n    amount: 75,\r\n    unit: '$/hour',\r\n    transportMode: 'All',\r\n    origin: 'All',\r\n    destination: 'All',\r\n    effectiveDate: '2024-01-01',\r\n    expiryDate: '2024-12-31',\r\n    status: 'active',\r\n    description: 'Detention charges after 2 hour free time',\r\n    conditions: ['2 hour free time', 'Proof required', 'Pre-approved only']\r\n  },\r\n  {\r\n    id: 'LTL001',\r\n    rateType: 'buy',\r\n    category: 'base',\r\n    name: 'LTL Standard Rate',\r\n    amount: 185,\r\n    unit: '$/shipment',\r\n    transportMode: 'LTL',\r\n    origin: 'California',\r\n    destination: 'Texas',\r\n    effectiveDate: '2024-02-01',\r\n    expiryDate: '2024-08-01',\r\n    status: 'active',\r\n    margin: 35,\r\n    target: 220,\r\n    description: 'LTL shipments under 10,000 lbs',\r\n    conditions: ['Palletized freight only', 'Standard liability']\r\n  },\r\n  {\r\n    id: 'INT001',\r\n    rateType: 'sell',\r\n    category: 'base',\r\n    name: 'Intermodal Rate',\r\n    amount: 1850,\r\n    unit: '$/container',\r\n    transportMode: 'Intermodal',\r\n    origin: 'Port of LA',\r\n    destination: 'Chicago Ramp',\r\n    effectiveDate: '2024-01-10',\r\n    expiryDate: '2024-06-10',\r\n    status: 'active',\r\n    margin: 285,\r\n    target: 2135,\r\n    description: '53ft container intermodal service',\r\n    conditions: ['Container provided', 'Rail schedule dependent', 'Drayage included']\r\n  }\r\n];\r\n\r\nconst transportModes = ['All', 'FTL', 'LTL', 'Intermodal', 'Expedited', 'White Glove', 'Flatbed', 'Tanker'];\r\nconst rateCategories = [\r\n  { value: 'base', label: 'Base Rates', icon: DollarSign },\r\n  { value: 'fuel_surcharge', label: 'Fuel Surcharge', icon: Fuel },\r\n  { value: 'accessorial', label: 'Accessorial', icon: Calculator }\r\n];\r\n\r\nconst RatesPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const location = useLocation();\r\n  \r\n  // Determine initial tab based on URL path or search params\r\n  const getInitialTab = () => {\r\n    const tabParam = searchParams.get('tab');\r\n    if (tabParam) return tabParam;\r\n    \r\n    const path = location.pathname;\r\n    if (path.includes('/buy')) return 'buy';\r\n    if (path.includes('/sell')) return 'sell';\r\n    if (path.includes('/fuel')) return 'fuel';\r\n    if (path.includes('/accessorial')) return 'accessorial';\r\n    if (path.includes('/margin')) return 'margin';\r\n    if (path.includes('/target')) return 'target';\r\n    \r\n    return 'all';\r\n  };\r\n  \r\n  const [activeTab, setActiveTab] = useState(getInitialTab());\r\n  const [selectedMode, setSelectedMode] = useState('All');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [selectedRate, setSelectedRate] = useState<Rate | null>(null);\r\n\r\n  // Update tab when URL changes\r\n  useEffect(() => {\r\n    setActiveTab(getInitialTab());\r\n  }, [location.pathname, searchParams]);\r\n\r\n  // Form state for creating/editing rates\r\n  const [formData, setFormData] = useState({\r\n    rateType: 'buy' as 'buy' | 'sell',\r\n    category: 'base' as 'base' | 'fuel_surcharge' | 'accessorial',\r\n    name: '',\r\n    amount: '',\r\n    unit: '$/mile',\r\n    transportMode: 'FTL',\r\n    origin: '',\r\n    destination: '',\r\n    effectiveDate: '',\r\n    expiryDate: '',\r\n    description: '',\r\n    conditions: ''\r\n  });\r\n\r\n  const filteredRates = mockRates.filter(rate => {\r\n    const matchesTab = activeTab === 'all' || \r\n      (activeTab === 'buy' && rate.rateType === 'buy') ||\r\n      (activeTab === 'sell' && rate.rateType === 'sell') ||\r\n      (activeTab === 'fuel' && rate.category === 'fuel_surcharge') ||\r\n      (activeTab === 'accessorial' && rate.category === 'accessorial') ||\r\n      (activeTab === 'margin' && rate.margin) ||\r\n      (activeTab === 'target' && rate.target);\r\n    \r\n    const matchesMode = selectedMode === 'All' || rate.transportMode === selectedMode || rate.transportMode === 'All';\r\n    const matchesSearch = rate.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.origin.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.destination.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = selectedCategory === 'all' || rate.category === selectedCategory;\r\n\r\n    return matchesTab && matchesMode && matchesSearch && matchesCategory;\r\n  });\r\n\r\n  const handleCreateRate = () => {\r\n    console.log('Creating rate:', formData);\r\n    setIsCreateDialogOpen(false);\r\n    // Reset form\r\n    setFormData({\r\n      rateType: 'buy',\r\n      category: 'base',\r\n      name: '',\r\n      amount: '',\r\n      unit: '$/mile',\r\n      transportMode: 'FTL',\r\n      origin: '',\r\n      destination: '',\r\n      effectiveDate: '',\r\n      expiryDate: '',\r\n      description: '',\r\n      conditions: ''\r\n    });\r\n  };\r\n\r\n  const handleEditRate = (rate: Rate) => {\r\n    setSelectedRate(rate);\r\n    setFormData({\r\n      rateType: rate.rateType,\r\n      category: rate.category,\r\n      name: rate.name,\r\n      amount: rate.amount.toString(),\r\n      unit: rate.unit,\r\n      transportMode: rate.transportMode,\r\n      origin: rate.origin,\r\n      destination: rate.destination,\r\n      effectiveDate: rate.effectiveDate,\r\n      expiryDate: rate.expiryDate,\r\n      description: rate.description || '',\r\n      conditions: rate.conditions?.join(', ') || ''\r\n    });\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const handleUpdateRate = () => {\r\n    console.log('Updating rate:', selectedRate?.id, formData);\r\n    setIsEditDialogOpen(false);\r\n    setSelectedRate(null);\r\n  };\r\n\r\n  const handleDeleteRate = (rateId: string) => {\r\n    console.log('Deleting rate:', rateId);\r\n  };\r\n\r\n  const handleDuplicateRate = (rate: Rate) => {\r\n    setFormData({\r\n      rateType: rate.rateType,\r\n      category: rate.category,\r\n      name: `${rate.name} (Copy)`,\r\n      amount: rate.amount.toString(),\r\n      unit: rate.unit,\r\n      transportMode: rate.transportMode,\r\n      origin: rate.origin,\r\n      destination: rate.destination,\r\n      effectiveDate: '',\r\n      expiryDate: '',\r\n      description: rate.description || '',\r\n      conditions: rate.conditions?.join(', ') || ''\r\n    });\r\n    setIsCreateDialogOpen(true);\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const variants = {\r\n      active: 'default',\r\n      inactive: 'secondary',\r\n      pending: 'outline'\r\n    };\r\n    return <Badge variant={variants[status as keyof typeof variants] as unknown}>{status}</Badge>;\r\n  };\r\n\r\n  const getRateTypeIcon = (type: string, category: string) => {\r\n    if (category === 'fuel_surcharge') return <Fuel className=\"h-4 w-4\" />;\r\n    if (category === 'accessorial') return <Calculator className=\"h-4 w-4\" />;\r\n    if (type === 'buy') return <TrendingUp className=\"h-4 w-4 text-red-500\" />;\r\n    return <DollarSign className=\"h-4 w-4 text-green-500\" />;\r\n  };\r\n\r\n  const stats = {\r\n    totalRates: mockRates.length,\r\n    activeRates: mockRates.filter(r => r.status === 'active').length,\r\n    avgMargin: mockRates.filter(r => r.margin).reduce((acc, r) => acc + (r.margin || 0), 0) / mockRates.filter(r => r.margin).length,\r\n    topTransportMode: 'FTL'\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-1 space-y-6 p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">Rate Management</h1>\r\n          <p className=\"text-muted-foreground\">Manage buy rates, sell rates, fuel surcharges, and accessorial charges</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Upload className=\"h-4 w-4 mr-2\" />\r\n            Import\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Create Rate\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl max-h-[90vh]\">\r\n              <DialogHeader>\r\n                <DialogTitle>Create New Rate</DialogTitle>\r\n                <DialogDescription>\r\n                  Set up a new rate for your transportation services\r\n                </DialogDescription>\r\n              </DialogHeader>\r\n              <ScrollArea className=\"max-h-[70vh] pr-4\">\r\n                <div className=\"grid gap-4 py-4\">\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"rateType\">Rate Type</Label>\r\n                      <Select value={formData.rateType} onValueChange={(value: 'buy' | 'sell') => setFormData({...formData, rateType: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"buy\">Buy Rate</SelectItem>\r\n                          <SelectItem value=\"sell\">Sell Rate</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"category\">Category</Label>\r\n                      <Select value={formData.category} onValueChange={(value: 'base' | 'fuel_surcharge' | 'accessorial') => setFormData({...formData, category: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"base\">Base Rate</SelectItem>\r\n                          <SelectItem value=\"fuel_surcharge\">Fuel Surcharge</SelectItem>\r\n                          <SelectItem value=\"accessorial\">Accessorial</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"name\">Rate Name</Label>\r\n                    <Input \r\n                      value={formData.name}\r\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n                      placeholder=\"e.g., FTL Dry Van Rate\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-3 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"amount\">Amount</Label>\r\n                      <Input \r\n                        type=\"number\"\r\n                        value={formData.amount}\r\n                        onChange={(e) => setFormData({...formData, amount: e.target.value})}\r\n                        placeholder=\"0.00\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"unit\">Unit</Label>\r\n                      <Select value={formData.unit} onValueChange={(value) => setFormData({...formData, unit: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"$/mile\">$/mile</SelectItem>\r\n                          <SelectItem value=\"$/hour\">$/hour</SelectItem>\r\n                          <SelectItem value=\"$/shipment\">$/shipment</SelectItem>\r\n                          <SelectItem value=\"$/container\">$/container</SelectItem>\r\n                          <SelectItem value=\"$/cwt\">$/cwt</SelectItem>\r\n                          <SelectItem value=\"%\">Percentage</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"transportMode\">Transport Mode</Label>\r\n                      <Select value={formData.transportMode} onValueChange={(value) => setFormData({...formData, transportMode: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {transportModes.filter(mode => mode !== 'All').map(mode => (\r\n                            <SelectItem key={mode} value={mode}>{mode}</SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"origin\">Origin</Label>\r\n                      <Input \r\n                        value={formData.origin}\r\n                        onChange={(e) => setFormData({...formData, origin: e.target.value})}\r\n                        placeholder=\"e.g., Chicago, IL\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"destination\">Destination</Label>\r\n                      <Input \r\n                        value={formData.destination}\r\n                        onChange={(e) => setFormData({...formData, destination: e.target.value})}\r\n                        placeholder=\"e.g., Atlanta, GA\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"effectiveDate\">Effective Date</Label>\r\n                      <Input \r\n                        type=\"date\"\r\n                        value={formData.effectiveDate}\r\n                        onChange={(e) => setFormData({...formData, effectiveDate: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"expiryDate\">Expiry Date</Label>\r\n                      <Input \r\n                        type=\"date\"\r\n                        value={formData.expiryDate}\r\n                        onChange={(e) => setFormData({...formData, expiryDate: e.target.value})}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"description\">Description</Label>\r\n                    <Textarea \r\n                      value={formData.description}\r\n                      onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                      placeholder=\"Rate description and notes\"\r\n                      rows={3}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"conditions\">Conditions (comma-separated)</Label>\r\n                    <Textarea \r\n                      value={formData.conditions}\r\n                      onChange={(e) => setFormData({...formData, conditions: e.target.value})}\r\n                      placeholder=\"e.g., Minimum 48hr notice, No hazmat, Standard loading dock\"\r\n                      rows={2}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </ScrollArea>\r\n              <div className=\"flex justify-end gap-2 pt-4\">\r\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateRate}>\r\n                  Create Rate\r\n                </Button>\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid gap-4 md:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Rates</CardTitle>\r\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{stats.totalRates}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Across all transport modes\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Rates</CardTitle>\r\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{stats.activeRates}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Currently in use\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Avg Margin</CardTitle>\r\n            <Target className=\"h-4 w-4 text-blue-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">${stats.avgMargin.toFixed(2)}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Per mile margin\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Top Mode</CardTitle>\r\n            <Truck className=\"h-4 w-4 text-orange-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{stats.topTransportMode}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Most active mode\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">Filters & Search</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex flex-wrap gap-4\">\r\n            <div className=\"flex-1 min-w-[200px]\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search rates, origins, destinations...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <Select value={selectedMode} onValueChange={setSelectedMode}>\r\n              <SelectTrigger className=\"w-[200px]\">\r\n                <SelectValue placeholder=\"Transport Mode\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {transportModes.map(mode => (\r\n                  <SelectItem key={mode} value={mode}>{mode}</SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\r\n              <SelectTrigger className=\"w-[200px]\">\r\n                <SelectValue placeholder=\"Rate Category\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Categories</SelectItem>\r\n                {rateCategories.map(category => (\r\n                  <SelectItem key={category.value} value={category.value}>\r\n                    {category.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Rate Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-7\">\r\n          <TabsTrigger value=\"all\">All Rates</TabsTrigger>\r\n          <TabsTrigger value=\"buy\">Buy Rates</TabsTrigger>\r\n          <TabsTrigger value=\"sell\">Sell Rates</TabsTrigger>\r\n          <TabsTrigger value=\"fuel\">Fuel Surcharge</TabsTrigger>\r\n          <TabsTrigger value=\"accessorial\">Accessorial</TabsTrigger>\r\n          <TabsTrigger value=\"margin\">Margin Rates</TabsTrigger>\r\n          <TabsTrigger value=\"target\">Target Rates</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value={activeTab} className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                Rate Overview ({filteredRates.length} rates)\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"rounded-md border\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Type</TableHead>\r\n                      <TableHead>Rate Name</TableHead>\r\n                      <TableHead>Amount</TableHead>\r\n                      <TableHead>Route</TableHead>\r\n                      <TableHead>Mode</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Dates</TableHead>\r\n                      <TableHead>Margin</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredRates.map((rate) => (\r\n                      <TableRow key={rate.id}>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getRateTypeIcon(rate.rateType, rate.category)}\r\n                            <div>\r\n                              <div className=\"font-medium capitalize\">{rate.rateType}</div>\r\n                              <div className=\"text-xs text-muted-foreground capitalize\">\r\n                                {rate.category.replace('_', ' ')}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div>\r\n                            <div className=\"font-medium\">{rate.name}</div>\r\n                            <div className=\"text-xs text-muted-foreground\">{rate.id}</div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"font-medium\">${rate.amount.toFixed(2)}</div>\r\n                          <div className=\"text-xs text-muted-foreground\">{rate.unit}</div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-1 text-sm\">\r\n                            <MapPin className=\"h-3 w-3 text-muted-foreground\" />\r\n                            <span className=\"text-xs\">\r\n                              {rate.origin} ‚Üí {rate.destination}\r\n                            </span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n                            <Package className=\"h-3 w-3\" />\r\n                            {rate.transportMode}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>{getStatusBadge(rate.status)}</TableCell>\r\n                        <TableCell>\r\n                          <div className=\"text-xs\">\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Calendar className=\"h-3 w-3\" />\r\n                              {new Date(rate.effectiveDate).toLocaleDateString()}\r\n                            </div>\r\n                            <div className=\"text-muted-foreground\">\r\n                              to {new Date(rate.expiryDate).toLocaleDateString()}\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {rate.margin ? (\r\n                            <div>\r\n                              <div className=\"font-medium text-green-600\">\r\n                                +${rate.margin.toFixed(2)}\r\n                              </div>\r\n                              {rate.target && (\r\n                                <div className=\"text-xs text-muted-foreground\">\r\n                                  Target: ${rate.target.toFixed(2)}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          ) : (\r\n                            <span className=\"text-muted-foreground\">-</span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleEditRate(rate)}\r\n                            >\r\n                              <Edit className=\"h-3 w-3\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDuplicateRate(rate)}\r\n                            >\r\n                              <Copy className=\"h-3 w-3\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteRate(rate.id)}\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Edit Rate Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent className=\"max-w-2xl max-h-[90vh]\">\r\n          <DialogHeader>\r\n            <DialogTitle>Edit Rate</DialogTitle>\r\n            <DialogDescription>\r\n              Update the rate information\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <ScrollArea className=\"max-h-[70vh] pr-4\">\r\n            <div className=\"grid gap-4 py-4\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"rateType\">Rate Type</Label>\r\n                  <Select value={formData.rateType} onValueChange={(value: 'buy' | 'sell') => setFormData({...formData, rateType: value})}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"buy\">Buy Rate</SelectItem>\r\n                      <SelectItem value=\"sell\">Sell Rate</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"category\">Category</Label>\r\n                  <Select value={formData.category} onValueChange={(value: 'base' | 'fuel_surcharge' | 'accessorial') => setFormData({...formData, category: value})}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"base\">Base Rate</SelectItem>\r\n                      <SelectItem value=\"fuel_surcharge\">Fuel Surcharge</SelectItem>\r\n                      <SelectItem value=\"accessorial\">Accessorial</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"name\">Rate Name</Label>\r\n                <Input \r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n                  placeholder=\"e.g., FTL Dry Van Rate\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-3 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"amount\">Amount</Label>\r\n                  <Input \r\n                    type=\"number\"\r\n                    value={formData.amount}\r\n                    onChange={(e) => setFormData({...formData, amount: e.target.value})}\r\n                    placeholder=\"0.00\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"unit\">Unit</Label>\r\n                  <Select value={formData.unit} onValueChange={(value) => setFormData({...formData, unit: value})}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"$/mile\">$/mile</SelectItem>\r\n                      <SelectItem value=\"$/hour\">$/hour</SelectItem>\r\n                      <SelectItem value=\"$/shipment\">$/shipment</SelectItem>\r\n                      <SelectItem value=\"$/container\">$/container</SelectItem>\r\n                      <SelectItem value=\"$/cwt\">$/cwt</SelectItem>\r\n                      <SelectItem value=\"%\">Percentage</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"transportMode\">Transport Mode</Label>\r\n                  <Select value={formData.transportMode} onValueChange={(value) => setFormData({...formData, transportMode: value})}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {transportModes.filter(mode => mode !== 'All').map(mode => (\r\n                        <SelectItem key={mode} value={mode}>{mode}</SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"origin\">Origin</Label>\r\n                  <Input \r\n                    value={formData.origin}\r\n                    onChange={(e) => setFormData({...formData, origin: e.target.value})}\r\n                    placeholder=\"e.g., Chicago, IL\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"destination\">Destination</Label>\r\n                  <Input \r\n                    value={formData.destination}\r\n                    onChange={(e) => setFormData({...formData, destination: e.target.value})}\r\n                    placeholder=\"e.g., Atlanta, GA\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"effectiveDate\">Effective Date</Label>\r\n                  <Input \r\n                    type=\"date\"\r\n                    value={formData.effectiveDate}\r\n                    onChange={(e) => setFormData({...formData, effectiveDate: e.target.value})}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"expiryDate\">Expiry Date</Label>\r\n                  <Input \r\n                    type=\"date\"\r\n                    value={formData.expiryDate}\r\n                    onChange={(e) => setFormData({...formData, expiryDate: e.target.value})}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"description\">Description</Label>\r\n                <Textarea \r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                  placeholder=\"Rate description and notes\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"conditions\">Conditions (comma-separated)</Label>\r\n                <Textarea \r\n                  value={formData.conditions}\r\n                  onChange={(e) => setFormData({...formData, conditions: e.target.value})}\r\n                  placeholder=\"e.g., Minimum 48hr notice, No hazmat, Standard loading dock\"\r\n                  rows={2}\r\n                />\r\n              </div>\r\n            </div>\r\n          </ScrollArea>\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleUpdateRate}>\r\n              Update Rate\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RatesPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\ShipmentsManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\ShipmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\dispatch\\DispatchPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\documents\\DocumentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\drivers\\DriversPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\fleet\\FleetManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\insurance\\InsurancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\loads\\LoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\maintenance\\MaintenancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\AccessorialRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\BuyRates.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBuyRates'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBuyRates]","fix":{"range":[1769,1771],"text":"[fetchBuyRates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\n// CarrierLayout import removed - layout is provided by App.tsx routing\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { DollarSign, Search, Plus, Filter, MapPin, Calendar, Edit, Trash2, TrendingDown, Truck, Package } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst BuyRates = () => {\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedMode, setSelectedMode] = useState('all');\r\n  const [selectedEquipment, setSelectedEquipment] = useState('all');\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [buyRates, setBuyRates] = useState<unknown[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const transportModes = ['OTR Dry Van', 'Refrigerated', 'Flatbed', 'Tanker', 'LTL', 'Expedited'];\r\n  const equipmentTypes = ['53ft Dry Van', '53ft Reefer', '48ft Flatbed', 'Step Deck', 'Lowboy', 'Tanker', 'Box Truck'];\r\n\r\n  useEffect(() => {\r\n    fetchBuyRates();\r\n  }, []);\r\n\r\n  const fetchBuyRates = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('carrier_rates')\r\n        .select(`\r\n          *,\r\n          companies (name)\r\n        `)\r\n        .eq('rate_type', 'buy');\r\n\r\n      if (error) throw error;\r\n\r\n      const formattedRates = data?.map(rate => ({\r\n        id: rate.id,\r\n        origin: rate.origin_zone?.split(',')[0] || 'Unknown',\r\n        destination: rate.destination_zone?.split(',')[0] || 'Unknown',\r\n        mode: rate.equipment_type || 'OTR Dry Van',\r\n        equipment: rate.equipment_type || '53ft Dry Van',\r\n        ratePerMile: rate.rate_per_mile || 0,\r\n        rate: (rate.rate_per_mile || 0) * 1000, // Assuming 1000 miles average\r\n        mileage: 1000,\r\n        fuelSurcharge: rate.fuel_surcharge_rate || 0,\r\n        validUntil: rate.expiry_date || '2024-12-31',\r\n        status: new Date(rate.expiry_date || '9999-12-31') > new Date() ? 'active' : 'expired',\r\n        company: rate.companies?.name || 'Direct'\r\n      })) || [];\r\n\r\n      setBuyRates(formattedRates);\r\n    } catch (error) {\r\n      console.error('Error fetching buy rates:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch buy rates\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateRate = async () => {\r\n    // Implementation for creating new rate\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Buy rate created successfully\",\r\n    });\r\n    setIsCreateDialogOpen(false);\r\n  };\r\n\r\n  const filteredRates = buyRates.filter(rate => {\r\n    const matchesSearch = \r\n      rate.origin.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.destination.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesMode = selectedMode === 'all' || rate.mode === selectedMode;\r\n    const matchesEquipment = selectedEquipment === 'all' || rate.equipment === selectedEquipment;\r\n    \r\n    return matchesSearch && matchesMode && matchesEquipment;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex justify-center items-center min-h-96\">\r\n          <div className=\"text-lg\">Loading buy rates...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\r\n              <TrendingDown className=\"h-8 w-8 text-red-600\" />\r\n              Buy Rates\r\n            </h1>\r\n            <p className=\"text-muted-foreground\">Manage rates you pay to drivers and owner-operators</p>\r\n          </div>\r\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add Buy Rate\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl\">\r\n              <DialogHeader>\r\n                <DialogTitle>Create New Buy Rate</DialogTitle>\r\n                <DialogDescription>Set a new rate you'll pay to drivers or owner-operators</DialogDescription>\r\n              </DialogHeader>\r\n              <Tabs defaultValue=\"basic\" className=\"w-full\">\r\n                <TabsList className=\"grid w-full grid-cols-3\">\r\n                  <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\r\n                  <TabsTrigger value=\"rates\">Rate Details</TabsTrigger>\r\n                  <TabsTrigger value=\"conditions\">Conditions</TabsTrigger>\r\n                </TabsList>\r\n                \r\n                <TabsContent value=\"basic\" className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"origin\">Origin</Label>\r\n                      <Input id=\"origin\" placeholder=\"Dallas, TX\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"destination\">Destination</Label>\r\n                      <Input id=\"destination\" placeholder=\"Los Angeles, CA\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"mode\">Transportation Mode</Label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select mode\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {transportModes.map(mode => (\r\n                            <SelectItem key={mode} value={mode.toLowerCase().replace(' ', '-')}>{mode}</SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"equipment\">Equipment Type</Label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select equipment\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {equipmentTypes.map(eq => (\r\n                            <SelectItem key={eq} value={eq.toLowerCase().replace(' ', '-')}>{eq}</SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"rates\" className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-3 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"ratePerMile\">Rate per Mile ($)</Label>\r\n                      <Input id=\"ratePerMile\" type=\"number\" placeholder=\"2.25\" step=\"0.01\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"fuelSurcharge\">Fuel Surcharge ($/mi)</Label>\r\n                      <Input id=\"fuelSurcharge\" type=\"number\" placeholder=\"0.35\" step=\"0.01\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"minimumRate\">Minimum Rate ($)</Label>\r\n                      <Input id=\"minimumRate\" type=\"number\" placeholder=\"500\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"mileage\">Estimated Mileage</Label>\r\n                      <Input id=\"mileage\" type=\"number\" placeholder=\"1350\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"totalRate\">Total Rate ($)</Label>\r\n                      <Input id=\"totalRate\" type=\"number\" placeholder=\"3037.50\" />\r\n                    </div>\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"conditions\" className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"effectiveDate\">Effective Date</Label>\r\n                      <Input id=\"effectiveDate\" type=\"date\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"expiryDate\">Expiry Date</Label>\r\n                      <Input id=\"expiryDate\" type=\"date\" />\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"conditions\">Special Conditions</Label>\r\n                    <Input id=\"conditions\" placeholder=\"Hazmat certified, experience required, etc.\" />\r\n                  </div>\r\n                  <div className=\"flex justify-end\">\r\n                    <Button onClick={handleCreateRate} className=\"w-32\">Create Rate</Button>\r\n                  </div>\r\n                </TabsContent>\r\n              </Tabs>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n\r\n        {/* Summary Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Buy Rates</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{buyRates.length}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Active rate cards</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Average Rate/Mile</CardTitle>\r\n              <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                ${buyRates.length > 0 ? (buyRates.reduce((sum, rate) => sum + rate.ratePerMile, 0) / buyRates.length).toFixed(2) : '0.00'}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">Weighted average</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Monthly Spend</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">$285,750</div>\r\n              <p className=\"text-xs text-muted-foreground\">Driver payments</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Routes</CardTitle>\r\n              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{buyRates.filter(rate => rate.status === 'active').length}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Current routes</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Filter Buy Rates</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex gap-4\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search by origin or destination...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedMode} onValueChange={setSelectedMode}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"All Modes\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Modes</SelectItem>\r\n                  {transportModes.map(mode => (\r\n                    <SelectItem key={mode} value={mode}>{mode}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={selectedEquipment} onValueChange={setSelectedEquipment}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"All Equipment\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Equipment</SelectItem>\r\n                  {equipmentTypes.map(eq => (\r\n                    <SelectItem key={eq} value={eq}>{eq}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <Button variant=\"outline\">\r\n                <Filter className=\"h-4 w-4 mr-2\" />\r\n                More Filters\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Buy Rates Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Driver & Owner-Operator Buy Rates</CardTitle>\r\n            <CardDescription>Rates you pay for freight transportation services</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Route</TableHead>\r\n                  <TableHead>Mode</TableHead>\r\n                  <TableHead>Equipment</TableHead>\r\n                  <TableHead>Rate/Mile</TableHead>\r\n                  <TableHead>Fuel Surcharge</TableHead>\r\n                  <TableHead>Total Rate</TableHead>\r\n                  <TableHead>Valid Until</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredRates.map((rate) => (\r\n                  <TableRow key={rate.id}>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\r\n                        <span className=\"text-sm font-medium\">{rate.origin} ‚Üí {rate.destination}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Truck className=\"h-3 w-3 text-blue-600\" />\r\n                        <span className=\"text-sm\">{rate.mode}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant=\"outline\">{rate.equipment}</Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"font-mono font-semibold\">${rate.ratePerMile.toFixed(2)}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"font-mono\">${rate.fuelSurcharge.toFixed(2)}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <DollarSign className=\"h-3 w-3\" />\r\n                        <span className=\"font-semibold\">{rate.rate.toLocaleString()}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\r\n                        {rate.validUntil}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={rate.status === 'active' ? 'default' : 'secondary'}>\r\n                        {rate.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <Edit className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <Trash2 className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Rate Analytics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Top Paying Routes</CardTitle>\r\n              <CardDescription>Highest rate per mile routes</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {buyRates\r\n                  .sort((a, b) => b.ratePerMile - a.ratePerMile)\r\n                  .slice(0, 5)\r\n                  .map((rate) => (\r\n                    <div key={rate.id} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\r\n                      <div>\r\n                        <span className=\"text-sm font-medium\">{rate.origin} ‚Üí {rate.destination}</span>\r\n                        <div className=\"text-xs text-muted-foreground\">{rate.mode}</div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <Badge variant=\"default\">${rate.ratePerMile.toFixed(2)}/mi</Badge>\r\n                        <div className=\"text-xs text-muted-foreground\">${rate.rate.toLocaleString()} total</div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Mode Distribution</CardTitle>\r\n              <CardDescription>Buy rates by transportation mode</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {transportModes.map((mode) => {\r\n                  const count = buyRates.filter(rate => rate.mode === mode).length;\r\n                  const percentage = (count / buyRates.length) * 100;\r\n                  return (\r\n                    <div key={mode} className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm\">{mode}</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-24 bg-gray-200 rounded-full h-2\">\r\n                          <div \r\n                            className=\"bg-blue-600 h-2 rounded-full\" \r\n                            style={{ width: `${percentage}%` }}\r\n                          ></div>\r\n                        </div>\r\n                        <span className=\"text-sm font-medium\">{count}</span>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuyRates;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\CarrierRatesManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\FuelSurcharge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\MarginAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\RatesOverview.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRateMetrics'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRateMetrics]","fix":{"range":[1187,1189],"text":"[fetchRateMetrics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\n// CarrierLayout import removed - layout is provided by App.tsx routing\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { TrendingUp, TrendingDown, DollarSign, Fuel, Package, BarChart3, Target, ArrowUpRight, ArrowDownRight, Truck, Plane, Ship, Train } from 'lucide-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst RatesOverview = () => {\r\n  const { toast } = useToast();\r\n  const [loading, setLoading] = useState(true);\r\n  const [rateMetrics, setRateMetrics] = useState({\r\n    totalRates: 0,\r\n    activeRates: 0,\r\n    avgMargin: 0,\r\n    fuelSurcharge: 0,\r\n    monthlyRevenue: 0,\r\n    marginTrend: 'up'\r\n  });\r\n  const [recentActivity, setRecentActivity] = useState<unknown[]>([]);\r\n  const [modeBreakdown, setModeBreakdown] = useState<unknown[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchRateMetrics();\r\n    fetchRecentActivity();\r\n    fetchModeBreakdown();\r\n  }, []);\r\n\r\n  const fetchRateMetrics = async () => {\r\n    try {\r\n      const { data: rates, error } = await supabase\r\n        .from('carrier_rates')\r\n        .select('*');\r\n\r\n      if (error) throw error;\r\n\r\n      // Calculate metrics\r\n      const total = rates?.length || 0;\r\n      const active = rates?.filter(r => new Date(r.expiry_date || '9999-12-31') > new Date()).length || 0;\r\n      const avgRate = rates?.reduce((sum, r) => sum + (r.rate_per_mile || 0), 0) / (total || 1);\r\n      const avgFuel = rates?.reduce((sum, r) => sum + (r.fuel_surcharge_rate || 0), 0) / (total || 1);\r\n\r\n      setRateMetrics({\r\n        totalRates: total,\r\n        activeRates: active,\r\n        avgMargin: 22.5, // Calculate from actual data\r\n        fuelSurcharge: Number(avgFuel.toFixed(2)),\r\n        monthlyRevenue: 485750,\r\n        marginTrend: 'up'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching rate metrics:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch rate metrics\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRecentActivity = async () => {\r\n    // Mock recent activity - replace with real data\r\n    setRecentActivity([\r\n      { id: 1, type: 'Rate Update', description: 'OTR Dry Van rates updated for TX-CA lane', time: '2 hours ago' },\r\n      { id: 2, type: 'Fuel Adjustment', description: 'Fuel surcharge increased by 0.03/mile', time: '4 hours ago' },\r\n      { id: 3, type: 'New Rate', description: 'Added reefer rates for FL-NY corridor', time: '6 hours ago' },\r\n      { id: 4, type: 'Margin Alert', description: 'Low margin detected on ATL-DEN route', time: '8 hours ago' }\r\n    ]);\r\n  };\r\n\r\n  const fetchModeBreakdown = async () => {\r\n    setModeBreakdown([\r\n      { mode: 'OTR Dry Van', icon: Truck, count: 145, revenue: 275000, margin: 24.5, color: 'blue' },\r\n      { mode: 'Refrigerated', icon: Truck, count: 89, revenue: 185000, margin: 28.2, color: 'green' },\r\n      { mode: 'Flatbed', icon: Truck, count: 67, revenue: 145000, margin: 21.8, color: 'orange' },\r\n      { mode: 'LTL', icon: Package, count: 234, revenue: 95000, margin: 18.5, color: 'purple' }\r\n    ]);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\r\n              <BarChart3 className=\"h-8 w-8 text-blue-600\" />\r\n              Rates Overview\r\n            </h1>\r\n            <p className=\"text-muted-foreground\">Monitor and manage your freight rates</p>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Loading skeleton */}\r\n        {[...Array(3)].map((_, i) => (\r\n          <div key={i} className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n            {[...Array(4)].map((_, j) => (\r\n              <div key={j} className=\"h-24 bg-gray-200 rounded animate-pulse\"></div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\r\n              <BarChart3 className=\"h-8 w-8 text-blue-600\" />\r\n              Rate Management\r\n            </h1>\r\n            <p className=\"text-muted-foreground\">Comprehensive rate management across all transportation modes</p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Button variant=\"outline\">\r\n              <Package className=\"h-4 w-4 mr-2\" />\r\n              Import Rates\r\n            </Button>\r\n            <Button>\r\n              <Target className=\"h-4 w-4 mr-2\" />\r\n              Rate Calculator\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Key Metrics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Rate Cards</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{rateMetrics.totalRates}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Across all modes</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Rates</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{rateMetrics.activeRates}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Currently effective</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Avg Margin</CardTitle>\r\n              <ArrowUpRight className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{rateMetrics.avgMargin}%</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {rateMetrics.marginTrend === 'up' ? (\r\n                  <span className=\"text-green-600\">‚Üë +2.1% vs last month</span>\r\n                ) : (\r\n                  <span className=\"text-red-600\">‚Üì -1.3% vs last month</span>\r\n                )}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Fuel Surcharge</CardTitle>\r\n              <Fuel className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${rateMetrics.fuelSurcharge}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Average per mile</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${rateMetrics.monthlyRevenue.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Rate-driven revenue</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Transportation Mode Breakdown */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Rate Performance by Transportation Mode</CardTitle>\r\n            <CardDescription>Revenue and margin analysis across different freight modes</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {modeBreakdown.map((mode, index) => {\r\n                const IconComponent = mode.icon;\r\n                return (\r\n                  <div key={index} className={`p-4 rounded-lg border-l-4 border-${mode.color}-500 bg-${mode.color}-50`}>\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <IconComponent className={`h-5 w-5 text-${mode.color}-600`} />\r\n                      <Badge variant=\"outline\">{mode.count} rates</Badge>\r\n                    </div>\r\n                    <h4 className=\"font-semibold text-sm\">{mode.mode}</h4>\r\n                    <div className=\"mt-2 space-y-1\">\r\n                      <div className=\"text-lg font-bold\">${mode.revenue.toLocaleString()}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {mode.margin}% margin\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <Link to=\"/carrier-admin/rates/buy\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-full\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Buy Rates</CardTitle>\r\n                <TrendingDown className=\"h-4 w-4 text-red-600\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-xl font-bold\">Manage Driver Pay</div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Set rates you pay to drivers and owner-operators\r\n                </p>\r\n                <div className=\"mt-3 text-sm text-blue-600\">Configure rates ‚Üí</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n\r\n          <Link to=\"/carrier-admin/rates/sell\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-full\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Sell Rates</CardTitle>\r\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-xl font-bold\">Customer Pricing</div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Rates you charge to brokers and direct customers\r\n                </p>\r\n                <div className=\"mt-3 text-sm text-blue-600\">Set pricing ‚Üí</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n\r\n          <Link to=\"/carrier-admin/rates/fuel\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-full\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Fuel Surcharge</CardTitle>\r\n                <Fuel className=\"h-4 w-4 text-orange-600\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-xl font-bold\">Fuel Management</div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Dynamic fuel surcharge calculations\r\n                </p>\r\n                <div className=\"mt-3 text-sm text-blue-600\">Manage fuel ‚Üí</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Secondary Actions */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <Link to=\"/carrier-admin/rates/accessorial\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Package className=\"h-5 w-5 text-purple-600\" />\r\n                  Accessorial Rates\r\n                </CardTitle>\r\n                <CardDescription>Additional services and fees</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-sm\">Detention, lumper fees, and extra services</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n\r\n          <Link to=\"/carrier-admin/rates/margin\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <BarChart3 className=\"h-5 w-5 text-blue-600\" />\r\n                  Margin Analysis\r\n                </CardTitle>\r\n                <CardDescription>Profitability insights</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-sm\">Analyze and optimize your profit margins</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n\r\n          <Link to=\"/carrier-admin/rates/target\" className=\"block\">\r\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Target className=\"h-5 w-5 text-green-600\" />\r\n                  Target Rates\r\n                </CardTitle>\r\n                <CardDescription>Rate goals and targets</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-sm\">Set and track rate performance targets</div>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Recent Rate Activity</CardTitle>\r\n            <CardDescription>Latest rate changes and updates</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              {recentActivity.map((activity) => (\r\n                <div key={activity.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\r\n                    <div>\r\n                      <p className=\"text-sm font-medium\">{activity.description}</p>\r\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\r\n                    </div>\r\n                  </div>\r\n                  <Badge variant=\"outline\">{activity.type}</Badge>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RatesOverview;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\SellRates.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSellRates'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSellRates]","fix":{"range":[1812,1814],"text":"[fetchSellRates]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\n// CarrierLayout import removed - layout is provided by App.tsx routing\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { TrendingUp, Search, Plus, Filter, MapPin, Calendar, Edit, Trash2, DollarSign, Target, Truck, BarChart3 } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst SellRates = () => {\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedMode, setSelectedMode] = useState('all');\r\n  const [selectedCustomer, setSelectedCustomer] = useState('all');\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [sellRates, setSellRates] = useState<unknown[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const transportModes = ['OTR Dry Van', 'Refrigerated', 'Flatbed', 'Tanker', 'LTL', 'Expedited'];\r\n  const customerTypes = ['Freight Brokers', 'Direct Shippers', 'Logistics Companies', '3PL Partners'];\r\n\r\n  useEffect(() => {\r\n    fetchSellRates();\r\n  }, []);\r\n\r\n  const fetchSellRates = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('carrier_rates')\r\n        .select(`\r\n          *,\r\n          companies (name)\r\n        `)\r\n        .eq('rate_type', 'sell');\r\n\r\n      if (error) throw error;\r\n\r\n      // Calculate sell rates based on buy rates with margin\r\n      const { data: buyRates } = await supabase\r\n        .from('carrier_rates')\r\n        .select('*')\r\n        .eq('rate_type', 'buy');\r\n\r\n      const formattedRates = data?.map(rate => {\r\n        const buyRate = buyRates?.find(br => \r\n          br.origin_zone === rate.origin_zone && \r\n          br.destination_zone === rate.destination_zone\r\n        );\r\n        const margin = 0.25; // 25% margin\r\n        const calculatedSellRate = buyRate ? (buyRate.rate_per_mile || 0) * (1 + margin) : (rate.rate_per_mile || 0);\r\n\r\n        return {\r\n          id: rate.id,\r\n          origin: rate.origin_zone?.split(',')[0] || 'Unknown',\r\n          destination: rate.destination_zone?.split(',')[0] || 'Unknown',\r\n          mode: rate.equipment_type || 'OTR Dry Van',\r\n          customer: rate.companies?.name || 'Broker Network',\r\n          buyRate: buyRate?.rate_per_mile || 0,\r\n          sellRate: calculatedSellRate,\r\n          margin: buyRate ? ((calculatedSellRate - buyRate.rate_per_mile) / buyRate.rate_per_mile * 100) : 25,\r\n          totalRate: calculatedSellRate * 1000, // Assuming 1000 miles\r\n          validUntil: rate.expiry_date || '2024-12-31',\r\n          status: new Date(rate.expiry_date || '9999-12-31') > new Date() ? 'active' : 'expired',\r\n          autoAdjust: true,\r\n          fuelSurcharge: rate.fuel_surcharge_rate || 0\r\n        };\r\n      }) || [];\r\n\r\n      setSellRates(formattedRates);\r\n    } catch (error) {\r\n      console.error('Error fetching sell rates:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch sell rates\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateRate = async () => {\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Sell rate created successfully\",\r\n    });\r\n    setIsCreateDialogOpen(false);\r\n  };\r\n\r\n  const filteredRates = sellRates.filter(rate => {\r\n    const matchesSearch = \r\n      rate.origin.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.destination.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      rate.customer.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesMode = selectedMode === 'all' || rate.mode === selectedMode;\r\n    const matchesCustomer = selectedCustomer === 'all' || rate.customer.includes(selectedCustomer);\r\n    \r\n    return matchesSearch && matchesMode && matchesCustomer;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex justify-center items-center min-h-96\">\r\n          <div className=\"text-lg\">Loading sell rates...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\r\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\r\n              Sell Rates\r\n            </h1>\r\n            <p className=\"text-muted-foreground\">Manage rates you charge to brokers and direct customers</p>\r\n          </div>\r\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add Sell Rate\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl\">\r\n              <DialogHeader>\r\n                <DialogTitle>Create New Sell Rate</DialogTitle>\r\n                <DialogDescription>Set pricing for customers and brokers</DialogDescription>\r\n              </DialogHeader>\r\n              <Tabs defaultValue=\"basic\" className=\"w-full\">\r\n                <TabsList className=\"grid w-full grid-cols-3\">\r\n                  <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\r\n                  <TabsTrigger value=\"pricing\">Pricing</TabsTrigger>\r\n                  <TabsTrigger value=\"settings\">Settings</TabsTrigger>\r\n                </TabsList>\r\n                \r\n                <TabsContent value=\"basic\" className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"origin\">Origin</Label>\r\n                      <Input id=\"origin\" placeholder=\"Dallas, TX\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"destination\">Destination</Label>\r\n                      <Input id=\"destination\" placeholder=\"Los Angeles, CA\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"mode\">Transportation Mode</Label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select mode\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {transportModes.map(mode => (\r\n                            <SelectItem key={mode} value={mode.toLowerCase().replace(' ', '-')}>{mode}</SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"customer\">Customer Type</Label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select customer type\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {customerTypes.map(type => (\r\n                            <SelectItem key={type} value={type.toLowerCase().replace(' ', '-')}>{type}</SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"pricing\" className=\"space-y-4\">\r\n                  <div className=\"p-4 bg-blue-50 rounded-lg border\">\r\n                    <h4 className=\"font-semibold text-sm mb-2\">Rate Calculation</h4>\r\n                    <div className=\"text-sm text-muted-foreground mb-3\">\r\n                      Sell Rate = Buy Rate + Margin + Fuel Surcharge + Accessorials\r\n                    </div>\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div>\r\n                        <Label htmlFor=\"buyRate\">Buy Rate ($/mi)</Label>\r\n                        <Input id=\"buyRate\" type=\"number\" placeholder=\"2.25\" step=\"0.01\" />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"margin\">Margin (%)</Label>\r\n                        <Input id=\"margin\" type=\"number\" placeholder=\"25\" />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-3 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"sellRate\">Sell Rate ($/mi)</Label>\r\n                      <Input id=\"sellRate\" type=\"number\" placeholder=\"2.81\" step=\"0.01\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"fuelSurcharge\">Fuel Surcharge ($/mi)</Label>\r\n                      <Input id=\"fuelSurcharge\" type=\"number\" placeholder=\"0.35\" step=\"0.01\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"accessorial\">Accessorial (%)</Label>\r\n                      <Input id=\"accessorial\" type=\"number\" placeholder=\"5\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"totalSellRate\">Total Sell Rate ($/mi)</Label>\r\n                      <Input id=\"totalSellRate\" type=\"number\" placeholder=\"3.16\" step=\"0.01\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"minimumRate\">Minimum Rate ($)</Label>\r\n                      <Input id=\"minimumRate\" type=\"number\" placeholder=\"750\" />\r\n                    </div>\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"settings\" className=\"space-y-4\">\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"autoAdjust\">Auto-adjust with market rates</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">Automatically update rates based on market conditions</p>\r\n                      </div>\r\n                      <Switch id=\"autoAdjust\" />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"dynamicFuel\">Dynamic fuel surcharge</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">Update fuel surcharge based on current fuel prices</p>\r\n                      </div>\r\n                      <Switch id=\"dynamicFuel\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"effectiveDate\">Effective Date</Label>\r\n                      <Input id=\"effectiveDate\" type=\"date\" />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"expiryDate\">Expiry Date</Label>\r\n                      <Input id=\"expiryDate\" type=\"date\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex justify-end\">\r\n                    <Button onClick={handleCreateRate} className=\"w-32\">Create Rate</Button>\r\n                  </div>\r\n                </TabsContent>\r\n              </Tabs>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n\r\n        {/* Summary Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Sell Rates</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{sellRates.length}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Customer pricing</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Average Margin</CardTitle>\r\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                {sellRates.length > 0 ? (sellRates.reduce((sum, rate) => sum + rate.margin, 0) / sellRates.length).toFixed(1) : '0.0'}%\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">Profit margin</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">$485,750</div>\r\n              <p className=\"text-xs text-muted-foreground\">Customer payments</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Customers</CardTitle>\r\n              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                {sellRates.filter(rate => rate.status === 'active').length}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">Current rates</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Filter Sell Rates</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex gap-4\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search by route or customer...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedMode} onValueChange={setSelectedMode}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"All Modes\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Modes</SelectItem>\r\n                  {transportModes.map(mode => (\r\n                    <SelectItem key={mode} value={mode}>{mode}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue placeholder=\"All Customers\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Customers</SelectItem>\r\n                  {customerTypes.map(type => (\r\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <Button variant=\"outline\">\r\n                <Filter className=\"h-4 w-4 mr-2\" />\r\n                Advanced\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Sell Rates Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Customer & Broker Sell Rates</CardTitle>\r\n            <CardDescription>Pricing for freight transportation services</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Route</TableHead>\r\n                  <TableHead>Mode</TableHead>\r\n                  <TableHead>Customer</TableHead>\r\n                  <TableHead>Buy Rate</TableHead>\r\n                  <TableHead>Sell Rate</TableHead>\r\n                  <TableHead>Margin</TableHead>\r\n                  <TableHead>Total Rate</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredRates.map((rate) => (\r\n                  <TableRow key={rate.id}>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\r\n                        <span className=\"text-sm font-medium\">{rate.origin} ‚Üí {rate.destination}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Truck className=\"h-3 w-3 text-blue-600\" />\r\n                        <span className=\"text-sm\">{rate.mode}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"text-sm\">{rate.customer}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"font-mono text-red-600\">${rate.buyRate.toFixed(2)}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"font-mono font-semibold text-green-600\">${rate.sellRate.toFixed(2)}</span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={rate.margin >= 20 ? 'default' : 'secondary'}>\r\n                        {rate.margin.toFixed(1)}%\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <DollarSign className=\"h-3 w-3\" />\r\n                        <span className=\"font-semibold\">{rate.totalRate.toLocaleString()}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge variant={rate.status === 'active' ? 'default' : 'secondary'}>\r\n                          {rate.status}\r\n                        </Badge>\r\n                        {rate.autoAdjust && (\r\n                          <Badge variant=\"outline\" className=\"text-xs\">Auto</Badge>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <Edit className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <BarChart3 className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Rate Analytics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Top Margin Routes</CardTitle>\r\n              <CardDescription>Highest profitability routes</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {sellRates\r\n                  .sort((a, b) => b.margin - a.margin)\r\n                  .slice(0, 5)\r\n                  .map((rate) => (\r\n                    <div key={rate.id} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\r\n                      <div>\r\n                        <span className=\"text-sm font-medium\">{rate.origin} ‚Üí {rate.destination}</span>\r\n                        <div className=\"text-xs text-muted-foreground\">{rate.mode}</div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <Badge variant=\"default\">{rate.margin.toFixed(1)}%</Badge>\r\n                        <div className=\"text-xs text-muted-foreground\">${rate.totalRate.toLocaleString()}</div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Customer Distribution</CardTitle>\r\n              <CardDescription>Revenue by customer type</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {customerTypes.map((type) => {\r\n                  const rates = sellRates.filter(rate => rate.customer.includes(type.split(' ')[0]));\r\n                  const revenue = rates.reduce((sum, rate) => sum + rate.totalRate, 0);\r\n                  const percentage = (rates.length / sellRates.length) * 100;\r\n                  return (\r\n                    <div key={type} className=\"flex justify-between items-center\">\r\n                      <div>\r\n                        <span className=\"text-sm font-medium\">{type}</span>\r\n                        <div className=\"text-xs text-muted-foreground\">${revenue.toLocaleString()}</div>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-24 bg-gray-200 rounded-full h-2\">\r\n                          <div \r\n                            className=\"bg-green-600 h-2 rounded-full\" \r\n                            style={{ width: `${percentage}%` }}\r\n                          ></div>\r\n                        </div>\r\n                        <span className=\"text-sm font-medium\">{rates.length}</span>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SellRates;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\rates\\TargetRates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\safety\\SafetyCompliancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-admin\\settlement\\SettlementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier-dispatch\\CarrierDispatchPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\carrier\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMActivitiesPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchActivities', 'fetchCompanies', and 'fetchContacts'. Either include them or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchActivities, fetchCompanies, fetchContacts]","fix":{"range":[4028,4030],"text":"[fetchActivities, fetchCompanies, fetchContacts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { \r\n  Plus, \r\n  Search, \r\n  Filter, \r\n  MoreHorizontal, \r\n  Edit, \r\n  Activity,\r\n  Phone,\r\n  Mail,\r\n  Calendar,\r\n  MessageSquare,\r\n  User,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Building2\r\n} from 'lucide-react';\r\nimport { useCRMActivities } from '@/hooks/crm/useCRMActivities';\r\nimport { useCRMContacts } from '@/hooks/crm/useCRMContacts';\r\nimport { useCRMCompanies } from '@/hooks/crm/useCRMCompanies';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport Layout from '@/components/layout/Layout';\r\nimport type { CRMActivity } from '@/types/crm';\r\n\r\n// Sample data for demonstration\r\nconst sampleActivities: Partial<CRMActivity>[] = [\r\n  {\r\n    id: '1',\r\n    activity_type: 'call',\r\n    subject: 'Discussed logistics requirements',\r\n    description: 'Had a detailed conversation about their Q2 shipping needs. They require 50+ truckloads monthly for the Chicago-Dallas route.',\r\n    status: 'completed',\r\n    duration_minutes: 45,\r\n    outcome: 'positive',\r\n    next_action: 'Send detailed proposal',\r\n    next_action_date: '2024-02-15T10:00:00Z',\r\n    contact_id: '1',\r\n    company_id: '1',\r\n    created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n    updated_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\r\n  },\r\n  {\r\n    id: '2',\r\n    activity_type: 'email',\r\n    subject: 'Rate quote follow-up',\r\n    description: 'Sent updated rate quotes for their LTL shipments. Included competitive pricing and value-added services.',\r\n    status: 'completed',\r\n    outcome: 'neutral',\r\n    next_action: 'Schedule rate negotiation meeting',\r\n    next_action_date: '2024-02-18T14:00:00Z',\r\n    contact_id: '2',\r\n    company_id: '2',\r\n    created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\r\n    updated_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()\r\n  },\r\n  {\r\n    id: '3',\r\n    activity_type: 'meeting',\r\n    subject: 'Contract negotiation session',\r\n    description: 'Met with procurement team to discuss contract terms, service levels, and performance metrics.',\r\n    status: 'completed',\r\n    duration_minutes: 90,\r\n    outcome: 'positive',\r\n    next_action: 'Prepare contract draft',\r\n    next_action_date: '2024-02-20T09:00:00Z',\r\n    contact_id: '3',\r\n    company_id: '3',\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n];\r\n\r\nconst CRMActivitiesPage = () => {\r\n  const { activities, createActivity, fetchActivities } = useCRMActivities();\r\n  const { contacts, fetchContacts } = useCRMContacts();\r\n  const { companies, fetchCompanies } = useCRMCompanies();\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedType, setSelectedType] = useState('all');\r\n  const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    activity_type: 'note',\r\n    subject: '',\r\n    description: '',\r\n    status: 'planned',\r\n    duration_minutes: '',\r\n    outcome: '',\r\n    next_action: '',\r\n    next_action_date: '',\r\n    contact_id: '',\r\n    company_id: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchActivities();\r\n    fetchContacts();\r\n    fetchCompanies();\r\n  }, []);\r\n\r\n  // Use sample data if no activities exist\r\n  const displayActivities = activities.length > 0 ? activities : sampleActivities as CRMActivity[];\r\n\r\n  const filteredActivities = displayActivities.filter(activity => {\r\n    const matchesSearch = \r\n      activity.subject?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      activity.description?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesType = selectedType === 'all' || activity.activity_type === selectedType;\r\n    const matchesStatus = selectedStatus === 'all' || activity.status === selectedStatus;\r\n    \r\n    return matchesSearch && matchesType && matchesStatus;\r\n  });\r\n\r\n  const totalActivities = displayActivities.length;\r\n  const completedActivities = displayActivities.filter(a => a.status === 'completed').length;\r\n  const plannedActivities = displayActivities.filter(a => a.status === 'planned').length;\r\n  const completionRate = totalActivities > 0 ? (completedActivities / totalActivities) * 100 : 0;\r\n\r\n  const activityTypeStats = {\r\n    call: displayActivities.filter(a => a.activity_type === 'call').length,\r\n    email: displayActivities.filter(a => a.activity_type === 'email').length,\r\n    meeting: displayActivities.filter(a => a.activity_type === 'meeting').length,\r\n    note: displayActivities.filter(a => a.activity_type === 'note').length\r\n  };\r\n\r\n  const handleCreateActivity = async () => {\r\n    try {\r\n      const activityData = {\r\n        ...formData,\r\n        duration_minutes: formData.duration_minutes ? parseInt(formData.duration_minutes) : undefined\r\n      };\r\n      await createActivity(activityData);\r\n      setIsCreateModalOpen(false);\r\n      resetForm();\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Activity created successfully'\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to create activity',\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      activity_type: 'note',\r\n      subject: '',\r\n      description: '',\r\n      status: 'planned',\r\n      duration_minutes: '',\r\n      outcome: '',\r\n      next_action: '',\r\n      next_action_date: '',\r\n      contact_id: '',\r\n      company_id: ''\r\n    });\r\n  };\r\n\r\n  const getActivityIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'call': return Phone;\r\n      case 'email': return Mail;\r\n      case 'meeting': return Calendar;\r\n      case 'note': return MessageSquare;\r\n      default: return Activity;\r\n    }\r\n  };\r\n\r\n  const getActivityTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'call': return 'bg-blue-100 text-blue-800';\r\n      case 'email': return 'bg-green-100 text-green-800';\r\n      case 'meeting': return 'bg-purple-100 text-purple-800';\r\n      case 'note': return 'bg-gray-100 text-gray-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'planned': return 'bg-yellow-100 text-yellow-800';\r\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getOutcomeIcon = (outcome: string) => {\r\n    switch (outcome) {\r\n      case 'positive': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'negative': return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'neutral': return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Activities</h1>\r\n            <p className=\"text-muted-foreground\">Track all your CRM interactions and communications</p>\r\n          </div>\r\n          <Button onClick={() => setIsCreateModalOpen(true)}>\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Log Activity\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Activities</CardTitle>\r\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{totalActivities}</div>\r\n              <p className=\"text-xs text-muted-foreground\">+12% from last month</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\r\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{completedActivities}</div>\r\n              <p className=\"text-xs text-muted-foreground\">{completionRate.toFixed(1)}% completion rate</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Planned</CardTitle>\r\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{plannedActivities}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Upcoming activities</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">This Week</CardTitle>\r\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">18</div>\r\n              <p className=\"text-xs text-muted-foreground\">Activities logged</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Activity Type Stats */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Activity Overview</CardTitle>\r\n            <CardDescription>Breakdown by activity type</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{activityTypeStats.call}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Calls</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{activityTypeStats.email}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Emails</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">{activityTypeStats.meeting}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Meetings</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-gray-600\">{activityTypeStats.note}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Notes</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Activities Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Activity Log</CardTitle>\r\n            <CardDescription>Comprehensive record of all CRM activities</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search activities...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedType} onValueChange={setSelectedType}>\r\n                <SelectTrigger className=\"w-full sm:w-48\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue placeholder=\"Filter by type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Types</SelectItem>\r\n                  <SelectItem value=\"call\">Calls</SelectItem>\r\n                  <SelectItem value=\"email\">Emails</SelectItem>\r\n                  <SelectItem value=\"meeting\">Meetings</SelectItem>\r\n                  <SelectItem value=\"note\">Notes</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\r\n                <SelectTrigger className=\"w-full sm:w-48\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue placeholder=\"Filter by status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Status</SelectItem>\r\n                  <SelectItem value=\"completed\">Completed</SelectItem>\r\n                  <SelectItem value=\"planned\">Planned</SelectItem>\r\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\r\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"rounded-md border\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Activity</TableHead>\r\n                    <TableHead>Type</TableHead>\r\n                    <TableHead>Contact/Company</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                    <TableHead>Outcome</TableHead>\r\n                    <TableHead>Date</TableHead>\r\n                    <TableHead className=\"text-right\">Actions</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredActivities.map((activity) => {\r\n                    const ActivityIcon = getActivityIcon(activity.activity_type || '');\r\n                    return (\r\n                      <TableRow key={activity.id}>\r\n                        <TableCell>\r\n                          <div className=\"flex items-start gap-3\">\r\n                            <div className=\"rounded-full bg-primary/10 p-2 mt-1\">\r\n                              <ActivityIcon className=\"h-4 w-4 text-primary\" />\r\n                            </div>\r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <div className=\"font-medium\">{activity.subject}</div>\r\n                              <div className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\r\n                                {activity.description}\r\n                              </div>\r\n                              {activity.duration_minutes && (\r\n                                <div className=\"text-xs text-muted-foreground mt-1 flex items-center gap-1\">\r\n                                  <Clock className=\"h-3 w-3\" />\r\n                                  {activity.duration_minutes} minutes\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getActivityTypeColor(activity.activity_type || '')}>\r\n                            {activity.activity_type}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            {activity.contact && (\r\n                              <div className=\"flex items-center gap-2 text-sm\">\r\n                                <User className=\"h-3 w-3\" />\r\n                                {activity.contact.first_name} {activity.contact.last_name}\r\n                              </div>\r\n                            )}\r\n                            {activity.company && (\r\n                              <div className=\"flex items-center gap-2 text-sm\">\r\n                                <Building2 className=\"h-3 w-3\" />\r\n                                {activity.company.name}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getStatusColor(activity.status || '')}>\r\n                            {activity.status}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getOutcomeIcon(activity.outcome || '')}\r\n                            <span className=\"capitalize\">{activity.outcome || 'N/A'}</span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"text-sm\">\r\n                            {new Date(activity.created_at).toLocaleDateString()}\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {new Date(activity.created_at).toLocaleTimeString()}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          <div className=\"flex justify-end gap-2\">\r\n                            <Button variant=\"outline\" size=\"sm\">\r\n                              <Edit className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button variant=\"outline\" size=\"sm\">\r\n                              <MoreHorizontal className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Create Activity Dialog */}\r\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\r\n          <DialogContent className=\"max-w-2xl\">\r\n            <DialogHeader>\r\n              <DialogTitle>Log New Activity</DialogTitle>\r\n              <DialogDescription>\r\n                Record a new CRM activity or interaction\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"activity_type\">Activity Type</Label>\r\n                <Select value={formData.activity_type} onValueChange={(value) => setFormData({...formData, activity_type: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"call\">Call</SelectItem>\r\n                    <SelectItem value=\"email\">Email</SelectItem>\r\n                    <SelectItem value=\"meeting\">Meeting</SelectItem>\r\n                    <SelectItem value=\"note\">Note</SelectItem>\r\n                    <SelectItem value=\"task\">Task</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"status\">Status</Label>\r\n                <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"planned\">Planned</SelectItem>\r\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\r\n                    <SelectItem value=\"completed\">Completed</SelectItem>\r\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"subject\">Subject</Label>\r\n                <Input\r\n                  id=\"subject\"\r\n                  value={formData.subject}\r\n                  onChange={(e) => setFormData({...formData, subject: e.target.value})}\r\n                  placeholder=\"Brief description of the activity\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"contact_id\">Contact</Label>\r\n                <Select value={formData.contact_id} onValueChange={(value) => setFormData({...formData, contact_id: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select contact\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {contacts.map((contact) => (\r\n                      <SelectItem key={contact.id} value={contact.id}>\r\n                        {contact.first_name} {contact.last_name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"company_id\">Company</Label>\r\n                <Select value={formData.company_id} onValueChange={(value) => setFormData({...formData, company_id: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select company\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {companies.map((company) => (\r\n                      <SelectItem key={company.id} value={company.id}>\r\n                        {company.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"duration_minutes\">Duration (minutes)</Label>\r\n                <Input\r\n                  id=\"duration_minutes\"\r\n                  type=\"number\"\r\n                  value={formData.duration_minutes}\r\n                  onChange={(e) => setFormData({...formData, duration_minutes: e.target.value})}\r\n                  placeholder=\"30\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"outcome\">Outcome</Label>\r\n                <Select value={formData.outcome} onValueChange={(value) => setFormData({...formData, outcome: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select outcome\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"positive\">Positive</SelectItem>\r\n                    <SelectItem value=\"neutral\">Neutral</SelectItem>\r\n                    <SelectItem value=\"negative\">Negative</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"description\">Description</Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                  placeholder=\"Detailed description of the activity...\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"next_action\">Next Action</Label>\r\n                <Input\r\n                  id=\"next_action\"\r\n                  value={formData.next_action}\r\n                  onChange={(e) => setFormData({...formData, next_action: e.target.value})}\r\n                  placeholder=\"Follow up with proposal\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"next_action_date\">Next Action Date</Label>\r\n                <Input\r\n                  id=\"next_action_date\"\r\n                  type=\"datetime-local\"\r\n                  value={formData.next_action_date}\r\n                  onChange={(e) => setFormData({...formData, next_action_date: e.target.value})}\r\n                />\r\n              </div>\r\n            </div>\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => {\r\n                setIsCreateModalOpen(false);\r\n                resetForm();\r\n              }}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleCreateActivity}>\r\n                Log Activity\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CRMActivitiesPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMCalendarPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMCompaniesPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCompanies'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCompanies]","fix":{"range":[4186,4188],"text":"[fetchCompanies]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { \r\n  Plus, \r\n  Search, \r\n  Filter, \r\n  MoreHorizontal, \r\n  Edit, \r\n  Building2,\r\n  Users,\r\n  DollarSign,\r\n  MapPin,\r\n  Globe,\r\n  Phone,\r\n  Mail,\r\n  Calendar,\r\n  TrendingUp\r\n} from 'lucide-react';\r\nimport { useCRMCompanies } from '@/hooks/crm/useCRMCompanies';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport Layout from '@/components/layout/Layout';\r\nimport type { CRMCompany } from '@/types/crm';\r\n\r\n// Sample data for demonstration\r\nconst sampleCompanies: Partial<CRMCompany>[] = [\r\n  {\r\n    id: '1',\r\n    name: 'ACME Logistics Solutions',\r\n    industry: 'Transportation & Warehousing',\r\n    company_size: '500-1000',\r\n    website: 'https://acmelogistics.com',\r\n    phone: '+1 (555) 123-4567',\r\n    email: 'info@acmelogistics.com',\r\n    address: {\r\n      street: '123 Industrial Blvd',\r\n      city: 'Chicago',\r\n      state: 'IL',\r\n      zip: '60601',\r\n      country: 'USA'\r\n    },\r\n    annual_revenue: 25000000,\r\n    employee_count: 750,\r\n    description: 'Leading provider of integrated logistics and supply chain solutions across North America',\r\n    tags: ['3PL', 'Warehousing', 'Distribution'],\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'FastFreight Express',\r\n    industry: 'Freight Transportation',\r\n    company_size: '100-500',\r\n    website: 'https://fastfreight.com',\r\n    phone: '+1 (555) 987-6543',\r\n    email: 'contact@fastfreight.com',\r\n    address: {\r\n      street: '456 Highway 80',\r\n      city: 'Dallas',\r\n      state: 'TX',\r\n      zip: '75201',\r\n      country: 'USA'\r\n    },\r\n    annual_revenue: 12000000,\r\n    employee_count: 250,\r\n    description: 'Expedited freight services with nationwide coverage and real-time tracking',\r\n    tags: ['Expedited', 'LTL', 'Tracking'],\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Global Shipping Network',\r\n    industry: 'International Trade',\r\n    company_size: '1000+',\r\n    website: 'https://globalshipping.net',\r\n    phone: '+1 (555) 456-7890',\r\n    email: 'operations@globalshipping.net',\r\n    address: {\r\n      street: '789 Port Authority',\r\n      city: 'Long Beach',\r\n      state: 'CA',\r\n      zip: '90802',\r\n      country: 'USA'\r\n    },\r\n    annual_revenue: 85000000,\r\n    employee_count: 1200,\r\n    description: 'International shipping and logistics with port operations and customs expertise',\r\n    tags: ['International', 'Customs', 'Port Services'],\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n];\r\n\r\nconst CRMCompaniesPage = () => {\r\n  const { companies, createCompany, updateCompany, deleteCompany, fetchCompanies } = useCRMCompanies();\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedIndustry, setSelectedIndustry] = useState('all');\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [editingCompany, setEditingCompany] = useState<CRMCompany | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    industry: '',\r\n    company_size: '',\r\n    website: '',\r\n    phone: '',\r\n    email: '',\r\n    street: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    country: 'USA',\r\n    annual_revenue: '',\r\n    employee_count: '',\r\n    description: '',\r\n    tags: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchCompanies();\r\n  }, []);\r\n\r\n  // Use sample data if no companies exist\r\n  const displayCompanies = companies.length > 0 ? companies : sampleCompanies as CRMCompany[];\r\n\r\n  const filteredCompanies = displayCompanies.filter(company => {\r\n    const matchesSearch = \r\n      company.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      company.description?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesIndustry = selectedIndustry === 'all' || company.industry === selectedIndustry;\r\n    \r\n    return matchesSearch && matchesIndustry;\r\n  });\r\n\r\n  const totalRevenue = displayCompanies.reduce((sum, company) => sum + (company.annual_revenue || 0), 0);\r\n  const totalEmployees = displayCompanies.reduce((sum, company) => sum + (company.employee_count || 0), 0);\r\n  const avgRevenue = displayCompanies.length > 0 ? totalRevenue / displayCompanies.length : 0;\r\n\r\n  const handleCreateCompany = async () => {\r\n    try {\r\n      const companyData = {\r\n        ...formData,\r\n        address: {\r\n          street: formData.street,\r\n          city: formData.city,\r\n          state: formData.state,\r\n          zip: formData.zip,\r\n          country: formData.country\r\n        },\r\n        annual_revenue: parseFloat(formData.annual_revenue) || undefined,\r\n        employee_count: parseInt(formData.employee_count) || undefined,\r\n        tags: formData.tags.split(',').map(s => s.trim()).filter(s => s)\r\n      };\r\n      await createCompany(companyData);\r\n      setIsCreateModalOpen(false);\r\n      resetForm();\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Company created successfully'\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to create company',\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUpdateCompany = async () => {\r\n    if (!editingCompany) return;\r\n    \r\n    try {\r\n      const companyData = {\r\n        ...formData,\r\n        address: {\r\n          street: formData.street,\r\n          city: formData.city,\r\n          state: formData.state,\r\n          zip: formData.zip,\r\n          country: formData.country\r\n        },\r\n        annual_revenue: parseFloat(formData.annual_revenue) || undefined,\r\n        employee_count: parseInt(formData.employee_count) || undefined,\r\n        tags: formData.tags.split(',').map(s => s.trim()).filter(s => s)\r\n      };\r\n      await updateCompany(editingCompany.id, companyData);\r\n      setEditingCompany(null);\r\n      resetForm();\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Company updated successfully'\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update company',\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      industry: '',\r\n      company_size: '',\r\n      website: '',\r\n      phone: '',\r\n      email: '',\r\n      street: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n      country: 'USA',\r\n      annual_revenue: '',\r\n      employee_count: '',\r\n      description: '',\r\n      tags: ''\r\n    });\r\n  };\r\n\r\n  const openEditModal = (company: CRMCompany) => {\r\n    setEditingCompany(company);\r\n    setFormData({\r\n      name: company.name || '',\r\n      industry: company.industry || '',\r\n      company_size: company.company_size || '',\r\n      website: company.website || '',\r\n      phone: company.phone || '',\r\n      email: company.email || '',\r\n      street: company.address?.street || '',\r\n      city: company.address?.city || '',\r\n      state: company.address?.state || '',\r\n      zip: company.address?.zip || '',\r\n      country: company.address?.country || 'USA',\r\n      annual_revenue: company.annual_revenue?.toString() || '',\r\n      employee_count: company.employee_count?.toString() || '',\r\n      description: company.description || '',\r\n      tags: company.tags?.join(', ') || ''\r\n    });\r\n  };\r\n\r\n  const getCompanySizeColor = (size: string) => {\r\n    switch (size) {\r\n      case '1-10': return 'bg-blue-100 text-blue-800';\r\n      case '11-50': return 'bg-green-100 text-green-800';\r\n      case '51-200': return 'bg-yellow-100 text-yellow-800';\r\n      case '201-500': return 'bg-orange-100 text-orange-800';\r\n      case '500-1000': return 'bg-red-100 text-red-800';\r\n      case '1000+': return 'bg-purple-100 text-purple-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Companies</h1>\r\n            <p className=\"text-muted-foreground\">Manage your transportation industry partners and clients</p>\r\n          </div>\r\n          <Button onClick={() => setIsCreateModalOpen(true)}>\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add Company\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Companies</CardTitle>\r\n              <Building2 className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{displayCompanies.length}</div>\r\n              <p className=\"text-xs text-muted-foreground\">+18% from last month</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${(totalRevenue / 1000000).toFixed(1)}M</div>\r\n              <p className=\"text-xs text-muted-foreground\">Combined annual revenue</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{totalEmployees.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Across all companies</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Avg Revenue</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${(avgRevenue / 1000000).toFixed(1)}M</div>\r\n              <p className=\"text-xs text-muted-foreground\">Per company</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Companies Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Company Directory</CardTitle>\r\n            <CardDescription>Manage your transportation industry partnerships</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search companies...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>\r\n                <SelectTrigger className=\"w-full sm:w-64\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue placeholder=\"Filter by industry\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Industries</SelectItem>\r\n                  <SelectItem value=\"Transportation & Warehousing\">Transportation & Warehousing</SelectItem>\r\n                  <SelectItem value=\"Freight Transportation\">Freight Transportation</SelectItem>\r\n                  <SelectItem value=\"International Trade\">International Trade</SelectItem>\r\n                  <SelectItem value=\"E-commerce\">E-commerce</SelectItem>\r\n                  <SelectItem value=\"Manufacturing\">Manufacturing</SelectItem>\r\n                  <SelectItem value=\"Retail\">Retail</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"rounded-md border\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Company</TableHead>\r\n                    <TableHead>Industry</TableHead>\r\n                    <TableHead>Size</TableHead>\r\n                    <TableHead>Location</TableHead>\r\n                    <TableHead>Revenue</TableHead>\r\n                    <TableHead>Contact</TableHead>\r\n                    <TableHead className=\"text-right\">Actions</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredCompanies.map((company) => (\r\n                    <TableRow key={company.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <div className=\"rounded-full bg-primary/10 p-2\">\r\n                            <Building2 className=\"h-4 w-4 text-primary\" />\r\n                          </div>\r\n                          <div>\r\n                            <div className=\"font-medium\">{company.name}</div>\r\n                            <div className=\"text-sm text-muted-foreground line-clamp-1\">\r\n                              {company.description}\r\n                            </div>\r\n                            {company.tags && company.tags.length > 0 && (\r\n                              <div className=\"flex gap-1 mt-1\">\r\n                                {company.tags.slice(0, 2).map((tag, idx) => (\r\n                                  <Badge key={idx} variant=\"outline\" className=\"text-xs\">\r\n                                    {tag}\r\n                                  </Badge>\r\n                                ))}\r\n                                {company.tags.length > 2 && (\r\n                                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                                    +{company.tags.length - 2}\r\n                                  </Badge>\r\n                                )}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant=\"outline\">\r\n                          {company.industry}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge className={getCompanySizeColor(company.company_size || '')}>\r\n                          {company.company_size || 'Unknown'}\r\n                        </Badge>\r\n                        {company.employee_count && (\r\n                          <div className=\"text-sm text-muted-foreground mt-1\">\r\n                            {company.employee_count} employees\r\n                          </div>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n                          <div>\r\n                            <div className=\"text-sm\">\r\n                              {company.address?.city}, {company.address?.state}\r\n                            </div>\r\n                            <div className=\"text-xs text-muted-foreground\">\r\n                              {company.address?.country}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {company.annual_revenue ? (\r\n                          <div>\r\n                            <div className=\"font-medium\">\r\n                              ${(company.annual_revenue / 1000000).toFixed(1)}M\r\n                            </div>\r\n                            <div className=\"text-xs text-muted-foreground\">Annual</div>\r\n                          </div>\r\n                        ) : (\r\n                          <span className=\"text-muted-foreground\">Not disclosed</span>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"space-y-1\">\r\n                          {company.email && (\r\n                            <div className=\"flex items-center gap-2 text-sm\">\r\n                              <Mail className=\"h-3 w-3\" />\r\n                              {company.email}\r\n                            </div>\r\n                          )}\r\n                          {company.phone && (\r\n                            <div className=\"flex items-center gap-2 text-sm\">\r\n                              <Phone className=\"h-3 w-3\" />\r\n                              {company.phone}\r\n                            </div>\r\n                          )}\r\n                          {company.website && (\r\n                            <div className=\"flex items-center gap-2 text-sm\">\r\n                              <Globe className=\"h-3 w-3\" />\r\n                              <a href={company.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline\">\r\n                                Website\r\n                              </a>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <div className=\"flex justify-end gap-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => openEditModal(company)}\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Create/Edit Company Dialog */}\r\n        <Dialog open={isCreateModalOpen || !!editingCompany} onOpenChange={(open) => {\r\n          if (!open) {\r\n            setIsCreateModalOpen(false);\r\n            setEditingCompany(null);\r\n            resetForm();\r\n          }\r\n        }}>\r\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n            <DialogHeader>\r\n              <DialogTitle>\r\n                {editingCompany ? 'Edit Company' : 'Add New Company'}\r\n              </DialogTitle>\r\n              <DialogDescription>\r\n                {editingCompany ? 'Update company information' : 'Create a new transportation industry company'}\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"name\">Company Name</Label>\r\n                <Input\r\n                  id=\"name\"\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n                  placeholder=\"ACME Logistics Solutions\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"industry\">Industry</Label>\r\n                <Select value={formData.industry} onValueChange={(value) => setFormData({...formData, industry: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select industry\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"Transportation & Warehousing\">Transportation & Warehousing</SelectItem>\r\n                    <SelectItem value=\"Freight Transportation\">Freight Transportation</SelectItem>\r\n                    <SelectItem value=\"International Trade\">International Trade</SelectItem>\r\n                    <SelectItem value=\"E-commerce\">E-commerce</SelectItem>\r\n                    <SelectItem value=\"Manufacturing\">Manufacturing</SelectItem>\r\n                    <SelectItem value=\"Retail\">Retail</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"company_size\">Company Size</Label>\r\n                <Select value={formData.company_size} onValueChange={(value) => setFormData({...formData, company_size: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select size\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"1-10\">1-10 employees</SelectItem>\r\n                    <SelectItem value=\"11-50\">11-50 employees</SelectItem>\r\n                    <SelectItem value=\"51-200\">51-200 employees</SelectItem>\r\n                    <SelectItem value=\"201-500\">201-500 employees</SelectItem>\r\n                    <SelectItem value=\"500-1000\">500-1000 employees</SelectItem>\r\n                    <SelectItem value=\"1000+\">1000+ employees</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"website\">Website</Label>\r\n                <Input\r\n                  id=\"website\"\r\n                  value={formData.website}\r\n                  onChange={(e) => setFormData({...formData, website: e.target.value})}\r\n                  placeholder=\"https://company.com\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"phone\">Phone</Label>\r\n                <Input\r\n                  id=\"phone\"\r\n                  value={formData.phone}\r\n                  onChange={(e) => setFormData({...formData, phone: e.target.value})}\r\n                  placeholder=\"+1 (555) 123-4567\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(e) => setFormData({...formData, email: e.target.value})}\r\n                  placeholder=\"info@company.com\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"annual_revenue\">Annual Revenue ($)</Label>\r\n                <Input\r\n                  id=\"annual_revenue\"\r\n                  type=\"number\"\r\n                  value={formData.annual_revenue}\r\n                  onChange={(e) => setFormData({...formData, annual_revenue: e.target.value})}\r\n                  placeholder=\"25000000\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"employee_count\">Employee Count</Label>\r\n                <Input\r\n                  id=\"employee_count\"\r\n                  type=\"number\"\r\n                  value={formData.employee_count}\r\n                  onChange={(e) => setFormData({...formData, employee_count: e.target.value})}\r\n                  placeholder=\"750\"\r\n                />\r\n              </div>\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"street\">Address</Label>\r\n                <Input\r\n                  id=\"street\"\r\n                  value={formData.street}\r\n                  onChange={(e) => setFormData({...formData, street: e.target.value})}\r\n                  placeholder=\"123 Industrial Blvd\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"city\">City</Label>\r\n                <Input\r\n                  id=\"city\"\r\n                  value={formData.city}\r\n                  onChange={(e) => setFormData({...formData, city: e.target.value})}\r\n                  placeholder=\"Chicago\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"state\">State</Label>\r\n                <Input\r\n                  id=\"state\"\r\n                  value={formData.state}\r\n                  onChange={(e) => setFormData({...formData, state: e.target.value})}\r\n                  placeholder=\"IL\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"zip\">ZIP Code</Label>\r\n                <Input\r\n                  id=\"zip\"\r\n                  value={formData.zip}\r\n                  onChange={(e) => setFormData({...formData, zip: e.target.value})}\r\n                  placeholder=\"60601\"\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"country\">Country</Label>\r\n                <Input\r\n                  id=\"country\"\r\n                  value={formData.country}\r\n                  onChange={(e) => setFormData({...formData, country: e.target.value})}\r\n                  placeholder=\"USA\"\r\n                />\r\n              </div>\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"description\">Description</Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                  placeholder=\"Describe the company's services and expertise...\"\r\n                />\r\n              </div>\r\n              <div className=\"col-span-2 space-y-2\">\r\n                <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\r\n                <Input\r\n                  id=\"tags\"\r\n                  value={formData.tags}\r\n                  onChange={(e) => setFormData({...formData, tags: e.target.value})}\r\n                  placeholder=\"3PL, Warehousing, Distribution\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => {\r\n                setIsCreateModalOpen(false);\r\n                setEditingCompany(null);\r\n                resetForm();\r\n              }}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={editingCompany ? handleUpdateCompany : handleCreateCompany}>\r\n                {editingCompany ? 'Update' : 'Create'} Company\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CRMCompaniesPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMContactsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMEmailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMLeadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMOpportunitiesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMOverviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\CRMProjectsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\crm\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\AutonomousDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\BrokerAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\CarrierAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\Dashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'routeToRoleMap'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [location.pathname, routeToRoleMap, selectedRole, setSelectedRole]","fix":{"range":[1091,1141],"text":"[location.pathname, routeToRoleMap, selectedRole, setSelectedRole]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport ModernLayout from '@/components/layout/ModernLayout';\r\nimport ModernDashboard from './ModernDashboard';\r\n\r\nconst Dashboard = () => {\r\n  const { selectedRole, setSelectedRole } = useAuth();\r\n  const location = useLocation();\r\n\r\n  // Map routes to roles (excluding shipper-admin which has its own layout)\r\n  const routeToRoleMap: Record<string, string> = {\r\n    '/super-admin': 'super_admin',\r\n    '/carrier-admin': 'carrier_admin', \r\n    '/broker-admin': 'freight_broker_admin',\r\n    '/driver': 'carrier_driver',\r\n    '/owner-operator': 'owner_operator',\r\n    '/dashboard': selectedRole || 'super_admin' // Default to current role or super_admin\r\n  };\r\n\r\n  // Update role based on current route\r\n  useEffect(() => {\r\n    const currentPath = location.pathname;\r\n    const roleForRoute = routeToRoleMap[currentPath];\r\n    \r\n    if (roleForRoute && roleForRoute !== selectedRole) {\r\n      setSelectedRole(roleForRoute as unknown);\r\n    }\r\n  }, [location.pathname, selectedRole, setSelectedRole]);\r\n\r\n  return (\r\n    <ModernLayout>\r\n      <ModernDashboard />\r\n    </ModernLayout>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\DriverDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\ModernDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\OwnerOperatorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\ShipperAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\dashboard\\SuperAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\directory\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\ArchivePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\BOLPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\ComplianceDocsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\ContractsAgreementsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\DocumentsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\DriverDocumentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\InspectionReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\InsuranceDocumentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\InvoicesReceiptsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\MaintenanceRecordsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\UploadCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\documents\\VehicleRegistrationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\CommunicationCenterPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCommunications'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCommunications]","fix":{"range":[1706,1708],"text":"[fetchCommunications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  MessageSquare, \r\n  Phone, \r\n  AlertTriangle, \r\n  Clock, \r\n  Send, \r\n  User,\r\n  Bell,\r\n  Search,\r\n  Filter\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface Communication {\r\n  id: string;\r\n  sender_id: string;\r\n  sender_role: string;\r\n  message_type: string;\r\n  subject: string;\r\n  message: string;\r\n  priority: string;\r\n  is_read: boolean;\r\n  created_at: string;\r\n}\r\n\r\nconst CommunicationCenterPage = () => {\r\n  const [communications, setCommunications] = useState<Communication[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [newMessage, setNewMessage] = useState({ subject: '', message: '', priority: 'normal' });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchCommunications();\r\n    \r\n    // Set up real-time subscription\r\n    const channel = supabase\r\n      .channel('driver_communications')\r\n      .on('postgres_changes', {\r\n        event: '*',\r\n        schema: 'public',\r\n        table: 'driver_communications'\r\n      }, () => {\r\n        fetchCommunications();\r\n      })\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  const fetchCommunications = async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase\r\n        .from('driver_communications')\r\n        .select('*')\r\n        .eq('driver_id', user.user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setCommunications(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching communications:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load messages\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!newMessage.subject.trim() || !newMessage.message.trim()) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Please fill in all fields\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { error } = await supabase\r\n        .from('driver_communications')\r\n        .insert({\r\n          driver_id: user.user.id,\r\n          sender_id: user.user.id,\r\n          sender_role: 'driver',\r\n          message_type: 'text',\r\n          subject: newMessage.subject,\r\n          message: newMessage.message,\r\n          priority: newMessage.priority\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      setNewMessage({ subject: '', message: '', priority: 'normal' });\r\n      toast({\r\n        title: \"Message Sent\",\r\n        description: \"Your message has been sent successfully\",\r\n      });\r\n      \r\n      fetchCommunications();\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to send message\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (messageId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('driver_communications')\r\n        .update({ is_read: true, read_at: new Date().toISOString() })\r\n        .eq('id', messageId);\r\n\r\n      if (error) throw error;\r\n\r\n      setCommunications(prev => prev.map(comm => \r\n        comm.id === messageId ? { ...comm, is_read: true } : comm\r\n      ));\r\n    } catch (error) {\r\n      console.error('Error marking as read:', error);\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'bg-red-500';\r\n      case 'high': return 'bg-orange-500';\r\n      case 'normal': return 'bg-blue-500';\r\n      case 'low': return 'bg-gray-500';\r\n      default: return 'bg-blue-500';\r\n    }\r\n  };\r\n\r\n  const getMessageTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'alert': return AlertTriangle;\r\n      case 'instruction': return Bell;\r\n      case 'emergency': return AlertTriangle;\r\n      default: return MessageSquare;\r\n    }\r\n  };\r\n\r\n  const filteredCommunications = communications.filter(comm =>\r\n    comm.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    comm.message.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const unreadCount = communications.filter(comm => !comm.is_read).length;\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Communication Center</h1>\r\n          <p className=\"text-muted-foreground\">Messages, alerts, and communications</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\r\n            <Bell className=\"w-4 h-4 mr-2\" />\r\n            {unreadCount} Unread\r\n          </Badge>\r\n          <Button>\r\n            <Phone className=\"w-4 h-4 mr-2\" />\r\n            Emergency Contact\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"inbox\" className=\"w-full\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"inbox\">Inbox ({communications.length})</TabsTrigger>\r\n          <TabsTrigger value=\"compose\">Compose</TabsTrigger>\r\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"inbox\" className=\"space-y-4\">\r\n          {/* Search and Filters */}\r\n          <div className=\"flex gap-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Search messages...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n            <Button variant=\"outline\">\r\n              <Filter className=\"w-4 h-4 mr-2\" />\r\n              Filter\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Messages List */}\r\n          <div className=\"space-y-3\">\r\n            {filteredCommunications.length === 0 ? (\r\n              <Card>\r\n                <CardContent className=\"p-8 text-center\">\r\n                  <MessageSquare className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\r\n                  <p className=\"text-gray-500\">No messages found</p>\r\n                </CardContent>\r\n              </Card>\r\n            ) : (\r\n              filteredCommunications.map((comm) => {\r\n                const MessageIcon = getMessageTypeIcon(comm.message_type);\r\n                \r\n                return (\r\n                  <Card \r\n                    key={comm.id} \r\n                    className={`cursor-pointer transition-colors ${\r\n                      !comm.is_read ? 'bg-blue-50 border-blue-200' : ''\r\n                    }`}\r\n                    onClick={() => !comm.is_read && markAsRead(comm.id)}\r\n                  >\r\n                    <CardContent className=\"p-4\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex items-start space-x-3 flex-1\">\r\n                          <div className=\"bg-gray-100 p-2 rounded-full\">\r\n                            <MessageIcon className=\"w-4 h-4 text-gray-600\" />\r\n                          </div>\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"flex items-center gap-2 mb-1\">\r\n                              <h4 className={`font-medium ${!comm.is_read ? 'font-bold' : ''}`}>\r\n                                {comm.subject}\r\n                              </h4>\r\n                              <Badge className={`${getPriorityColor(comm.priority)} text-white text-xs`}>\r\n                                {comm.priority.toUpperCase()}\r\n                              </Badge>\r\n                              {!comm.is_read && (\r\n                                <Badge variant=\"default\" className=\"text-xs\">NEW</Badge>\r\n                              )}\r\n                            </div>\r\n                            <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\r\n                              {comm.message}\r\n                            </p>\r\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\r\n                              <User className=\"w-3 h-3 mr-1\" />\r\n                              <span className=\"mr-4\">{comm.sender_role.replace('_', ' ').toUpperCase()}</span>\r\n                              <Clock className=\"w-3 h-3 mr-1\" />\r\n                              <span>{new Date(comm.created_at).toLocaleString()}</span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                );\r\n              })\r\n            )}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"compose\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Send New Message</CardTitle>\r\n              <CardDescription>Send a message to dispatch or support</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block\">Subject</label>\r\n                <Input\r\n                  placeholder=\"Enter message subject\"\r\n                  value={newMessage.subject}\r\n                  onChange={(e) => setNewMessage(prev => ({ ...prev, subject: e.target.value }))}\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block\">Priority</label>\r\n                <select\r\n                  className=\"w-full p-2 border rounded-md\"\r\n                  value={newMessage.priority}\r\n                  onChange={(e) => setNewMessage(prev => ({ ...prev, priority: e.target.value }))}\r\n                >\r\n                  <option value=\"low\">Low</option>\r\n                  <option value=\"normal\">Normal</option>\r\n                  <option value=\"high\">High</option>\r\n                  <option value=\"urgent\">Urgent</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block\">Message</label>\r\n                <Textarea\r\n                  placeholder=\"Enter your message\"\r\n                  rows={6}\r\n                  value={newMessage.message}\r\n                  onChange={(e) => setNewMessage(prev => ({ ...prev, message: e.target.value }))}\r\n                />\r\n              </div>\r\n              \r\n              <Button onClick={sendMessage} className=\"w-full\">\r\n                <Send className=\"w-4 h-4 mr-2\" />\r\n                Send Message\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>System Alerts</CardTitle>\r\n              <CardDescription>Important notifications and alerts</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {communications\r\n                  .filter(comm => comm.message_type === 'alert' || comm.message_type === 'emergency')\r\n                  .map((alert) => (\r\n                    <div key={alert.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\r\n                      <AlertTriangle className={`w-5 h-5 ${\r\n                        alert.priority === 'urgent' ? 'text-red-500' : 'text-orange-500'\r\n                      }`} />\r\n                      <div className=\"flex-1\">\r\n                        <h4 className=\"font-medium\">{alert.subject}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">{alert.message}</p>\r\n                      </div>\r\n                      <Badge className={`${getPriorityColor(alert.priority)} text-white`}>\r\n                        {alert.priority.toUpperCase()}\r\n                      </Badge>\r\n                    </div>\r\n                  ))}\r\n                \r\n                {communications.filter(comm => comm.message_type === 'alert' || comm.message_type === 'emergency').length === 0 && (\r\n                  <div className=\"text-center py-8\">\r\n                    <AlertTriangle className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\r\n                    <p className=\"text-gray-500\">No alerts at this time</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommunicationCenterPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\DriverDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\DriverProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\DriverSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\FuelManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\HOSLogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\LoadAssignments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\LoadAssignmentsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDriverLoads'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDriverLoads]","fix":{"range":[1037,1039],"text":"[fetchDriverLoads]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Truck, MapPin, Clock, DollarSign, Route, Navigation } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface LoadAssignment {\r\n  id: string;\r\n  load_id: string;\r\n  pickup_location: string;\r\n  delivery_location: string;\r\n  pickup_date: string;\r\n  delivery_date: string;\r\n  load_status: string;\r\n  estimated_earnings: number;\r\n  miles_driven: number;\r\n}\r\n\r\nconst LoadAssignmentsPage = () => {\r\n  const [loads, setLoads] = useState<LoadAssignment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchDriverLoads();\r\n  }, []);\r\n\r\n  const fetchDriverLoads = async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase\r\n        .from('driver_loads')\r\n        .select('*')\r\n        .eq('driver_id', user.user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setLoads(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching loads:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load assignments\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateLoadStatus = async (loadId: string, newStatus: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('driver_loads')\r\n        .update({ load_status: newStatus })\r\n        .eq('id', loadId);\r\n\r\n      if (error) throw error;\r\n\r\n      setLoads(prev => prev.map(load => \r\n        load.id === loadId ? { ...load, load_status: newStatus } : load\r\n      ));\r\n\r\n      toast({\r\n        title: \"Status Updated\",\r\n        description: `Load status updated to ${newStatus}`,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to update status\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'assigned': return 'bg-blue-500';\r\n      case 'en_route_pickup': return 'bg-orange-500';\r\n      case 'picked_up': return 'bg-yellow-500';\r\n      case 'en_route_delivery': return 'bg-purple-500';\r\n      case 'delivered': return 'bg-green-500';\r\n      case 'completed': return 'bg-gray-500';\r\n      default: return 'bg-gray-400';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Load Assignments</h1>\r\n          <p className=\"text-muted-foreground\">Your current and upcoming load assignments</p>\r\n        </div>\r\n        <Button>\r\n          <Navigation className=\"w-4 h-4 mr-2\" />\r\n          Route Planning\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Load Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-base flex items-center\">\r\n              <Truck className=\"w-4 h-4 mr-2\" />\r\n              Active Loads\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {loads.filter(l => ['assigned', 'en_route_pickup', 'picked_up', 'en_route_delivery'].includes(l.load_status)).length}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-base flex items-center\">\r\n              <Route className=\"w-4 h-4 mr-2\" />\r\n              Total Miles\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {loads.reduce((sum, load) => sum + (load.miles_driven || 0), 0).toLocaleString()}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-base flex items-center\">\r\n              <DollarSign className=\"w-4 h-4 mr-2\" />\r\n              Estimated Earnings\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-green-600\">\r\n              ${loads.reduce((sum, load) => sum + (load.estimated_earnings || 0), 0).toLocaleString()}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-base flex items-center\">\r\n              <Clock className=\"w-4 h-4 mr-2\" />\r\n              Completed\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {loads.filter(l => l.load_status === 'completed').length}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Load Assignments Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Current Assignments</CardTitle>\r\n          <CardDescription>Manage your load assignments and update status</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {loads.length === 0 ? (\r\n            <div className=\"text-center py-8\">\r\n              <Truck className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\r\n              <p className=\"text-gray-500\">No load assignments found</p>\r\n            </div>\r\n          ) : (\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Load ID</TableHead>\r\n                  <TableHead>Route</TableHead>\r\n                  <TableHead>Pickup Date</TableHead>\r\n                  <TableHead>Delivery Date</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Earnings</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {loads.map((load) => (\r\n                  <TableRow key={load.id}>\r\n                    <TableCell className=\"font-medium\">{load.load_id}</TableCell>\r\n                    <TableCell>\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center\">\r\n                          <MapPin className=\"w-3 h-3 mr-1 text-green-600\" />\r\n                          <span className=\"text-sm\">{load.pickup_location}</span>\r\n                        </div>\r\n                        <div className=\"flex items-center\">\r\n                          <MapPin className=\"w-3 h-3 mr-1 text-red-600\" />\r\n                          <span className=\"text-sm\">{load.delivery_location}</span>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {load.pickup_date ? new Date(load.pickup_date).toLocaleDateString() : 'TBD'}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {load.delivery_date ? new Date(load.delivery_date).toLocaleDateString() : 'TBD'}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge className={`${getStatusColor(load.load_status)} text-white`}>\r\n                        {load.load_status.replace('_', ' ').toUpperCase()}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell className=\"text-green-600 font-semibold\">\r\n                      ${load.estimated_earnings?.toLocaleString() || 0}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        {load.load_status === 'assigned' && (\r\n                          <Button \r\n                            size=\"sm\" \r\n                            onClick={() => updateLoadStatus(load.id, 'en_route_pickup')}\r\n                          >\r\n                            Start Trip\r\n                          </Button>\r\n                        )}\r\n                        {load.load_status === 'en_route_pickup' && (\r\n                          <Button \r\n                            size=\"sm\" \r\n                            onClick={() => updateLoadStatus(load.id, 'picked_up')}\r\n                          >\r\n                            Picked Up\r\n                          </Button>\r\n                        )}\r\n                        {load.load_status === 'picked_up' && (\r\n                          <Button \r\n                            size=\"sm\" \r\n                            onClick={() => updateLoadStatus(load.id, 'en_route_delivery')}\r\n                          >\r\n                            En Route\r\n                          </Button>\r\n                        )}\r\n                        {load.load_status === 'en_route_delivery' && (\r\n                          <Button \r\n                            size=\"sm\" \r\n                            onClick={() => updateLoadStatus(load.id, 'delivered')}\r\n                          >\r\n                            Delivered\r\n                          </Button>\r\n                        )}\r\n                        <Button variant=\"outline\" size=\"sm\">\r\n                          <Route className=\"w-3 h-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadAssignmentsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\PerformanceTrackingPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPerformanceData'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPerformanceData]","fix":{"range":[1163,1165],"text":"[fetchPerformanceData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  TrendingUp, \r\n  TrendingDown, \r\n  Star, \r\n  Clock, \r\n  Fuel, \r\n  Shield, \r\n  DollarSign,\r\n  Truck,\r\n  Target,\r\n  Award\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface PerformanceMetrics {\r\n  id: string;\r\n  date: string;\r\n  total_miles: number;\r\n  total_loads: number;\r\n  on_time_deliveries: number;\r\n  late_deliveries: number;\r\n  fuel_efficiency: number;\r\n  safety_score: number;\r\n  earnings_total: number;\r\n  hours_driven: number;\r\n  performance_rating: number;\r\n}\r\n\r\nconst PerformanceTrackingPage = () => {\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchPerformanceData();\r\n  }, []);\r\n\r\n  const fetchPerformanceData = async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase\r\n        .from('driver_performance')\r\n        .select('*')\r\n        .eq('driver_id', user.user.id)\r\n        .order('date', { ascending: false })\r\n        .limit(30);\r\n\r\n      if (error) throw error;\r\n      setMetrics(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching performance data:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load performance data\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Calculate aggregated metrics\r\n  const totalMiles = metrics.reduce((sum, m) => sum + (m.total_miles || 0), 0);\r\n  const totalLoads = metrics.reduce((sum, m) => sum + (m.total_loads || 0), 0);\r\n  const totalEarnings = metrics.reduce((sum, m) => sum + (m.earnings_total || 0), 0);\r\n  const onTimeDeliveries = metrics.reduce((sum, m) => sum + (m.on_time_deliveries || 0), 0);\r\n  const lateDeliveries = metrics.reduce((sum, m) => sum + (m.late_deliveries || 0), 0);\r\n  const totalDeliveries = onTimeDeliveries + lateDeliveries;\r\n  const onTimePercentage = totalDeliveries > 0 ? (onTimeDeliveries / totalDeliveries) * 100 : 0;\r\n  const avgSafetyScore = metrics.length > 0 ? metrics.reduce((sum, m) => sum + (m.safety_score || 0), 0) / metrics.length : 0;\r\n  const avgFuelEfficiency = metrics.length > 0 ? metrics.reduce((sum, m) => sum + (m.fuel_efficiency || 0), 0) / metrics.length : 0;\r\n  const avgPerformanceRating = metrics.length > 0 ? metrics.reduce((sum, m) => sum + (m.performance_rating || 0), 0) / metrics.length : 0;\r\n\r\n  const performanceStats = [\r\n    {\r\n      title: \"Total Miles Driven\",\r\n      value: totalMiles.toLocaleString(),\r\n      icon: Truck,\r\n      color: \"text-blue-600\",\r\n      bgColor: \"bg-blue-50\",\r\n      change: \"+2.5%\",\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Loads Completed\",\r\n      value: totalLoads.toString(),\r\n      icon: Target,\r\n      color: \"text-green-600\", \r\n      bgColor: \"bg-green-50\",\r\n      change: \"+8.1%\",\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Total Earnings\",\r\n      value: `$${totalEarnings.toLocaleString()}`,\r\n      icon: DollarSign,\r\n      color: \"text-emerald-600\",\r\n      bgColor: \"bg-emerald-50\",\r\n      change: \"+12.3%\",\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"On-Time Delivery\",\r\n      value: `${onTimePercentage.toFixed(1)}%`,\r\n      icon: Clock,\r\n      color: \"text-purple-600\",\r\n      bgColor: \"bg-purple-50\",\r\n      change: \"+1.2%\",\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Safety Score\",\r\n      value: `${avgSafetyScore.toFixed(1)}/100`,\r\n      icon: Shield,\r\n      color: \"text-red-600\",\r\n      bgColor: \"bg-red-50\",\r\n      change: \"-0.3%\",\r\n      trend: \"down\"\r\n    },\r\n    {\r\n      title: \"Fuel Efficiency\",\r\n      value: `${avgFuelEfficiency.toFixed(1)} MPG`,\r\n      icon: Fuel,\r\n      color: \"text-orange-600\",\r\n      bgColor: \"bg-orange-50\",\r\n      change: \"+3.4%\",\r\n      trend: \"up\"\r\n    }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            {[1,2,3,4,5,6].map(i => (\r\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Performance Tracking</h1>\r\n          <p className=\"text-muted-foreground\">Monitor your driving performance and earnings</p>\r\n        </div>\r\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\r\n          <Star className=\"w-4 h-4 mr-2\" />\r\n          Rating: {avgPerformanceRating.toFixed(1)}/5.0\r\n        </Badge>\r\n      </div>\r\n\r\n      {/* Performance Stats Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {performanceStats.map((stat, index) => {\r\n          const Icon = stat.icon;\r\n          const TrendIcon = stat.trend === 'up' ? TrendingUp : TrendingDown;\r\n          \r\n          return (\r\n            <Card key={index}>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\r\n                <div className={`${stat.bgColor} p-2 rounded-full`}>\r\n                  <Icon className={`h-4 w-4 ${stat.color}`} />\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\r\n                <div className=\"flex items-center text-xs text-muted-foreground\">\r\n                  <TrendIcon className={`w-3 h-3 mr-1 ${stat.trend === 'up' ? 'text-green-500' : 'text-red-500'}`} />\r\n                  <span className={stat.trend === 'up' ? 'text-green-500' : 'text-red-500'}>\r\n                    {stat.change}\r\n                  </span>\r\n                  <span className=\"ml-1\">from last month</span>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Detailed Performance Metrics */}\r\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"safety\">Safety</TabsTrigger>\r\n          <TabsTrigger value=\"efficiency\">Efficiency</TabsTrigger>\r\n          <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Score Breakdown</CardTitle>\r\n                <CardDescription>Your overall performance metrics</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>On-Time Delivery</span>\r\n                    <span>{onTimePercentage.toFixed(1)}%</span>\r\n                  </div>\r\n                  <Progress value={onTimePercentage} className=\"h-2\" />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Safety Score</span>\r\n                    <span>{avgSafetyScore.toFixed(1)}/100</span>\r\n                  </div>\r\n                  <Progress value={avgSafetyScore} className=\"h-2\" />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Fuel Efficiency</span>\r\n                    <span>{((avgFuelEfficiency / 12) * 100).toFixed(1)}%</span>\r\n                  </div>\r\n                  <Progress value={(avgFuelEfficiency / 12) * 100} className=\"h-2\" />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Overall Rating</span>\r\n                    <span>{((avgPerformanceRating / 5) * 100).toFixed(1)}%</span>\r\n                  </div>\r\n                  <Progress value={(avgPerformanceRating / 5) * 100} className=\"h-2\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Recent Achievements</CardTitle>\r\n                <CardDescription>Your latest milestones and awards</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className=\"bg-yellow-100 p-2 rounded-full\">\r\n                      <Award className=\"w-4 h-4 text-yellow-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">Safety Champion</p>\r\n                      <p className=\"text-sm text-muted-foreground\">30 days without incidents</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className=\"bg-green-100 p-2 rounded-full\">\r\n                      <Target className=\"w-4 h-4 text-green-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">On-Time Delivery Pro</p>\r\n                      <p className=\"text-sm text-muted-foreground\">95%+ on-time delivery rate</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className=\"bg-blue-100 p-2 rounded-full\">\r\n                      <Fuel className=\"w-4 h-4 text-blue-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">Fuel Efficiency Expert</p>\r\n                      <p className=\"text-sm text-muted-foreground\">Above average fuel economy</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"safety\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Safety Metrics</CardTitle>\r\n              <CardDescription>Track your safety performance and compliance</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-green-600\">{avgSafetyScore.toFixed(1)}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Safety Score</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">0</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Incidents This Month</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">30</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Days Without Incident</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"efficiency\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Efficiency Metrics</CardTitle>\r\n              <CardDescription>Monitor your operational efficiency</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">{avgFuelEfficiency.toFixed(1)}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">MPG Average</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">{onTimePercentage.toFixed(1)}%</div>\r\n                  <div className=\"text-sm text-muted-foreground\">On-Time Delivery</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">{(totalMiles / Math.max(totalLoads, 1)).toFixed(0)}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Miles per Load</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"earnings\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Earnings Overview</CardTitle>\r\n              <CardDescription>Track your earnings and financial performance</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold text-green-600\">${totalEarnings.toLocaleString()}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Total Earnings</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">${(totalEarnings / Math.max(totalLoads, 1)).toFixed(0)}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Earnings per Load</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-3xl font-bold\">${(totalEarnings / Math.max(totalMiles, 1)).toFixed(2)}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">Earnings per Mile</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceTrackingPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\RouteManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\ShipmentTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\communication\\CustomerContactPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\communication\\DispatchChatPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'messages' array makes the dependencies of useEffect Hook (at line 178) change on every render. To fix this, wrap the initialization of 'messages' in its own useMemo() Hook.","line":108,"column":9,"nodeType":"VariableDeclarator","endLine":165,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { \r\n  MessageCircle, \r\n  Send, \r\n  Phone, \r\n  Video,\r\n  Paperclip,\r\n  MoreHorizontal,\r\n  Users,\r\n  Search,\r\n  Bell,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  MapPin,\r\n  Truck,\r\n  Calendar,\r\n  FileText\r\n} from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\n\r\ninterface Message {\r\n  id: string;\r\n  sender: string;\r\n  senderRole: \"driver\" | \"dispatcher\" | \"system\";\r\n  content: string;\r\n  timestamp: string;\r\n  type: \"text\" | \"location\" | \"image\" | \"document\";\r\n  status: \"sent\" | \"delivered\" | \"read\";\r\n  priority?: \"low\" | \"normal\" | \"high\" | \"urgent\";\r\n}\r\n\r\ninterface ChatThread {\r\n  id: string;\r\n  title: string;\r\n  participants: string[];\r\n  lastMessage: string;\r\n  lastMessageTime: string;\r\n  unreadCount: number;\r\n  status: \"active\" | \"archived\";\r\n  priority: \"low\" | \"normal\" | \"high\" | \"urgent\";\r\n}\r\n\r\nconst DispatchChatPage = () => {\r\n  const { toast } = useToast();\r\n  const [activeThread, setActiveThread] = useState(\"1\");\r\n  const [messageInput, setMessageInput] = useState(\"\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [isNewChatOpen, setIsNewChatOpen] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Mock chat threads\r\n  const chatThreads: ChatThread[] = [\r\n    {\r\n      id: \"1\",\r\n      title: \"Dispatch Central\",\r\n      participants: [\"Sarah Johnson (Dispatcher)\", \"Mike Chen (Safety)\"],\r\n      lastMessage: \"Route update confirmed for I-35 corridor\",\r\n      lastMessageTime: \"2 min ago\",\r\n      unreadCount: 2,\r\n      status: \"active\",\r\n      priority: \"high\"\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Load #TRK-2024-001\",\r\n      participants: [\"Alex Rodriguez (Dispatcher)\"],\r\n      lastMessage: \"Delivery confirmation received\",\r\n      lastMessageTime: \"15 min ago\",\r\n      unreadCount: 0,\r\n      status: \"active\",\r\n      priority: \"normal\"\r\n    },\r\n    {\r\n      id: \"3\",\r\n      title: \"Fleet Maintenance\",\r\n      participants: [\"Tom Wilson (Maintenance)\"],\r\n      lastMessage: \"Oil change scheduled for next Tuesday\",\r\n      lastMessageTime: \"1 hr ago\",\r\n      unreadCount: 1,\r\n      status: \"active\",\r\n      priority: \"normal\"\r\n    },\r\n    {\r\n      id: \"4\",\r\n      title: \"Safety Team\",\r\n      participants: [\"Linda Davis (Safety Director)\", \"Bob Smith (Training)\"],\r\n      lastMessage: \"Monthly safety review completed\",\r\n      lastMessageTime: \"2 hrs ago\",\r\n      unreadCount: 0,\r\n      status: \"active\",\r\n      priority: \"low\"\r\n    }\r\n  ];\r\n\r\n  // Mock messages for active thread\r\n  const messages: Message[] = [\r\n    {\r\n      id: \"1\",\r\n      sender: \"Sarah Johnson\",\r\n      senderRole: \"dispatcher\",\r\n      content: \"Good morning! Your route for today has been updated. Please check the new pickup location in Dallas.\",\r\n      timestamp: \"09:15 AM\",\r\n      type: \"text\",\r\n      status: \"read\",\r\n      priority: \"high\"\r\n    },\r\n    {\r\n      id: \"2\",\r\n      sender: \"You\",\r\n      senderRole: \"driver\",\r\n      content: \"Received the update. ETA to pickup location is 45 minutes. Traffic is light on I-35.\",\r\n      timestamp: \"09:18 AM\",\r\n      type: \"text\",\r\n      status: \"delivered\"\r\n    },\r\n    {\r\n      id: \"3\",\r\n      sender: \"System\",\r\n      senderRole: \"system\",\r\n      content: \"Location update: Driver is 15 miles from pickup location\",\r\n      timestamp: \"09:45 AM\",\r\n      type: \"location\",\r\n      status: \"delivered\"\r\n    },\r\n    {\r\n      id: \"4\",\r\n      sender: \"Sarah Johnson\",\r\n      senderRole: \"dispatcher\",\r\n      content: \"Great! Customer confirmed they'll have the load ready. Please send a photo when you arrive.\",\r\n      timestamp: \"09:47 AM\",\r\n      type: \"text\",\r\n      status: \"read\"\r\n    },\r\n    {\r\n      id: \"5\",\r\n      sender: \"You\",\r\n      senderRole: \"driver\",\r\n      content: \"Arrived at pickup location. Load is ready and securing now.\",\r\n      timestamp: \"10:15 AM\",\r\n      type: \"text\",\r\n      status: \"sent\"\r\n    },\r\n    {\r\n      id: \"6\",\r\n      sender: \"Sarah Johnson\",\r\n      senderRole: \"dispatcher\",\r\n      content: \"Route update confirmed for I-35 corridor. Avoid construction zone near mile marker 245.\",\r\n      timestamp: \"10:18 AM\",\r\n      type: \"text\",\r\n      status: \"delivered\",\r\n      priority: \"urgent\"\r\n    }\r\n  ];\r\n\r\n  const filteredThreads = chatThreads.filter(thread =>\r\n    thread.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    thread.participants.some(p => p.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (messageInput.trim()) {\r\n      toast({\r\n        title: \"Message Sent\",\r\n        description: \"Your message has been sent to dispatch.\",\r\n      });\r\n      setMessageInput(\"\");\r\n    }\r\n  };\r\n\r\n  const handleStartCall = (type: \"voice\" | \"video\") => {\r\n    toast({\r\n      title: `${type === \"voice\" ? \"Voice\" : \"Video\"} Call Started`,\r\n      description: \"Connecting to dispatch...\",\r\n    });\r\n  };\r\n\r\n  const getMessageStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case \"sent\": return <Clock className=\"h-3 w-3 text-gray-400\" />;\r\n      case \"delivered\": return <CheckCircle className=\"h-3 w-3 text-blue-500\" />;\r\n      case \"read\": return <CheckCircle className=\"h-3 w-3 text-green-500\" />;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  const getPriorityBadge = (priority?: string) => {\r\n    if (!priority || priority === \"normal\") return null;\r\n    \r\n    const colors = {\r\n      low: \"bg-gray-100 text-gray-800\",\r\n      high: \"bg-orange-100 text-orange-800\",\r\n      urgent: \"bg-red-100 text-red-800\"\r\n    };\r\n    \r\n    return (\r\n      <Badge className={colors[priority as keyof typeof colors]}>\r\n        {priority}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const quickResponses = [\r\n    \"10-4, received\",\r\n    \"ETA 30 minutes\",\r\n    \"Load secured, departing now\",\r\n    \"Arrived at destination\",\r\n    \"Need assistance\",\r\n    \"Traffic delay expected\"\r\n  ];\r\n\r\n  return (\r\n    <div className=\"w-full max-w-none p-6 h-screen flex flex-col\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Dispatch Chat</h1>\r\n          <p className=\"text-muted-foreground\">Real-time communication with dispatch team</p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Dialog open={isNewChatOpen} onOpenChange={setIsNewChatOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <MessageCircle className=\"h-4 w-4 mr-2\" />\r\n                New Chat\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"sm:max-w-md\">\r\n              <DialogHeader>\r\n                <DialogTitle>Start New Chat</DialogTitle>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"chat-type\">Chat Type</Label>\r\n                  <Select>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Select chat type\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"dispatch\">Dispatch</SelectItem>\r\n                      <SelectItem value=\"maintenance\">Maintenance</SelectItem>\r\n                      <SelectItem value=\"safety\">Safety Team</SelectItem>\r\n                      <SelectItem value=\"support\">Support</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"chat-subject\">Subject</Label>\r\n                  <Input id=\"chat-subject\" placeholder=\"Brief description...\" />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"chat-priority\">Priority</Label>\r\n                  <Select>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Select priority\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"low\">Low</SelectItem>\r\n                      <SelectItem value=\"normal\">Normal</SelectItem>\r\n                      <SelectItem value=\"high\">High</SelectItem>\r\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Button onClick={() => setIsNewChatOpen(false)} className=\"flex-1\">\r\n                    Start Chat\r\n                  </Button>\r\n                  <Button variant=\"outline\" onClick={() => setIsNewChatOpen(false)}>\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n          <Button variant=\"outline\">\r\n            <Bell className=\"h-4 w-4 mr-2\" />\r\n            Notifications\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Chat Interface */}\r\n      <div className=\"flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Chat List */}\r\n        <Card className=\"lg:col-span-1\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Users className=\"h-5 w-5\" />\r\n              Active Chats\r\n            </CardTitle>\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Search conversations...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"p-0\">\r\n            <div className=\"space-y-1\">\r\n              {filteredThreads.map((thread) => (\r\n                <div\r\n                  key={thread.id}\r\n                  className={`p-4 cursor-pointer hover:bg-muted/50 transition-colors ${\r\n                    activeThread === thread.id ? \"bg-primary/10 border-r-2 border-primary\" : \"\"\r\n                  }`}\r\n                  onClick={() => setActiveThread(thread.id)}\r\n                >\r\n                  <div className=\"flex items-start justify-between mb-2\">\r\n                    <h4 className=\"font-medium text-sm\">{thread.title}</h4>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {getPriorityBadge(thread.priority)}\r\n                      {thread.unreadCount > 0 && (\r\n                        <Badge variant=\"destructive\" className=\"text-xs px-1.5 py-0.5\">\r\n                          {thread.unreadCount}\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"text-xs text-muted-foreground mb-1\">\r\n                    {thread.participants.join(\", \")}\r\n                  </p>\r\n                  <p className=\"text-sm text-muted-foreground truncate\">{thread.lastMessage}</p>\r\n                  <p className=\"text-xs text-muted-foreground mt-1\">{thread.lastMessageTime}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Chat Messages */}\r\n        <Card className=\"lg:col-span-2 flex flex-col\">\r\n          <CardHeader className=\"flex-shrink-0\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <MessageCircle className=\"h-5 w-5\" />\r\n                  {chatThreads.find(t => t.id === activeThread)?.title}\r\n                </CardTitle>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {chatThreads.find(t => t.id === activeThread)?.participants.join(\", \")}\r\n                </p>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <Button size=\"sm\" variant=\"outline\" onClick={() => handleStartCall(\"voice\")}>\r\n                  <Phone className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button size=\"sm\" variant=\"outline\" onClick={() => handleStartCall(\"video\")}>\r\n                  <Video className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button size=\"sm\" variant=\"outline\">\r\n                  <MoreHorizontal className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          {/* Messages Area */}\r\n          <CardContent className=\"flex-1 flex flex-col p-4\">\r\n            <div className=\"flex-1 space-y-4 overflow-y-auto mb-4 max-h-96\">\r\n              {messages.map((message) => (\r\n                <div\r\n                  key={message.id}\r\n                  className={`flex ${message.senderRole === \"driver\" ? \"justify-end\" : \"justify-start\"}`}\r\n                >\r\n                  <div className={`max-w-[80%] ${message.senderRole === \"driver\" ? \"order-1\" : \"order-2\"}`}>\r\n                    {message.senderRole !== \"driver\" && (\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <Avatar className=\"h-6 w-6\">\r\n                          <AvatarFallback className=\"text-xs\">\r\n                            {message.sender.charAt(0)}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <span className=\"text-xs font-medium\">{message.sender}</span>\r\n                        {getPriorityBadge(message.priority)}\r\n                      </div>\r\n                    )}\r\n                    <div\r\n                      className={`p-3 rounded-lg ${\r\n                        message.senderRole === \"driver\"\r\n                          ? \"bg-primary text-primary-foreground\"\r\n                          : message.senderRole === \"system\"\r\n                          ? \"bg-secondary text-secondary-foreground\"\r\n                          : \"bg-muted\"\r\n                      }`}\r\n                    >\r\n                      {message.type === \"location\" && (\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <MapPin className=\"h-4 w-4\" />\r\n                          <span className=\"text-xs font-medium\">Location Update</span>\r\n                        </div>\r\n                      )}\r\n                      <p className=\"text-sm\">{message.content}</p>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 mt-1\">\r\n                      <span className=\"text-xs text-muted-foreground\">{message.timestamp}</span>\r\n                      {message.senderRole === \"driver\" && getMessageStatusIcon(message.status)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            {/* Quick Responses */}\r\n            <div className=\"mb-4\">\r\n              <Label className=\"text-xs text-muted-foreground mb-2 block\">Quick Responses</Label>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {quickResponses.map((response, index) => (\r\n                  <Button\r\n                    key={index}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"text-xs h-7\"\r\n                    onClick={() => setMessageInput(response)}\r\n                  >\r\n                    {response}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Message Input */}\r\n            <div className=\"flex gap-2\">\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Paperclip className=\"h-4 w-4\" />\r\n              </Button>\r\n              <div className=\"flex-1 flex gap-2\">\r\n                <Input\r\n                  placeholder=\"Type your message...\"\r\n                  value={messageInput}\r\n                  onChange={(e) => setMessageInput(e.target.value)}\r\n                  onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\r\n                  className=\"flex-1\"\r\n                />\r\n                <Button onClick={handleSendMessage}>\r\n                  <Send className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DispatchChatPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\communication\\EmergencyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\documents\\HOSLogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\documents\\ReceiptsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\documents\\TripReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\loads\\CurrentLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\loads\\DeliveryStatusPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\loads\\LoadHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\payroll\\PayrollPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\performance\\EarningsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\performance\\EfficiencyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\performance\\SafetyScorePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\profile\\DocumentsLogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\profile\\EarningsPaymentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\profile\\PerformanceDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\profile\\ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\routes\\ActiveRoutePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initializeRouteData' and 'updateLiveData'. Either include them or remove the dependency array.","line":174,"column":6,"nodeType":"ArrayExpression","endLine":174,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeRouteData, updateLiveData]","fix":{"range":[6180,6182],"text":"[initializeRouteData, updateLiveData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { \r\n  MapPin, Clock, Truck, Navigation, Phone, MessageCircle, AlertTriangle, CheckCircle2, \r\n  Circle, Timer, Fuel, Package, Upload, DollarSign, Camera, FileText, PenTool, Plus, \r\n  Pin, Navigation2, Thermometer, Zap, MapIcon, Apple, Car, Edit3, Save, X, Signature, \r\n  Mail, Calculator, Receipt, CreditCard, Bot, Mic, MicOff, Volume2, Wifi, WifiOff, \r\n  Satellite, Shield, Activity, Search, Filter, Calendar, TrendingUp, Star, Eye,\r\n  Pause, Play, Route, Hash, Weight, Package2, ArrowRight, MoreHorizontal, Bell,\r\n  Compass, Gauge, BatteryCharging, Signal, CloudRain, Sun, Snowflake, Wind,\r\n  Users, FileSignature, Clipboard, AlertCircle, CheckCircle, ExternalLink,\r\n  RefreshCw, ChevronDown, ChevronUp, Maximize2, Minimize2, BarChart3,\r\n  Target, Award, TrendingDown, Wallet, Wrench, Globe, Smartphone\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\nimport { toast } from 'sonner';\r\n\r\n// Enhanced Types with Real-World Data Structure\r\ninterface WeatherData {\r\n  location: string;\r\n  condition: 'sunny' | 'cloudy' | 'rainy' | 'snowy' | 'foggy' | 'stormy';\r\n  temperature: number;\r\n  windSpeed: number;\r\n  visibility: number;\r\n  humidity: number;\r\n  icon: string;\r\n  alerts?: string[];\r\n}\r\n\r\ninterface TrafficData {\r\n  severity: 'light' | 'moderate' | 'heavy' | 'severe';\r\n  delay: number;\r\n  description: string;\r\n  alternateRoute?: boolean;\r\n  eta_impact: number;\r\n}\r\n\r\ninterface VehicleDiagnostics {\r\n  engineHealth: number;\r\n  brakeHealth: number;\r\n  tireHealth: number;\r\n  fuelEfficiency: number;\r\n  engineTemp: number;\r\n  oilPressure: number;\r\n  batteryVoltage: number;\r\n  lastService: string;\r\n  nextServiceDue: number;\r\n  alerts: string[];\r\n}\r\n\r\ninterface HosStatus {\r\n  driveTime: number;\r\n  onDutyTime: number;\r\n  sleepTime: number;\r\n  offDutyTime: number;\r\n  maxDriveTime: number;\r\n  maxOnDutyTime: number;\r\n  requiredBreakIn: number;\r\n  violationRisk: 'none' | 'low' | 'medium' | 'high';\r\n  nextBreakRequired: string;\r\n}\r\n\r\ninterface ActiveLoad {\r\n  id: string;\r\n  loadNumber: string;\r\n  customerName: string;\r\n  pickupLocation: {\r\n    company: string;\r\n    address: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    coordinates: { lat: number; lng: number };\r\n    contactName: string;\r\n    contactPhone: string;\r\n    scheduledTime: string;\r\n    window: string;\r\n  };\r\n  deliveryLocation: {\r\n    company: string;\r\n    address: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    coordinates: { lat: number; lng: number };\r\n    contactName: string;\r\n    contactPhone: string;\r\n    scheduledTime: string;\r\n    window: string;\r\n  };\r\n  cargo: {\r\n    type: string;\r\n    weight: number;\r\n    pallets: number;\r\n    pieces: number;\r\n    value: number;\r\n    hazmat: boolean;\r\n    temperature?: number;\r\n    specialInstructions: string[];\r\n  };\r\n  documentation: {\r\n    bol: { status: 'pending' | 'uploaded' | 'signed'; url?: string };\r\n    pod: { status: 'pending' | 'uploaded' | 'signed'; url?: string };\r\n    weighTickets: { status: 'pending' | 'uploaded'; urls: string[] };\r\n    photos: { type: string; url: string; timestamp: string }[];\r\n  };\r\n  status: 'assigned' | 'en_route_pickup' | 'at_pickup' | 'loaded' | 'en_route_delivery' | 'at_delivery' | 'delivered';\r\n  earnings: {\r\n    baseRate: number;\r\n    mileageRate: number;\r\n    stops: number;\r\n    accessories: { type: string; amount: number }[];\r\n    fuelSurcharge: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\ninterface RouteIntelligence {\r\n  currentMile: number;\r\n  totalMiles: number;\r\n  completionPercentage: number;\r\n  estimatedTimeRemaining: number;\r\n  fuelStopsRecommended: number;\r\n  nextFuelStop: {\r\n    name: string;\r\n    distance: number;\r\n    fuelPrice: number;\r\n    amenities: string[];\r\n  };\r\n  alternateRoutes: {\r\n    primary: { miles: number; time: number; tolls: number };\r\n    scenic: { miles: number; time: number; tolls: number };\r\n    truck_optimized: { miles: number; time: number; tolls: number };\r\n  };\r\n  roadConditions: {\r\n    construction: boolean;\r\n    accidents: boolean;\r\n    weather_advisory: boolean;\r\n    truck_restrictions: boolean;\r\n  };\r\n}\r\n\r\nconst ActiveRoutePage: React.FC = () => {\r\n  // State Management\r\n  const [activeLoad, setActiveLoad] = useState<ActiveLoad | null>(null);\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [traffic, setTraffic] = useState<TrafficData | null>(null);\r\n  const [vehicle, setVehicle] = useState<VehicleDiagnostics | null>(null);\r\n  const [hosStatus, setHosStatus] = useState<HosStatus | null>(null);\r\n  const [routeIntel, setRouteIntel] = useState<RouteIntelligence | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [currentView, setCurrentView] = useState<'dashboard' | 'navigation' | 'logs' | 'documentation'>('dashboard');\r\n  const [voiceEnabled, setVoiceEnabled] = useState(false);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n  const [expandedSections, setExpandedSections] = useState<string[]>(['route', 'vehicle']);\r\n\r\n  // Initialize with realistic data\r\n  useEffect(() => {\r\n    initializeRouteData();\r\n    const interval = setInterval(updateLiveData, 30000); // Update every 30 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const initializeRouteData = async () => {\r\n    try {\r\n      // Simulate API calls with realistic data\r\n      await Promise.all([\r\n        loadActiveRoute(),\r\n        loadWeatherData(),\r\n        loadTrafficData(),\r\n        loadVehicleDiagnostics(),\r\n        loadHosStatus(),\r\n        loadRouteIntelligence()\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadActiveRoute = async () => {\r\n    // Realistic active load data\r\n    const mockLoad: ActiveLoad = {\r\n      id: \"LD-2025-001247\",\r\n      loadNumber: \"ABC-789456\",\r\n      customerName: \"Walmart Distribution\",\r\n      pickupLocation: {\r\n        company: \"Procter & Gamble Manufacturing\",\r\n        address: \"4250 E 5th Ave\",\r\n        city: \"Cincinnati\",\r\n        state: \"OH\",\r\n        zipCode: \"45202\",\r\n        coordinates: { lat: 39.1031, lng: -84.5120 },\r\n        contactName: \"Mike Henderson\",\r\n        contactPhone: \"(513) 555-0192\",\r\n        scheduledTime: \"2025-01-25T08:00:00Z\",\r\n        window: \"08:00 - 10:00\"\r\n      },\r\n      deliveryLocation: {\r\n        company: \"Walmart Distribution Center #6094\",\r\n        address: \"7991 Enterprise Dr\",\r\n        city: \"Newark\",\r\n        state: \"OH\",\r\n        zipCode: \"43055\",\r\n        coordinates: { lat: 40.0581, lng: -82.4013 },\r\n        contactName: \"Sarah Martinez\",\r\n        contactPhone: \"(740) 555-0234\",\r\n        scheduledTime: \"2025-01-25T14:30:00Z\",\r\n        window: \"14:00 - 16:00\"\r\n      },\r\n      cargo: {\r\n        type: \"Consumer Goods - Non-Hazmat\",\r\n        weight: 44500,\r\n        pallets: 26,\r\n        pieces: 1247,\r\n        value: 187500,\r\n        hazmat: false,\r\n        specialInstructions: [\r\n          \"Dock door #12 - appointment required\",\r\n          \"Load must remain upright\",\r\n          \"Temperature sensitive - keep dry\",\r\n          \"Count verification required\"\r\n        ]\r\n      },\r\n      documentation: {\r\n        bol: { status: 'signed', url: '/docs/bol_789456.pdf' },\r\n        pod: { status: 'pending' },\r\n        weighTickets: { status: 'uploaded', urls: ['/docs/weight_in.pdf'] },\r\n        photos: [\r\n          { type: 'load_secured', url: '/photos/load1.jpg', timestamp: '2025-01-25T08:45:00Z' },\r\n          { type: 'seal_intact', url: '/photos/seal1.jpg', timestamp: '2025-01-25T08:47:00Z' }\r\n        ]\r\n      },\r\n      status: 'en_route_delivery',\r\n      earnings: {\r\n        baseRate: 1850.00,\r\n        mileageRate: 0.68,\r\n        stops: 1,\r\n        accessories: [\r\n          { type: 'Fuel surcharge', amount: 127.50 },\r\n          { type: 'Layover pay', amount: 100.00 }\r\n        ],\r\n        fuelSurcharge: 89.25,\r\n        total: 2166.75\r\n      }\r\n    };\r\n    setActiveLoad(mockLoad);\r\n  };\r\n\r\n  const loadWeatherData = async () => {\r\n    const mockWeather: WeatherData = {\r\n      location: \"Newark, OH\",\r\n      condition: 'cloudy',\r\n      temperature: 34,\r\n      windSpeed: 12,\r\n      visibility: 8.5,\r\n      humidity: 78,\r\n      icon: '‚õÖ',\r\n      alerts: ['Winter Weather Advisory until 6 PM']\r\n    };\r\n    setWeather(mockWeather);\r\n  };\r\n\r\n  const loadTrafficData = async () => {\r\n    const mockTraffic: TrafficData = {\r\n      severity: 'moderate',\r\n      delay: 15,\r\n      description: 'Construction on I-70 E, lane closure',\r\n      alternateRoute: true,\r\n      eta_impact: 12\r\n    };\r\n    setTraffic(mockTraffic);\r\n  };\r\n\r\n  const loadVehicleDiagnostics = async () => {\r\n    const mockVehicle: VehicleDiagnostics = {\r\n      engineHealth: 94,\r\n      brakeHealth: 87,\r\n      tireHealth: 91,\r\n      fuelEfficiency: 6.8,\r\n      engineTemp: 195,\r\n      oilPressure: 45,\r\n      batteryVoltage: 12.6,\r\n      lastService: \"2025-01-15\",\r\n      nextServiceDue: 2500,\r\n      alerts: []\r\n    };\r\n    setVehicle(mockVehicle);\r\n  };\r\n\r\n  const loadHosStatus = async () => {\r\n    const mockHos: HosStatus = {\r\n      driveTime: 6.5,\r\n      onDutyTime: 8.25,\r\n      sleepTime: 10.0,\r\n      offDutyTime: 0.75,\r\n      maxDriveTime: 11.0,\r\n      maxOnDutyTime: 14.0,\r\n      requiredBreakIn: 1.5,\r\n      violationRisk: 'low',\r\n      nextBreakRequired: \"15:30\"\r\n    };\r\n    setHosStatus(mockHos);\r\n  };\r\n\r\n  const loadRouteIntelligence = async () => {\r\n    const mockRoute: RouteIntelligence = {\r\n      currentMile: 89,\r\n      totalMiles: 247,\r\n      completionPercentage: 36,\r\n      estimatedTimeRemaining: 185,\r\n      fuelStopsRecommended: 1,\r\n      nextFuelStop: {\r\n        name: \"TA Travel Center - I-70 Exit 142\",\r\n        distance: 67,\r\n        fuelPrice: 3.89,\r\n        amenities: ['Showers', 'Restaurant', 'Laundry', 'WiFi']\r\n      },\r\n      alternateRoutes: {\r\n        primary: { miles: 247, time: 285, tolls: 12.50 },\r\n        scenic: { miles: 271, time: 315, tolls: 8.75 },\r\n        truck_optimized: { miles: 251, time: 295, tolls: 15.25 }\r\n      },\r\n      roadConditions: {\r\n        construction: true,\r\n        accidents: false,\r\n        weather_advisory: true,\r\n        truck_restrictions: false\r\n      }\r\n    };\r\n    setRouteIntel(mockRoute);\r\n  };\r\n\r\n  const updateLiveData = useCallback(() => {\r\n    if (!autoRefresh) return;\r\n    \r\n    // Simulate live updates\r\n    setRouteIntel(prev => prev ? {\r\n      ...prev,\r\n      currentMile: prev.currentMile + (Math.random() * 2),\r\n      completionPercentage: Math.min(prev.completionPercentage + 0.1, 100),\r\n      estimatedTimeRemaining: Math.max(prev.estimatedTimeRemaining - 1, 0)\r\n    } : null);\r\n\r\n    setVehicle(prev => prev ? {\r\n      ...prev,\r\n      engineTemp: 195 + (Math.random() * 10 - 5),\r\n      fuelEfficiency: prev.fuelEfficiency + (Math.random() * 0.2 - 0.1)\r\n    } : null);\r\n  }, [autoRefresh]);\r\n\r\n  const handleStatusUpdate = (newStatus: ActiveLoad['status']) => {\r\n    if (!activeLoad) return;\r\n    \r\n    setActiveLoad(prev => prev ? { ...prev, status: newStatus } : null);\r\n    toast.success(`Status updated to: ${newStatus.replace('_', ' ').toUpperCase()}`);\r\n  };\r\n\r\n  const handleDocumentUpload = (type: string) => {\r\n    toast.success(`${type} uploaded successfully`);\r\n  };\r\n\r\n  const handleEmergencyContact = () => {\r\n    window.open('tel:+18005551234');\r\n  };\r\n\r\n  const toggleSection = (section: string) => {\r\n    setExpandedSections(prev => \r\n      prev.includes(section) \r\n        ? prev.filter(s => s !== section)\r\n        : [...prev, section]\r\n    );\r\n  };\r\n\r\n  const getStatusColor = (status: ActiveLoad['status']) => {\r\n    const colors = {\r\n      'assigned': 'bg-blue-100 text-blue-700 border-blue-200',\r\n      'en_route_pickup': 'bg-yellow-100 text-yellow-700 border-yellow-200',\r\n      'at_pickup': 'bg-orange-100 text-orange-700 border-orange-200',\r\n      'loaded': 'bg-purple-100 text-purple-700 border-purple-200',\r\n      'en_route_delivery': 'bg-cyan-100 text-cyan-700 border-cyan-200',\r\n      'at_delivery': 'bg-green-100 text-green-700 border-green-200',\r\n      'delivered': 'bg-emerald-100 text-emerald-700 border-emerald-200'\r\n    };\r\n    return colors[status] || 'bg-gray-100 text-gray-700 border-gray-200';\r\n  };\r\n\r\n  const getWeatherIcon = (condition: string) => {\r\n    const icons = {\r\n      sunny: <Sun className=\"w-5 h-5 text-yellow-500\" />,\r\n      cloudy: <CloudRain className=\"w-5 h-5 text-gray-500\" />,\r\n      rainy: <CloudRain className=\"w-5 h-5 text-blue-500\" />,\r\n      snowy: <Snowflake className=\"w-5 h-5 text-blue-300\" />,\r\n      foggy: <Eye className=\"w-5 h-5 text-gray-400\" />,\r\n      stormy: <Zap className=\"w-5 h-5 text-purple-500\" />\r\n    };\r\n    return icons[condition as keyof typeof icons] || icons.cloudy;\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center\">\r\n        <div className=\"text-center space-y-4\">\r\n          <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\r\n          <p className=\"text-lg font-medium text-slate-600\">Loading route intelligence...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!activeLoad) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardContent className=\"p-8 text-center space-y-4\">\r\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\r\n              <Truck className=\"w-8 h-8 text-blue-600\" />\r\n            </div>\r\n            <h3 className=\"text-xl font-semibold\">No Active Route</h3>\r\n            <p className=\"text-muted-foreground\">Contact dispatch for route assignment</p>\r\n            <Button onClick={handleEmergencyContact} className=\"w-full\">\r\n              <Phone className=\"w-4 h-4 mr-2\" />\r\n              Contact Dispatch\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\r\n      {/* Revolutionary Command Center Header */}\r\n      <div className=\"sticky top-0 z-50 bg-white/95 backdrop-blur-xl border-b border-slate-200/60 shadow-lg\">\r\n        <div className=\"max-w-7xl mx-auto p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"relative\">\r\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\r\n                  <Route className=\"w-6 h-6 text-white\" />\r\n                </div>\r\n                <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white animate-pulse\"></div>\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\r\n                  Active Route Control\r\n                </h1>\r\n                <div className=\"flex items-center space-x-3 text-sm text-slate-600\">\r\n                  <span className=\"font-medium\">{activeLoad.loadNumber}</span>\r\n                  <Badge className={getStatusColor(activeLoad.status)}>\r\n                    {activeLoad.status.replace('_', ' ').toUpperCase()}\r\n                  </Badge>\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                    <span>LIVE</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"flex items-center space-x-2 text-sm\">\r\n                <Switch \r\n                  checked={voiceEnabled} \r\n                  onCheckedChange={setVoiceEnabled}\r\n                  className=\"data-[state=checked]:bg-blue-600\"\r\n                />\r\n                <span className=\"text-slate-600\">Voice Commands</span>\r\n                {voiceEnabled ? <Mic className=\"w-4 h-4 text-blue-600\" /> : <MicOff className=\"w-4 h-4 text-slate-400\" />}\r\n              </div>\r\n              \r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleEmergencyContact}>\r\n                <Phone className=\"w-4 h-4 mr-2\" />\r\n                Emergency\r\n              </Button>\r\n              \r\n              <Button className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\">\r\n                <Navigation className=\"w-4 h-4 mr-2\" />\r\n                Navigate\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\r\n        {/* Intelligent Command Dashboard */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6\">\r\n          {/* Main Route Intelligence Panel */}\r\n          <div className=\"lg:col-span-8 space-y-6\">\r\n            {/* Live Route Progress */}\r\n            <Card className=\"overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-blue-50/50\">\r\n              <CardHeader className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle className=\"flex items-center space-x-2\">\r\n                    <Target className=\"w-5 h-5\" />\r\n                    <span>Route Intelligence</span>\r\n                  </CardTitle>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Badge className=\"bg-white/20 text-white border-white/30\">\r\n                      {routeIntel?.completionPercentage}% Complete\r\n                    </Badge>\r\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-white hover:bg-white/20\">\r\n                      <RefreshCw className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"space-y-6\">\r\n                  {/* Progress Visualization */}\r\n                  <div className=\"relative\">\r\n                    <div className=\"flex justify-between text-sm font-medium mb-2\">\r\n                      <span>Cincinnati, OH</span>\r\n                      <span className=\"text-blue-600\">{routeIntel?.currentMile} of {routeIntel?.totalMiles} miles</span>\r\n                      <span>Newark, OH</span>\r\n                    </div>\r\n                    <div className=\"relative h-3 bg-slate-200 rounded-full overflow-hidden\">\r\n                      <div \r\n                        className=\"h-full bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full transition-all duration-1000 ease-out\"\r\n                        style={{ width: `${routeIntel?.completionPercentage}%` }}\r\n                      />\r\n                      <div \r\n                        className=\"absolute top-0 w-3 h-3 bg-blue-600 rounded-full border-2 border-white shadow-lg transform -translate-x-1/2\"\r\n                        style={{ left: `${routeIntel?.completionPercentage}%` }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\r\n                      <span>Pickup Complete</span>\r\n                      <span>ETA: 2:30 PM</span>\r\n                      <span>Delivery</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Live Metrics Grid */}\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                    <div className=\"bg-green-50 rounded-xl p-4 border border-green-100\">\r\n                      <div className=\"flex items-center space-x-2 mb-2\">\r\n                        <Clock className=\"w-4 h-4 text-green-600\" />\r\n                        <span className=\"text-sm font-medium text-green-700\">ETA</span>\r\n                      </div>\r\n                      <p className=\"text-xl font-bold text-green-800\">3h 5m</p>\r\n                      <p className=\"text-xs text-green-600\">On time</p>\r\n                    </div>\r\n\r\n                    <div className=\"bg-blue-50 rounded-xl p-4 border border-blue-100\">\r\n                      <div className=\"flex items-center space-x-2 mb-2\">\r\n                        <Fuel className=\"w-4 h-4 text-blue-600\" />\r\n                        <span className=\"text-sm font-medium text-blue-700\">Fuel</span>\r\n                      </div>\r\n                      <p className=\"text-xl font-bold text-blue-800\">67%</p>\r\n                      <p className=\"text-xs text-blue-600\">Next: 67 mi</p>\r\n                    </div>\r\n\r\n                    <div className=\"bg-orange-50 rounded-xl p-4 border border-orange-100\">\r\n                      <div className=\"flex items-center space-x-2 mb-2\">\r\n                        <Timer className=\"w-4 h-4 text-orange-600\" />\r\n                        <span className=\"text-sm font-medium text-orange-700\">HOS</span>\r\n                      </div>\r\n                      <p className=\"text-xl font-bold text-orange-800\">4.5h</p>\r\n                      <p className=\"text-xs text-orange-600\">Remaining</p>\r\n                    </div>\r\n\r\n                    <div className=\"bg-purple-50 rounded-xl p-4 border border-purple-100\">\r\n                      <div className=\"flex items-center space-x-2 mb-2\">\r\n                        <DollarSign className=\"w-4 h-4 text-purple-600\" />\r\n                        <span className=\"text-sm font-medium text-purple-700\">Earnings</span>\r\n                      </div>\r\n                      <p className=\"text-xl font-bold text-purple-800\">${activeLoad.earnings.total.toLocaleString()}</p>\r\n                      <p className=\"text-xs text-purple-600\">This load</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Smart Alerts & Conditions */}\r\n            <Card className=\"border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <AlertTriangle className=\"w-5 h-5 text-orange-500\" />\r\n                  <span>Live Conditions & Alerts</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  {/* Weather */}\r\n                  <div className=\"bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-4 border border-blue-100\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        {getWeatherIcon(weather?.condition || 'cloudy')}\r\n                        <span className=\"font-medium\">Weather</span>\r\n                      </div>\r\n                      <span className=\"text-2xl font-bold\">{weather?.temperature}¬∞F</span>\r\n                    </div>\r\n                    <div className=\"space-y-1 text-sm text-slate-600\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Visibility:</span>\r\n                        <span>{weather?.visibility} mi</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Wind:</span>\r\n                        <span>{weather?.windSpeed} mph</span>\r\n                      </div>\r\n                    </div>\r\n                    {weather?.alerts && weather.alerts.length > 0 && (\r\n                      <div className=\"mt-2 p-2 bg-orange-100 rounded-lg\">\r\n                        <p className=\"text-xs text-orange-700 font-medium\">{weather.alerts[0]}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Traffic */}\r\n                  <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-xl p-4 border border-yellow-100\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Activity className=\"w-5 h-5 text-orange-500\" />\r\n                        <span className=\"font-medium\">Traffic</span>\r\n                      </div>\r\n                      <Badge className=\"bg-yellow-100 text-yellow-700\">\r\n                        {traffic?.severity.toUpperCase()}\r\n                      </Badge>\r\n                    </div>\r\n                    <div className=\"space-y-1 text-sm text-slate-600\">\r\n                      <p>{traffic?.description}</p>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Delay:</span>\r\n                        <span className=\"font-medium text-orange-600\">+{traffic?.delay} min</span>\r\n                      </div>\r\n                    </div>\r\n                    {traffic?.alternateRoute && (\r\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\r\n                        <Route className=\"w-4 h-4 mr-2\" />\r\n                        View Alternate\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Vehicle Health */}\r\n                  <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-4 border border-green-100\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Gauge className=\"w-5 h-5 text-green-500\" />\r\n                        <span className=\"font-medium\">Vehicle</span>\r\n                      </div>\r\n                      <span className=\"text-2xl font-bold text-green-600\">{vehicle?.engineHealth}%</span>\r\n                    </div>\r\n                    <div className=\"space-y-1 text-sm text-slate-600\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Engine Temp:</span>\r\n                        <span>{vehicle?.engineTemp}¬∞F</span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Oil Pressure:</span>\r\n                        <span>{vehicle?.oilPressure} PSI</span>\r\n                      </div>\r\n                    </div>\r\n                    <Progress value={vehicle?.engineHealth} className=\"mt-2 h-2\" />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Load Documentation Hub */}\r\n            <Card className=\"border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle className=\"flex items-center space-x-2\">\r\n                    <FileText className=\"w-5 h-5 text-blue-500\" />\r\n                    <span>Load Documentation</span>\r\n                  </CardTitle>\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <Camera className=\"w-4 h-4 mr-2\" />\r\n                    Quick Capture\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <div className=\"bg-green-50 rounded-xl p-4 border border-green-100\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\r\n                      <Badge className=\"bg-green-100 text-green-700\">Complete</Badge>\r\n                    </div>\r\n                    <h4 className=\"font-medium\">Bill of Lading</h4>\r\n                    <p className=\"text-sm text-slate-600 mb-3\">Signed & uploaded</p>\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\r\n                      <Eye className=\"w-4 h-4 mr-2\" />\r\n                      View Document\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <div className=\"bg-orange-50 rounded-xl p-4 border border-orange-100\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <Circle className=\"w-6 h-6 text-orange-600\" />\r\n                      <Badge className=\"bg-orange-100 text-orange-700\">Pending</Badge>\r\n                    </div>\r\n                    <h4 className=\"font-medium\">Proof of Delivery</h4>\r\n                    <p className=\"text-sm text-slate-600 mb-3\">Ready for delivery</p>\r\n                    <Button className=\"w-full bg-orange-500 hover:bg-orange-600\" size=\"sm\">\r\n                      <Signature className=\"w-4 h-4 mr-2\" />\r\n                      Get Signature\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <div className=\"bg-blue-50 rounded-xl p-4 border border-blue-100\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <CheckCircle className=\"w-6 h-6 text-blue-600\" />\r\n                      <Badge className=\"bg-blue-100 text-blue-700\">Complete</Badge>\r\n                    </div>\r\n                    <h4 className=\"font-medium\">Weight Tickets</h4>\r\n                    <p className=\"text-sm text-slate-600 mb-3\">1 document uploaded</p>\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\r\n                      <Upload className=\"w-4 h-4 mr-2\" />\r\n                      Add More\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <div className=\"bg-purple-50 rounded-xl p-4 border border-purple-100\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <CheckCircle className=\"w-6 h-6 text-purple-600\" />\r\n                      <Badge className=\"bg-purple-100 text-purple-700\">2 Photos</Badge>\r\n                    </div>\r\n                    <h4 className=\"font-medium\">Load Photos</h4>\r\n                    <p className=\"text-sm text-slate-600 mb-3\">Secured & sealed</p>\r\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\r\n                      <Camera className=\"w-4 h-4 mr-2\" />\r\n                      Add Photo\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Smart Sidebar - Mission Control */}\r\n          <div className=\"lg:col-span-4 space-y-6\">\r\n            {/* HOS Compliance Monitor */}\r\n            <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-orange-50/50\">\r\n              <CardHeader className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-t-lg\">\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Shield className=\"w-5 h-5\" />\r\n                  <span>HOS Compliance</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"p-4 space-y-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm font-medium\">Drive Time</span>\r\n                    <span className=\"font-bold\">{hosStatus?.driveTime}h / {hosStatus?.maxDriveTime}h</span>\r\n                  </div>\r\n                  <Progress value={(hosStatus?.driveTime || 0) / (hosStatus?.maxDriveTime || 11) * 100} className=\"h-2\" />\r\n                  \r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm font-medium\">On Duty</span>\r\n                    <span className=\"font-bold\">{hosStatus?.onDutyTime}h / {hosStatus?.maxOnDutyTime}h</span>\r\n                  </div>\r\n                  <Progress value={(hosStatus?.onDutyTime || 0) / (hosStatus?.maxOnDutyTime || 14) * 100} className=\"h-2\" />\r\n                </div>\r\n\r\n                <div className=\"bg-yellow-50 rounded-lg p-3 border border-yellow-200\">\r\n                  <div className=\"flex items-center space-x-2 mb-1\">\r\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\r\n                    <span className=\"text-sm font-medium text-yellow-700\">Break Required</span>\r\n                  </div>\r\n                  <p className=\"text-sm text-yellow-600\">Next break in {hosStatus?.requiredBreakIn}h at {hosStatus?.nextBreakRequired}</p>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                  <div className=\"text-center p-2 bg-green-50 rounded\">\r\n                    <p className=\"font-medium text-green-700\">Sleep Time</p>\r\n                    <p className=\"text-green-600\">{hosStatus?.sleepTime}h</p>\r\n                  </div>\r\n                  <div className=\"text-center p-2 bg-blue-50 rounded\">\r\n                    <p className=\"font-medium text-blue-700\">Off Duty</p>\r\n                    <p className=\"text-blue-600\">{hosStatus?.offDutyTime}h</p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Load Details Summary */}\r\n            <Card className=\"border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Package className=\"w-5 h-5 text-blue-500\" />\r\n                  <span>Load Details</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span className=\"text-sm text-slate-600\">Customer:</span>\r\n                    <span className=\"font-medium\">{activeLoad.customerName}</span>\r\n                  </div>\r\n                  \r\n                  <Separator />\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <h4 className=\"font-medium text-green-700\">‚úÖ Pickup Complete</h4>\r\n                    <p className=\"text-sm text-slate-600\">{activeLoad.pickupLocation.company}</p>\r\n                    <p className=\"text-xs text-slate-500\">{activeLoad.pickupLocation.city}, {activeLoad.pickupLocation.state}</p>\r\n                  </div>\r\n                  \r\n                  <Separator />\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <h4 className=\"font-medium text-blue-700\">üéØ Delivery Destination</h4>\r\n                    <p className=\"text-sm text-slate-600\">{activeLoad.deliveryLocation.company}</p>\r\n                    <p className=\"text-xs text-slate-500\">{activeLoad.deliveryLocation.city}, {activeLoad.deliveryLocation.state}</p>\r\n                    <div className=\"flex items-center space-x-2 text-sm\">\r\n                      <Clock className=\"w-4 h-4 text-blue-500\" />\r\n                      <span>Window: {activeLoad.deliveryLocation.window}</span>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <Separator />\r\n                  \r\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                    <div>\r\n                      <p className=\"text-slate-600\">Weight:</p>\r\n                      <p className=\"font-medium\">{activeLoad.cargo.weight.toLocaleString()} lbs</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-slate-600\">Pallets:</p>\r\n                      <p className=\"font-medium\">{activeLoad.cargo.pallets}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-slate-600\">Pieces:</p>\r\n                      <p className=\"font-medium\">{activeLoad.cargo.pieces.toLocaleString()}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-slate-600\">Value:</p>\r\n                      <p className=\"font-medium\">${activeLoad.cargo.value.toLocaleString()}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Quick Actions Command Center */}\r\n            <Card className=\"border-0 shadow-lg\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Zap className=\"w-5 h-5 text-purple-500\" />\r\n                  <span>Quick Actions</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700\" size=\"lg\">\r\n                  <Navigation className=\"w-4 h-4 mr-2\" />\r\n                  Start Navigation\r\n                </Button>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-2\">\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <Phone className=\"w-4 h-4 mr-2\" />\r\n                    Call Customer\r\n                  </Button>\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <MessageCircle className=\"w-4 h-4 mr-2\" />\r\n                    Chat Dispatch\r\n                  </Button>\r\n                </div>\r\n                \r\n                <Button variant=\"outline\" className=\"w-full\">\r\n                  <Fuel className=\"w-4 h-4 mr-2\" />\r\n                  Find Fuel Stops\r\n                </Button>\r\n                \r\n                <Button variant=\"outline\" className=\"w-full\">\r\n                  <Wrench className=\"w-4 h-4 mr-2\" />\r\n                  Vehicle Inspection\r\n                </Button>\r\n                \r\n                <Separator />\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    className=\"w-full text-orange-600 border-orange-200 hover:bg-orange-50\"\r\n                    onClick={() => handleStatusUpdate('at_delivery')}\r\n                  >\r\n                    <MapPin className=\"w-4 h-4 mr-2\" />\r\n                    Arrived at Delivery\r\n                  </Button>\r\n                  \r\n                  <Button \r\n                    variant=\"outline\" \r\n                    className=\"w-full text-green-600 border-green-200 hover:bg-green-50\"\r\n                    onClick={() => handleStatusUpdate('delivered')}\r\n                  >\r\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\r\n                    Mark Delivered\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Earnings Tracker */}\r\n            <Card className=\"border-0 shadow-lg bg-gradient-to-br from-green-50 to-emerald-50\">\r\n              <CardHeader className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-t-lg\">\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Wallet className=\"w-5 h-5\" />\r\n                  <span>Earnings Tracker</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"p-4 space-y-4\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-3xl font-bold text-green-700\">${activeLoad.earnings.total.toLocaleString()}</p>\r\n                  <p className=\"text-sm text-green-600\">This Load Total</p>\r\n                </div>\r\n                \r\n                <div className=\"space-y-2 text-sm\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Base Rate:</span>\r\n                    <span className=\"font-medium\">${activeLoad.earnings.baseRate.toLocaleString()}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Fuel Surcharge:</span>\r\n                    <span className=\"font-medium\">${activeLoad.earnings.fuelSurcharge}</span>\r\n                  </div>\r\n                  {activeLoad.earnings.accessories.map((acc, idx) => (\r\n                    <div key={idx} className=\"flex justify-between\">\r\n                      <span>{acc.type}:</span>\r\n                      <span className=\"font-medium\">${acc.amount}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                \r\n                <div className=\"pt-2 border-t border-green-200\">\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Per Mile Rate:</span>\r\n                    <span className=\"font-medium\">${activeLoad.earnings.mileageRate}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between text-sm\">\r\n                    <span>Est. Miles:</span>\r\n                    <span className=\"font-medium\">{routeIntel?.totalMiles}</span>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Floating Emergency Button */}\r\n      <div className=\"fixed bottom-6 right-6 z-50\">\r\n        <Button \r\n          size=\"lg\"\r\n          className=\"w-14 h-14 rounded-full bg-red-500 hover:bg-red-600 shadow-2xl\"\r\n          onClick={handleEmergencyContact}\r\n        >\r\n          <Phone className=\"w-6 h-6 text-white\" />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActiveRoutePage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\routes\\RouteHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\routes\\RoutePlannerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\services\\FuelPricesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\services\\WeatherPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settings\\CommunicationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settings\\NavigationRoutesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settings\\NotificationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settings\\VehicleSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settlement\\BenefitsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settlement\\EarningsOverviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settlement\\PayrollReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\settlement\\TimesheetsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\tools\\RepairShopsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\tools\\TruckStopsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\vehicle\\FuelCostsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\vehicle\\MaintenanceLogPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\driver\\vehicle\\VehicleStatusPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\EDIDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\EDIMatchingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\EDISetupPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\FailedInvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\FailedTenderPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\PartnersListPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\edi\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\factoring\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\AccountingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\AuditTrailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\BalanceSheetPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\BankAccountsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\BankingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\BillsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\BudgetingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\CashFlowPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ChartOfAccountsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\CogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\CostAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\CustomerStatementsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\EmployeesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ExpenseReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ExpensesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\FinancialDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\FinancialOverviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\FinancialSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\FinancialsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\GeneralLedgerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\InvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\JournalEntriesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PaymentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PayrollEmployeesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PayrollPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PayrollTransactionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ProductsServicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ProfitLossPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PurchaseOrdersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\PurchasesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ReconciliationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\RecurringInvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\RefundsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\RunPayrollPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\SalesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\SalesPaymentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\SalesRevenuePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\TaxFormsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\TaxesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\TimesheetsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\TransactionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\TrialBalancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\VendorsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\expenses\\BillsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\sales\\PaymentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\financials\\sales\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\FreightBrokerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\carrier-network\\CarrierNetwork.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\dispatch-center\\DispatchCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\load-board\\LoadBoard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\rate-management\\RateManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\freight-broker\\shipper-network\\ShipperNetwork.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\loadboard\\LoadBoardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\loadboard\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\loads\\LoadManagementPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData]","fix":{"range":[2147,2149],"text":"[fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import UltraModernLayout from '@/components/layout/UltraModernLayout';\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { \r\n  Package, \r\n  MapPin, \r\n  Clock, \r\n  DollarSign, \r\n  TrendingUp, \r\n  Users,\r\n  Truck,\r\n  Plus,\r\n  Filter,\r\n  Search\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface Load {\r\n  id: string;\r\n  shipment_number: string;\r\n  origin: string;\r\n  destination: string;\r\n  status: string;\r\n  priority: string;\r\n  equipment_type?: string;\r\n  weight?: number;\r\n  distance_miles?: number;\r\n  pickup_date?: string;\r\n  delivery_date?: string;\r\n  rate?: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface Carrier {\r\n  id: string;\r\n  carrier_name: string;\r\n  contact_phone?: string;\r\n  equipment_types?: string[];\r\n  availability_status?: string;\r\n  performance_score?: number;\r\n  total_loads_completed?: number;\r\n}\r\n\r\ninterface Customer {\r\n  id: string;\r\n  customer_name: string;\r\n  contact_email?: string;\r\n  customer_status?: string;\r\n  customer_type?: string;\r\n}\r\n\r\nexport default function LoadManagementPage() {\r\n  const [loads, setLoads] = useState<Load[]>([]);\r\n  const [carriers, setCarriers] = useState<Carrier[]>([]);\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  const { toast } = useToast();\r\n\r\n  const [stats, setStats] = useState({\r\n    totalLoads: 0,\r\n    activeLoads: 0,\r\n    totalRevenue: 0,\r\n    availableCarriers: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch loads from shipments table\r\n      const { data: loadsData, error: loadsError } = await supabase\r\n        .from('shipments')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (loadsError) throw loadsError;\r\n\r\n      // Fetch carriers\r\n      const { data: carriersData, error: carriersError } = await supabase\r\n        .from('freight_carriers')\r\n        .select('*')\r\n        .order('carrier_name');\r\n\r\n      if (carriersError) throw carriersError;\r\n\r\n      // Fetch customers\r\n      const { data: customersData, error: customersError } = await supabase\r\n        .from('customers')\r\n        .select('*')\r\n        .order('customer_name');\r\n\r\n      if (customersError) throw customersError;\r\n\r\n      setLoads(loadsData || []);\r\n      setCarriers(carriersData || []);\r\n      setCustomers(customersData || []);\r\n\r\n      // Calculate stats\r\n      const totalRevenue = (loadsData || []).reduce((sum, load) => sum + (load.rate || 0), 0);\r\n      const activeLoads = (loadsData || []).filter(load => \r\n        ['assigned', 'picked_up', 'in_transit'].includes(load.status)\r\n      ).length;\r\n      const availableCarriers = (carriersData || []).filter(carrier => \r\n        carrier.availability_status === 'available'\r\n      ).length;\r\n\r\n      setStats({\r\n        totalLoads: loadsData?.length || 0,\r\n        activeLoads,\r\n        totalRevenue,\r\n        availableCarriers\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch load management data\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredLoads = loads.filter(load => {\r\n    const matchesSearch = load.shipment_number.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         load.origin.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         load.destination.toLowerCase().includes(searchQuery.toLowerCase());\r\n    const matchesStatus = filterStatus === 'all' || load.status === filterStatus;\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\r\n      case 'normal': return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case 'low': return 'bg-gray-100 text-gray-800 border-gray-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'assigned': return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case 'picked_up': return 'bg-purple-100 text-purple-800 border-purple-200';\r\n      case 'in_transit': return 'bg-orange-100 text-orange-800 border-orange-200';\r\n      case 'delivered': return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UltraModernLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Load Management</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              Manage loads, carriers, and customers in one place\r\n            </p>\r\n          </div>\r\n          <Button className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            New Load\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Loads</CardTitle>\r\n              <Package className=\"h-4 w-4 text-blue-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{stats.totalLoads}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                All time loads\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Loads</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-green-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{stats.activeLoads}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Currently in progress\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-green-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${stats.totalRevenue.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                All time revenue\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Available Carriers</CardTitle>\r\n              <Truck className=\"h-4 w-4 text-purple-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{stats.availableCarriers}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Ready for dispatch\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <Tabs defaultValue=\"loads\" className=\"space-y-6\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"loads\">Loads</TabsTrigger>\r\n            <TabsTrigger value=\"carriers\">Carriers</TabsTrigger>\r\n            <TabsTrigger value=\"customers\">Customers</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"loads\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Load Management</CardTitle>\r\n                <CardDescription>\r\n                  Track and manage all your loads\r\n                </CardDescription>\r\n                <div className=\"flex items-center gap-4\">\r\n                  <div className=\"relative flex-1 max-w-sm\">\r\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                    <Input\r\n                      placeholder=\"Search loads...\"\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                      className=\"pl-10\"\r\n                    />\r\n                  </div>\r\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n                    <SelectTrigger className=\"w-40\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Status</SelectItem>\r\n                      <SelectItem value=\"pending\">Pending</SelectItem>\r\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\r\n                      <SelectItem value=\"picked_up\">Picked Up</SelectItem>\r\n                      <SelectItem value=\"in_transit\">In Transit</SelectItem>\r\n                      <SelectItem value=\"delivered\">Delivered</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {filteredLoads.map((load) => (\r\n                    <div\r\n                      key={load.id}\r\n                      className=\"p-4 rounded-lg border hover:border-primary/50 transition-all\"\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-3\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <span className=\"font-semibold text-lg\">{load.shipment_number}</span>\r\n                          <Badge className={getPriorityColor(load.priority)}>\r\n                            {load.priority}\r\n                          </Badge>\r\n                          <Badge className={getStatusColor(load.status)}>\r\n                            {load.status}\r\n                          </Badge>\r\n                        </div>\r\n                        {load.rate && (\r\n                          <div className=\"flex items-center gap-1 text-green-600 font-semibold\">\r\n                            <DollarSign className=\"h-4 w-4\" />\r\n                            {load.rate.toLocaleString()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n                          <span>{load.origin} ‚Üí {load.destination}</span>\r\n                        </div>\r\n                        {load.weight && (\r\n                          <div>\r\n                            <span className=\"text-muted-foreground\">Weight: </span>\r\n                            {load.weight.toLocaleString()} lbs\r\n                          </div>\r\n                        )}\r\n                        {load.distance_miles && (\r\n                          <div>\r\n                            <span className=\"text-muted-foreground\">Distance: </span>\r\n                            {load.distance_miles} miles\r\n                          </div>\r\n                        )}\r\n                        {load.pickup_date && (\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n                            <span>Pickup: {new Date(load.pickup_date).toLocaleDateString()}</span>\r\n                          </div>\r\n                        )}\r\n                        {load.delivery_date && (\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n                            <span>Delivery: {new Date(load.delivery_date).toLocaleDateString()}</span>\r\n                          </div>\r\n                        )}\r\n                        {load.equipment_type && (\r\n                          <div>\r\n                            <span className=\"text-muted-foreground\">Equipment: </span>\r\n                            {load.equipment_type}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  {filteredLoads.length === 0 && (\r\n                    <div className=\"text-center py-8 text-muted-foreground\">\r\n                      No loads found matching your criteria\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"carriers\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Carrier Management</CardTitle>\r\n                <CardDescription>\r\n                  Manage your carrier network\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {carriers.map((carrier) => (\r\n                    <div\r\n                      key={carrier.id}\r\n                      className=\"p-4 rounded-lg border hover:border-primary/50 transition-all\"\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <span className=\"font-semibold\">{carrier.carrier_name}</span>\r\n                        <Badge \r\n                          variant=\"outline\" \r\n                          className={\r\n                            carrier.availability_status === 'available' \r\n                              ? \"bg-green-50 text-green-700 border-green-200\" \r\n                              : \"bg-red-50 text-red-700 border-red-200\"\r\n                          }\r\n                        >\r\n                          {carrier.availability_status || 'unknown'}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\r\n                        {carrier.contact_phone && (\r\n                          <div>Phone: {carrier.contact_phone}</div>\r\n                        )}\r\n                        {carrier.equipment_types && (\r\n                          <div>Equipment: {carrier.equipment_types.join(', ')}</div>\r\n                        )}\r\n                        {carrier.performance_score && (\r\n                          <div>Score: {carrier.performance_score}/100</div>\r\n                        )}\r\n                        {carrier.total_loads_completed && (\r\n                          <div>Completed Loads: {carrier.total_loads_completed}</div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  {carriers.length === 0 && (\r\n                    <div className=\"text-center py-8 text-muted-foreground\">\r\n                      No carriers found\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"customers\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Customer Management</CardTitle>\r\n                <CardDescription>\r\n                  Manage your customer relationships\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {customers.map((customer) => (\r\n                    <div\r\n                      key={customer.id}\r\n                      className=\"p-4 rounded-lg border hover:border-primary/50 transition-all\"\r\n                    >\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <span className=\"font-semibold\">{customer.customer_name}</span>\r\n                        <Badge variant=\"outline\">\r\n                          {customer.customer_type || 'Standard'}\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\r\n                        {customer.contact_email && (\r\n                          <div>Email: {customer.contact_email}</div>\r\n                        )}\r\n                        {customer.customer_status && (\r\n                          <div>Status: {customer.customer_status}</div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  {customers.length === 0 && (\r\n                    <div className=\"text-center py-8 text-muted-foreground\">\r\n                      No customers found\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </UltraModernLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\login\\Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\marketplace\\LoadBoardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6021,6024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6021,6024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6616,6619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6616,6619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6764,6767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6764,6767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { \r\n  Search, \r\n  Filter, \r\n  MapPin, \r\n  Clock, \r\n  DollarSign, \r\n  Truck,\r\n  Package,\r\n  Star,\r\n  Heart,\r\n  RefreshCw,\r\n  ArrowUpDown,\r\n  Calendar,\r\n  Weight,\r\n  Ruler,\r\n  Thermometer,\r\n  Shield,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Eye,\r\n  MessageSquare,\r\n  Phone\r\n} from 'lucide-react';\r\nimport Layout from '@/components/layout/Layout';\r\nimport { toast } from 'sonner';\r\n\r\nconst LoadBoardPage = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedEquipment, setSelectedEquipment] = useState('all');\r\n  const [selectedDistance, setSelectedDistance] = useState('all');\r\n  const [sortBy, setSortBy] = useState('rate');\r\n  const [showFavorites, setShowFavorites] = useState(false);\r\n  const [selectedLoad, setSelectedLoad] = useState<unknown>(null);\r\n  const [bidAmount, setBidAmount] = useState('');\r\n  const [bidComments, setBidComments] = useState('');\r\n\r\n  // Sample load data\r\n  const loads = [\r\n    {\r\n      id: 'LD001',\r\n      origin: { city: 'Los Angeles', state: 'CA', zip: '90210' },\r\n      destination: { city: 'Dallas', state: 'TX', zip: '75201' },\r\n      distance: 1435,\r\n      rate: 4250,\r\n      ratePerMile: 2.96,\r\n      equipment: 'Van',\r\n      weight: 42000,\r\n      length: 48,\r\n      pickupDate: '2024-01-15',\r\n      deliveryDate: '2024-01-17',\r\n      commodity: 'Electronics',\r\n      broker: 'FreightMax LLC',\r\n      brokerRating: 4.8,\r\n      loadType: 'Full Truckload',\r\n      specialRequirements: ['Temperature Controlled', 'Expedited'],\r\n      isFavorite: false,\r\n      status: 'Available',\r\n      timePosted: '2 hours ago',\r\n      bidsCount: 8,\r\n      isHot: true,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      id: 'LD002',\r\n      origin: { city: 'Chicago', state: 'IL', zip: '60601' },\r\n      destination: { city: 'Atlanta', state: 'GA', zip: '30301' },\r\n      distance: 715,\r\n      rate: 2150,\r\n      ratePerMile: 3.01,\r\n      equipment: 'Flatbed',\r\n      weight: 38500,\r\n      length: 53,\r\n      pickupDate: '2024-01-16',\r\n      deliveryDate: '2024-01-18',\r\n      commodity: 'Steel Coils',\r\n      broker: 'Logistics Pro',\r\n      brokerRating: 4.6,\r\n      loadType: 'Full Truckload',\r\n      specialRequirements: ['Tarps Required', 'Chains Required'],\r\n      isFavorite: true,\r\n      status: 'Available',\r\n      timePosted: '4 hours ago',\r\n      bidsCount: 12,\r\n      isHot: true,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      id: 'LD003',\r\n      origin: { city: 'Miami', state: 'FL', zip: '33101' },\r\n      destination: { city: 'New York', state: 'NY', zip: '10001' },\r\n      distance: 1280,\r\n      rate: 3200,\r\n      ratePerMile: 2.50,\r\n      equipment: 'Reefer',\r\n      weight: 40000,\r\n      length: 53,\r\n      pickupDate: '2024-01-17',\r\n      deliveryDate: '2024-01-19',\r\n      commodity: 'Frozen Foods',\r\n      broker: 'Cold Chain Solutions',\r\n      brokerRating: 4.9,\r\n      loadType: 'Full Truckload',\r\n      specialRequirements: ['Temperature: -10¬∞F', 'Food Grade'],\r\n      isFavorite: false,\r\n      status: 'Available',\r\n      timePosted: '1 hour ago',\r\n      bidsCount: 5,\r\n      isHot: false,\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: 'LD004',\r\n      origin: { city: 'Seattle', state: 'WA', zip: '98101' },\r\n      destination: { city: 'Phoenix', state: 'AZ', zip: '85001' },\r\n      distance: 1420,\r\n      rate: 3450,\r\n      ratePerMile: 2.43,\r\n      equipment: 'Van',\r\n      weight: 35000,\r\n      length: 53,\r\n      pickupDate: '2024-01-18',\r\n      deliveryDate: '2024-01-20',\r\n      commodity: 'Consumer Goods',\r\n      broker: 'Swift Logistics',\r\n      brokerRating: 4.4,\r\n      loadType: 'Full Truckload',\r\n      specialRequirements: ['Team Driver Preferred'],\r\n      isFavorite: false,\r\n      status: 'Available',\r\n      timePosted: '30 min ago',\r\n      bidsCount: 3,\r\n      isHot: false,\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      id: 'LD005',\r\n      origin: { city: 'Houston', state: 'TX', zip: '77001' },\r\n      destination: { city: 'Denver', state: 'CO', zip: '80201' },\r\n      distance: 1020,\r\n      rate: 2750,\r\n      ratePerMile: 2.70,\r\n      equipment: 'Step Deck',\r\n      weight: 45000,\r\n      length: 48,\r\n      pickupDate: '2024-01-19',\r\n      deliveryDate: '2024-01-21',\r\n      commodity: 'Machinery',\r\n      broker: 'Heavy Haul Express',\r\n      brokerRating: 4.7,\r\n      loadType: 'Full Truckload',\r\n      specialRequirements: ['Oversize Permit', 'Escort Required'],\r\n      isFavorite: true,\r\n      status: 'Available',\r\n      timePosted: '6 hours ago',\r\n      bidsCount: 15,\r\n      isHot: true,\r\n      priority: 'high'\r\n    }\r\n  ];\r\n\r\n  const filteredLoads = loads.filter(load => {\r\n    const matchesSearch = searchQuery === '' || \r\n      load.origin.city.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      load.destination.city.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      load.commodity.toLowerCase().includes(searchQuery.toLowerCase());\r\n    \r\n    const matchesEquipment = selectedEquipment === 'all' || load.equipment === selectedEquipment;\r\n    const matchesFavorites = !showFavorites || load.isFavorite;\r\n    \r\n    return matchesSearch && matchesEquipment && matchesFavorites;\r\n  });\r\n\r\n  const handleBid = (load: any) => {\r\n    setSelectedLoad(load);\r\n    setBidAmount(load.rate?.toString() || '0');\r\n    setBidComments('');\r\n  };\r\n\r\n  const submitBid = () => {\r\n    if (!bidAmount || parseFloat(bidAmount) <= 0) {\r\n      toast.error('Please enter a valid bid amount');\r\n      return;\r\n    }\r\n\r\n    toast.success(`Bid submitted for load ${selectedLoad?.id || 'unknown'} - $${bidAmount}`);\r\n    setSelectedLoad(null);\r\n    setBidAmount('');\r\n    setBidComments('');\r\n  };\r\n\r\n  const toggleFavorite = (loadId: string) => {\r\n    toast.success('Load added to favorites');\r\n  };\r\n\r\n  const contactBroker = (load: any) => {\r\n    toast.success(`Contacting ${load.broker || 'broker'} about load ${load.id || 'unknown'}`);\r\n  };\r\n\r\n  const viewLoadDetails = (load: any) => {\r\n    toast.info(`Viewing details for load ${load.id || 'unknown'}`);\r\n  };\r\n\r\n  const getEquipmentIcon = (equipment: string) => {\r\n    switch (equipment) {\r\n      case 'Van': return 'üöê';\r\n      case 'Flatbed': return 'üöõ';\r\n      case 'Reefer': return 'üßä';\r\n      case 'Step Deck': return 'üöú';\r\n      default: return 'üöö';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'text-red-600 bg-red-50';\r\n      case 'medium': return 'text-orange-600 bg-orange-50';\r\n      case 'low': return 'text-green-600 bg-green-50';\r\n      default: return 'text-gray-600 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"space-y-6 p-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Load Board</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              Find and bid on available freight loads\r\n            </p>\r\n          </div>\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Button variant=\"outline\" onClick={() => window.location.reload()}>\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              Refresh\r\n            </Button>\r\n            <Button>\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Advanced Filters\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"grid gap-4 md:grid-cols-5\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Search by city or commodity...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              \r\n              <Select value={selectedEquipment} onValueChange={setSelectedEquipment}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Equipment Type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Equipment</SelectItem>\r\n                  <SelectItem value=\"Van\">Van</SelectItem>\r\n                  <SelectItem value=\"Flatbed\">Flatbed</SelectItem>\r\n                  <SelectItem value=\"Reefer\">Reefer</SelectItem>\r\n                  <SelectItem value=\"Step Deck\">Step Deck</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <Select value={selectedDistance} onValueChange={setSelectedDistance}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Distance\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Distances</SelectItem>\r\n                  <SelectItem value=\"short\">0-500 miles</SelectItem>\r\n                  <SelectItem value=\"medium\">500-1000 miles</SelectItem>\r\n                  <SelectItem value=\"long\">1000+ miles</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <Select value={sortBy} onValueChange={setSortBy}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Sort By\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"rate\">Highest Rate</SelectItem>\r\n                  <SelectItem value=\"distance\">Shortest Distance</SelectItem>\r\n                  <SelectItem value=\"pickup\">Pickup Date</SelectItem>\r\n                  <SelectItem value=\"posted\">Recently Posted</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox \r\n                  id=\"favorites\" \r\n                  checked={showFavorites}\r\n                  onCheckedChange={(checked) => setShowFavorites(checked === true)}\r\n                />\r\n                <Label htmlFor=\"favorites\" className=\"text-sm\">Favorites Only</Label>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Tabs */}\r\n        <Tabs defaultValue=\"all\" className=\"space-y-4\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"all\">All Loads ({filteredLoads.length})</TabsTrigger>\r\n            <TabsTrigger value=\"hot\">Hot Loads ({filteredLoads.filter(l => l.isHot).length})</TabsTrigger>\r\n            <TabsTrigger value=\"recent\">Recent Bids</TabsTrigger>\r\n            <TabsTrigger value=\"favorites\">Favorites ({filteredLoads.filter(l => l.isFavorite).length})</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"all\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Available Loads</CardTitle>\r\n                <CardDescription>\r\n                  {filteredLoads.length} loads matching your criteria\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Lane</TableHead>\r\n                      <TableHead>Equipment</TableHead>\r\n                      <TableHead>Weight/Length</TableHead>\r\n                      <TableHead>Pickup/Delivery</TableHead>\r\n                      <TableHead>Rate</TableHead>\r\n                      <TableHead>Broker</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredLoads.map((load) => (\r\n                      <TableRow key={load.id} className=\"hover:bg-gray-50\">\r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <span className=\"font-medium\">{load.origin.city}, {load.origin.state}</span>\r\n                              {load.isHot && <Badge variant=\"destructive\" className=\"text-xs\">HOT</Badge>}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-500 flex items-center\">\r\n                              ‚Üì {load.destination.city}, {load.destination.state}\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-400\">{load.distance} miles</div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"text-lg\">{getEquipmentIcon(load.equipment)}</span>\r\n                            <div>\r\n                              <div className=\"font-medium\">{load.equipment}</div>\r\n                              <div className=\"text-xs text-gray-500\">{load.commodity}</div>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              <Weight className=\"h-3 w-3 text-gray-400\" />\r\n                              <span className=\"text-sm\">{load.weight.toLocaleString()} lbs</span>\r\n                            </div>\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              <Ruler className=\"h-3 w-3 text-gray-400\" />\r\n                              <span className=\"text-sm\">{load.length}ft</span>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              <Calendar className=\"h-3 w-3 text-gray-400\" />\r\n                              <span className=\"text-sm\">Pick: {load.pickupDate}</span>\r\n                            </div>\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              <Calendar className=\"h-3 w-3 text-gray-400\" />\r\n                              <span className=\"text-sm\">Del: {load.deliveryDate}</span>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <div className=\"font-semibold text-green-600 text-lg\">\r\n                              ${load.rate.toLocaleString()}\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-500\">\r\n                              ${load.ratePerMile.toFixed(2)}/mile\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <div className=\"font-medium\">{load.broker}</div>\r\n                            <div className=\"flex items-center space-x-1\">\r\n                              <Star className=\"h-3 w-3 text-yellow-500 fill-current\" />\r\n                              <span className=\"text-sm\">{load.brokerRating}</span>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"space-y-1\">\r\n                            <Badge className={getPriorityColor(load.priority)}>\r\n                              {load.status}\r\n                            </Badge>\r\n                            <div className=\"text-xs text-gray-500\">\r\n                              {load.bidsCount} bids\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-400\">\r\n                              {load.timePosted}\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        \r\n                        <TableCell>\r\n                          <div className=\"flex flex-col space-y-2\">\r\n                            <Button \r\n                              size=\"sm\" \r\n                              onClick={() => handleBid(load)}\r\n                              className=\"w-full\"\r\n                            >\r\n                              Bid Now\r\n                            </Button>\r\n                            <div className=\"flex space-x-1\">\r\n                              <Button \r\n                                size=\"sm\" \r\n                                variant=\"outline\"\r\n                                onClick={() => viewLoadDetails(load)}\r\n                              >\r\n                                <Eye className=\"h-3 w-3\" />\r\n                              </Button>\r\n                              <Button \r\n                                size=\"sm\" \r\n                                variant=\"outline\"\r\n                                onClick={() => contactBroker(load)}\r\n                              >\r\n                                <Phone className=\"h-3 w-3\" />\r\n                              </Button>\r\n                              <Button \r\n                                size=\"sm\" \r\n                                variant=\"outline\"\r\n                                onClick={() => toggleFavorite(load.id)}\r\n                              >\r\n                                <Heart className={`h-3 w-3 ${load.isFavorite ? 'fill-current text-red-500' : ''}`} />\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"hot\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Hot Loads</CardTitle>\r\n                <CardDescription>\r\n                  High-priority loads with competitive rates\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n                  {filteredLoads.filter(load => load.isHot).map((load) => (\r\n                    <Card key={load.id} className=\"border-red-200 bg-red-50\">\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <Badge variant=\"destructive\">HOT LOAD</Badge>\r\n                          <Badge className={getPriorityColor(load.priority)}>\r\n                            {load.priority}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <div className=\"font-semibold\">\r\n                            {load.origin.city}, {load.origin.state} ‚Üí {load.destination.city}, {load.destination.state}\r\n                          </div>\r\n                          <div className=\"text-2xl font-bold text-green-600\">\r\n                            ${load.rate.toLocaleString()}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-600\">\r\n                            {load.distance} miles ‚Ä¢ ${load.ratePerMile.toFixed(2)}/mile\r\n                          </div>\r\n                          <div className=\"text-sm\">\r\n                            {load.equipment} ‚Ä¢ {load.commodity}\r\n                          </div>\r\n                          <Button \r\n                            className=\"w-full\" \r\n                            onClick={() => handleBid(load)}\r\n                          >\r\n                            Bid Now - {load.bidsCount} bids\r\n                          </Button>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"recent\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Recent Bids</CardTitle>\r\n                <CardDescription>\r\n                  Your recent bidding activity\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-center py-8\">\r\n                  <Package className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                  <h3 className=\"text-lg font-medium mb-2\">No recent bids</h3>\r\n                  <p className=\"text-gray-500\">Start bidding on loads to see your activity here</p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"favorites\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Favorite Loads</CardTitle>\r\n                <CardDescription>\r\n                  Loads you've marked as favorites\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {filteredLoads.filter(load => load.isFavorite).length > 0 ? (\r\n                  <Table>\r\n                    <TableHeader>\r\n                      <TableRow>\r\n                        <TableHead>Lane</TableHead>\r\n                        <TableHead>Equipment</TableHead>\r\n                        <TableHead>Rate</TableHead>\r\n                        <TableHead>Pickup Date</TableHead>\r\n                        <TableHead>Actions</TableHead>\r\n                      </TableRow>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                      {filteredLoads.filter(load => load.isFavorite).map((load) => (\r\n                        <TableRow key={load.id}>\r\n                          <TableCell>\r\n                            {load.origin.city}, {load.origin.state} ‚Üí {load.destination.city}, {load.destination.state}\r\n                          </TableCell>\r\n                          <TableCell>{load.equipment}</TableCell>\r\n                          <TableCell className=\"font-semibold text-green-600\">\r\n                            ${load.rate.toLocaleString()}\r\n                          </TableCell>\r\n                          <TableCell>{load.pickupDate}</TableCell>\r\n                          <TableCell>\r\n                            <Button size=\"sm\" onClick={() => handleBid(load)}>\r\n                              Bid Now\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                ) : (\r\n                  <div className=\"text-center py-8\">\r\n                    <Heart className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                    <h3 className=\"text-lg font-medium mb-2\">No favorite loads</h3>\r\n                    <p className=\"text-gray-500\">Click the heart icon on loads to add them to favorites</p>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Bid Dialog */}\r\n        <Dialog open={!!selectedLoad} onOpenChange={() => setSelectedLoad(null)}>\r\n          <DialogContent className=\"sm:max-w-[500px]\">\r\n            <DialogHeader>\r\n              <DialogTitle>Submit Bid - Load {selectedLoad?.id}</DialogTitle>\r\n              <DialogDescription>\r\n                {selectedLoad && (\r\n                  <>\r\n                    {selectedLoad.origin?.city || 'Unknown'}, {selectedLoad.origin?.state || 'Unknown'} ‚Üí {selectedLoad.destination?.city || 'Unknown'}, {selectedLoad.destination?.state || 'Unknown'}\r\n                  </>\r\n                )}\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            \r\n            {selectedLoad && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                  <div>\r\n                    <Label className=\"text-gray-500\">Equipment</Label>\r\n                    <p>{selectedLoad.equipment || 'Unknown'}</p>\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-gray-500\">Distance</Label>\r\n                    <p>{selectedLoad.distance || 0} miles</p>\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-gray-500\">Weight</Label>\r\n                    <p>{(selectedLoad.weight || 0).toLocaleString()} lbs</p>\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-gray-500\">Current Bids</Label>\r\n                    <p>{selectedLoad.bidsCount || 0} bids</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"bidAmount\">Bid Amount ($)</Label>\r\n                  <Input\r\n                    id=\"bidAmount\"\r\n                    type=\"number\"\r\n                    value={bidAmount}\r\n                    onChange={(e) => setBidAmount(e.target.value)}\r\n                    placeholder=\"Enter your bid amount\"\r\n                  />\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Suggested rate: ${(selectedLoad.rate || 0).toLocaleString()} (${((selectedLoad.ratePerMile || 0) as number).toFixed(2)}/mile)\r\n                  </p>\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"bidComments\">Comments (Optional)</Label>\r\n                  <Textarea\r\n                    id=\"bidComments\"\r\n                    value={bidComments}\r\n                    onChange={(e) => setBidComments(e.target.value)}\r\n                    placeholder=\"Add unknown additional information...\"\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => setSelectedLoad(null)}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={submitBid}>\r\n                Submit Bid\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default LoadBoardPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\marketplace\\MarketplaceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\marketplace\\TruckloadPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\marketplace\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\networks\\NetworksPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\onboarding\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\OwnerOperatorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\OwnerOperatorSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\BusinessIntelligencePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\CustomerAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\MarketTrendsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\PerformanceMetricsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\ProfitabilityAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\analytics\\RouteEfficiencyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\business-metrics\\BusinessMetricsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\carrier-agreements\\ActiveContractsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\carrier-agreements\\AgreementHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\carrier-agreements\\PendingReviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\carrier-agreements\\TermsConditionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\comm\\BrokerRelationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\comm\\CustomerCommunicationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\comm\\EmailCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\comm\\SupportCenterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\comm\\VendorCommunicationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\communication\\BrokerRelationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\communication\\CustomerContactPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\communication\\DispatchChatPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'currentMessages' logical expression could make the dependencies of useEffect Hook (at line 210) change on every render. To fix this, wrap the initialization of 'currentMessages' in its own useMemo() Hook.","line":205,"column":9,"nodeType":"VariableDeclarator","endLine":205,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  Send,\r\n  Phone,\r\n  Video,\r\n  Paperclip,\r\n  MoreHorizontal,\r\n  Clock,\r\n  CheckCheck,\r\n  AlertCircle,\r\n  MapPin,\r\n  Truck,\r\n  User,\r\n  Users,\r\n  Search,\r\n  MessageCircle,\r\n  Star,\r\n  Archive,\r\n  Settings\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface Message {\r\n  id: string;\r\n  senderId: string;\r\n  senderName: string;\r\n  senderRole: 'dispatcher' | 'driver' | 'manager';\r\n  content: string;\r\n  timestamp: Date;\r\n  status: 'sent' | 'delivered' | 'read';\r\n  type: 'text' | 'location' | 'image' | 'document';\r\n  urgent?: boolean;\r\n  metadata?: unknown;\r\n}\r\n\r\ninterface ChatContact {\r\n  id: string;\r\n  name: string;\r\n  role: 'dispatcher' | 'manager' | 'coordinator';\r\n  avatar?: string;\r\n  status: 'online' | 'offline' | 'busy';\r\n  lastMessage: string;\r\n  lastMessageTime: Date;\r\n  unreadCount: number;\r\n  department: string;\r\n}\r\n\r\nconst DispatchChatPage: React.FC = () => {\r\n  const { toast } = useToast();\r\n  const [selectedChat, setSelectedChat] = useState<string>('chat-001');\r\n  const [messageInput, setMessageInput] = useState('');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const contacts: ChatContact[] = [\r\n    {\r\n      id: 'chat-001',\r\n      name: 'Sarah Mitchell',\r\n      role: 'dispatcher',\r\n      status: 'online',\r\n      lastMessage: 'Your next pickup is at 2:30 PM',\r\n      lastMessageTime: new Date(2024, 0, 19, 14, 15),\r\n      unreadCount: 2,\r\n      department: 'Operations'\r\n    },\r\n    {\r\n      id: 'chat-002',\r\n      name: 'Mike Rodriguez',\r\n      role: 'manager',\r\n      status: 'online',\r\n      lastMessage: 'Great work on the delivery times this week!',\r\n      lastMessageTime: new Date(2024, 0, 19, 13, 45),\r\n      unreadCount: 0,\r\n      department: 'Fleet Management'\r\n    },\r\n    {\r\n      id: 'chat-003',\r\n      name: 'Jennifer Carter',\r\n      role: 'coordinator',\r\n      status: 'busy',\r\n      lastMessage: 'Route optimization complete',\r\n      lastMessageTime: new Date(2024, 0, 19, 12, 30),\r\n      unreadCount: 1,\r\n      department: 'Logistics'\r\n    },\r\n    {\r\n      id: 'chat-004',\r\n      name: 'David Thompson',\r\n      role: 'dispatcher',\r\n      status: 'offline',\r\n      lastMessage: 'Check your fuel card balance',\r\n      lastMessageTime: new Date(2024, 0, 19, 11, 20),\r\n      unreadCount: 0,\r\n      department: 'Operations'\r\n    }\r\n  ];\r\n\r\n  const messages: Record<string, Message[]> = {\r\n    'chat-001': [\r\n      {\r\n        id: 'msg-001',\r\n        senderId: 'sarah-001',\r\n        senderName: 'Sarah Mitchell',\r\n        senderRole: 'dispatcher',\r\n        content: 'Good morning! I have your route assignments for today.',\r\n        timestamp: new Date(2024, 0, 19, 8, 30),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-002',\r\n        senderId: 'driver-001',\r\n        senderName: 'You',\r\n        senderRole: 'driver',\r\n        content: 'Morning Sarah! Ready to get started. What\\'s the first pickup?',\r\n        timestamp: new Date(2024, 0, 19, 8, 32),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-003',\r\n        senderId: 'sarah-001',\r\n        senderName: 'Sarah Mitchell',\r\n        senderRole: 'dispatcher',\r\n        content: 'First pickup is at ABC Manufacturing, 1234 Industrial Blvd. Pickup time: 10:00 AM. Load #TMS-2024-0119-001',\r\n        timestamp: new Date(2024, 0, 19, 8, 35),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-004',\r\n        senderId: 'driver-001',\r\n        senderName: 'You',\r\n        senderRole: 'driver',\r\n        content: 'Got it! ETA 9:45 AM. Traffic looks good on I-95.',\r\n        timestamp: new Date(2024, 0, 19, 8, 40),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-005',\r\n        senderId: 'sarah-001',\r\n        senderName: 'Sarah Mitchell',\r\n        senderRole: 'dispatcher',\r\n        content: 'Perfect! Your next pickup is at 2:30 PM at Metro Logistics. I\\'ll send the details after you complete the first delivery.',\r\n        timestamp: new Date(2024, 0, 19, 14, 15),\r\n        status: 'delivered',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-006',\r\n        senderId: 'sarah-001',\r\n        senderName: 'Sarah Mitchell',\r\n        senderRole: 'dispatcher',\r\n        content: 'Also, there\\'s a weather advisory for your route this afternoon. Please drive safely!',\r\n        timestamp: new Date(2024, 0, 19, 14, 16),\r\n        status: 'sent',\r\n        type: 'text',\r\n        urgent: true\r\n      }\r\n    ],\r\n    'chat-002': [\r\n      {\r\n        id: 'msg-101',\r\n        senderId: 'mike-001',\r\n        senderName: 'Mike Rodriguez',\r\n        senderRole: 'manager',\r\n        content: 'Hey! I wanted to congratulate you on your excellent performance metrics this quarter.',\r\n        timestamp: new Date(2024, 0, 19, 13, 30),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-102',\r\n        senderId: 'driver-001',\r\n        senderName: 'You',\r\n        senderRole: 'driver',\r\n        content: 'Thank you Mike! I\\'ve been really focused on efficiency and safety.',\r\n        timestamp: new Date(2024, 0, 19, 13, 35),\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-103',\r\n        senderId: 'mike-001',\r\n        senderName: 'Mike Rodriguez',\r\n        senderRole: 'manager',\r\n        content: 'It shows! Your delivery times are consistently ahead of schedule and you have zero safety incidents. Great work on the delivery times this week!',\r\n        timestamp: new Date(2024, 0, 19, 13, 45),\r\n        status: 'delivered',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  };\r\n\r\n  const currentMessages = messages[selectedChat] || [];\r\n  const currentContact = contacts.find(c => c.id === selectedChat);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [currentMessages]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (!messageInput.trim()) return;\r\n\r\n    const newMessage: Message = {\r\n      id: `msg-${Date.now()}`,\r\n      senderId: 'driver-001',\r\n      senderName: 'You',\r\n      senderRole: 'driver',\r\n      content: messageInput,\r\n      timestamp: new Date(),\r\n      status: 'sent',\r\n      type: 'text'\r\n    };\r\n\r\n    // Mock adding message\r\n    toast({\r\n      title: \"Message Sent\",\r\n      description: \"Your message has been delivered to dispatch.\",\r\n    });\r\n\r\n    setMessageInput('');\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleQuickResponse = (response: string) => {\r\n    setMessageInput(response);\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'sent':\r\n        return <CheckCheck className=\"h-3 w-3 text-muted-foreground\" />;\r\n      case 'delivered':\r\n        return <CheckCheck className=\"h-3 w-3 text-blue-500\" />;\r\n      case 'read':\r\n        return <CheckCheck className=\"h-3 w-3 text-blue-500 fill-current\" />;\r\n      default:\r\n        return <Clock className=\"h-3 w-3 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n    contact.department.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  const quickResponses = [\r\n    \"On my way\",\r\n    \"Pickup completed\",\r\n    \"Delivery completed\", \r\n    \"Running 15 minutes late\",\r\n    \"Need assistance\",\r\n    \"Thank you!\"\r\n  ];\r\n\r\n  return (\r\n    <div className=\"h-[calc(100vh-8rem)] flex gap-6 p-6 max-w-7xl mx-auto\">\r\n      {/* Chat Sidebar */}\r\n      <Card className=\"w-80 flex flex-col\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-lg font-semibold\">Dispatch Chat</CardTitle>\r\n            <Button variant=\"ghost\" size=\"icon\">\r\n              <Settings className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder=\"Search conversations...\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              className=\"pl-9\"\r\n            />\r\n          </div>\r\n        </CardHeader>\r\n        \r\n        <ScrollArea className=\"flex-1 px-4\">\r\n          <div className=\"space-y-2\">\r\n            {filteredContacts.map((contact) => (\r\n              <div\r\n                key={contact.id}\r\n                onClick={() => setSelectedChat(contact.id)}\r\n                className={cn(\r\n                  \"flex items-center gap-3 p-3 rounded-lg cursor-pointer transition-colors hover:bg-accent\",\r\n                  selectedChat === contact.id && \"bg-primary/10 border border-primary/20\"\r\n                )}\r\n              >\r\n                <div className=\"relative\">\r\n                  <Avatar className=\"h-10 w-10\">\r\n                    <AvatarImage src={contact.avatar} />\r\n                    <AvatarFallback>{contact.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\r\n                  </Avatar>\r\n                  <div className={cn(\r\n                    \"absolute -bottom-1 -right-1 h-3 w-3 rounded-full border-2 border-background\",\r\n                    contact.status === 'online' && \"bg-green-500\",\r\n                    contact.status === 'busy' && \"bg-yellow-500\",\r\n                    contact.status === 'offline' && \"bg-gray-400\"\r\n                  )} />\r\n                </div>\r\n                \r\n                <div className=\"flex-1 min-w-0\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <h3 className=\"font-medium text-sm truncate\">{contact.name}</h3>\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                      {contact.lastMessageTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant=\"secondary\" className=\"text-xs px-1 py-0\">\r\n                      {contact.role}\r\n                    </Badge>\r\n                    {contact.unreadCount > 0 && (\r\n                      <Badge variant=\"destructive\" className=\"text-xs h-4 w-4 p-0 flex items-center justify-center\">\r\n                        {contact.unreadCount}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  <p className=\"text-xs text-muted-foreground truncate\">{contact.lastMessage}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      </Card>\r\n\r\n      {/* Chat Area */}\r\n      <div className=\"flex-1 flex flex-col\">\r\n        {currentContact ? (\r\n          <>\r\n            {/* Chat Header */}\r\n            <Card className=\"mb-4\">\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"relative\">\r\n                      <Avatar className=\"h-12 w-12\">\r\n                        <AvatarImage src={currentContact.avatar} />\r\n                        <AvatarFallback>{currentContact.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\r\n                      </Avatar>\r\n                      <div className={cn(\r\n                        \"absolute -bottom-1 -right-1 h-4 w-4 rounded-full border-2 border-background\",\r\n                        currentContact.status === 'online' && \"bg-green-500\",\r\n                        currentContact.status === 'busy' && \"bg-yellow-500\",\r\n                        currentContact.status === 'offline' && \"bg-gray-400\"\r\n                      )} />\r\n                    </div>\r\n                    <div>\r\n                      <h2 className=\"font-semibold text-lg\">{currentContact.name}</h2>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {currentContact.role}\r\n                        </Badge>\r\n                        <span className=\"text-sm text-muted-foreground\">{currentContact.department}</span>\r\n                        <span className={cn(\r\n                          \"text-xs font-medium\",\r\n                          currentContact.status === 'online' && \"text-green-600\",\r\n                          currentContact.status === 'busy' && \"text-yellow-600\",\r\n                          currentContact.status === 'offline' && \"text-gray-500\"\r\n                        )}>\r\n                          {currentContact.status}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button variant=\"outline\" size=\"icon\">\r\n                      <Phone className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"outline\" size=\"icon\">\r\n                      <Video className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"outline\" size=\"icon\">\r\n                      <MoreHorizontal className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Messages Area */}\r\n            <Card className=\"flex-1 flex flex-col\">\r\n              <ScrollArea className=\"flex-1 p-4\">\r\n                <div className=\"space-y-4\">\r\n                  {currentMessages.map((message) => (\r\n                    <div\r\n                      key={message.id}\r\n                      className={cn(\r\n                        \"flex gap-3 max-w-[80%]\",\r\n                        message.senderId === 'driver-001' ? \"ml-auto flex-row-reverse\" : \"\"\r\n                      )}\r\n                    >\r\n                      <Avatar className=\"h-8 w-8 flex-shrink-0\">\r\n                        <AvatarFallback className=\"text-xs\">\r\n                          {message.senderId === 'driver-001' ? 'You' : message.senderName.split(' ').map(n => n[0]).join('')}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      \r\n                      <div className={cn(\r\n                        \"flex flex-col gap-1\",\r\n                        message.senderId === 'driver-001' ? \"items-end\" : \"items-start\"\r\n                      )}>\r\n                        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\r\n                          <span>{message.senderId === 'driver-001' ? 'You' : message.senderName}</span>\r\n                          <span>{message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\r\n                        </div>\r\n                        \r\n                        <div className={cn(\r\n                          \"rounded-lg px-3 py-2 max-w-md\",\r\n                          message.senderId === 'driver-001'\r\n                            ? \"bg-primary text-primary-foreground\"\r\n                            : \"bg-muted\",\r\n                          message.urgent && \"border-2 border-orange-500\"\r\n                        )}>\r\n                          {message.urgent && (\r\n                            <div className=\"flex items-center gap-1 mb-1\">\r\n                              <AlertCircle className=\"h-3 w-3 text-orange-500\" />\r\n                              <span className=\"text-xs font-medium text-orange-500\">URGENT</span>\r\n                            </div>\r\n                          )}\r\n                          <p className=\"text-sm\">{message.content}</p>\r\n                        </div>\r\n                        \r\n                        {message.senderId === 'driver-001' && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            {getStatusIcon(message.status)}\r\n                            <span className=\"text-xs text-muted-foreground capitalize\">{message.status}</span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  <div ref={messagesEndRef} />\r\n                </div>\r\n              </ScrollArea>\r\n\r\n              {/* Quick Responses */}\r\n              <div className=\"p-3 border-t\">\r\n                <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                  {quickResponses.map((response) => (\r\n                    <Button\r\n                      key={response}\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleQuickResponse(response)}\r\n                      className=\"text-xs\"\r\n                    >\r\n                      {response}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Message Input */}\r\n              <div className=\"p-4 border-t\">\r\n                <div className=\"flex gap-2\">\r\n                  <Button variant=\"outline\" size=\"icon\">\r\n                    <Paperclip className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  <div className=\"flex-1 relative\">\r\n                    <Textarea\r\n                      placeholder=\"Type your message...\"\r\n                      value={messageInput}\r\n                      onChange={(e) => setMessageInput(e.target.value)}\r\n                      onKeyPress={handleKeyPress}\r\n                      className=\"min-h-[40px] max-h-32 resize-none pr-12\"\r\n                    />\r\n                    <Button\r\n                      onClick={handleSendMessage}\r\n                      size=\"icon\"\r\n                      className=\"absolute right-1 bottom-1 h-8 w-8\"\r\n                      disabled={!messageInput.trim()}\r\n                    >\r\n                      <Send className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          </>\r\n        ) : (\r\n          <Card className=\"flex-1 flex items-center justify-center\">\r\n            <CardContent className=\"text-center\">\r\n              <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">Select a conversation</h3>\r\n              <p className=\"text-muted-foreground\">Choose a contact from the sidebar to start messaging</p>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DispatchChatPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\communication\\EmergencyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\DOTCompliancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\DrugAlcoholTestingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\HoursOfServicePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\RegulatoryUpdatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\SafetyScoresPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\compliance\\ViolationsManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\documents\\BOLPODPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\documents\\HOSLogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\documents\\ReceiptsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\documents\\TripReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\expenses\\ExpensesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\BankingPaymentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\CashFlowPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\ExpenseManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\FinancialForecastingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\InvoicingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\ProfitLossPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\finance\\RevenueTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\AssetTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\FuelManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\InsuranceManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\MaintenanceSchedulingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\VehicleInspectionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\fleet\\VehicleOverviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\insurance\\ClaimsManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\insurance\\CoverageAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\insurance\\InsurancePoliciesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\insurance\\InsuranceShoppingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\insurance\\RiskAssessmentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loadboard\\AvailableLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loadboard\\FavoritesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loadboard\\PostedLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loadboard\\SearchHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\AvailableLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\BookedLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\DeliveryConfirmationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\DeliveryStatusPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\InTransitPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\LoadDocumentationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\LoadHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\LoadTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\loads\\PendingLoadsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\ActiveContractsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\CustomerRelationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\DispatchManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\LoadBoardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\RateNegotiationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\operations\\TripPlanningPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\performance\\BusinessMetricsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\performance\\EarningsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\performance\\EfficiencyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\performance\\SafetyScorePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\routes\\ActiveRoutesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\routes\\RouteHistoryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\routes\\RouteOptimizerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\routes\\RoutePlannerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\BusinessFormationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\BusinessLoansPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\FactoringServicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\FuelCardProgramsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\LegalServicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\services\\PermitsLicensingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\BankingInformationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\BusinessProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\IntegrationSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\NotificationPreferencesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\OperatingAuthorityPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settings\\TaxSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settlement\\BenefitsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settlement\\EarningsOverviewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settlement\\PayrollReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settlement\\TaxDocumentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\settlement\\TimesheetsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax-management\\TaxManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\AccountantPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\DeductionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\MileageTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\QuarterlyTaxesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\TaxDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\TaxDocumentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tax\\TaxPlanningPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tools\\FuelPricesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tools\\RepairShopsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tools\\TruckStopsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\tools\\WeatherPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\BusinessDevelopmentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\BusinessTrainingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\CertificationProgramsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\IndustryUpdatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\SafetyTrainingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\training\\TechnologyTrainingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\vehicle\\DiagnosticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\vehicle\\FuelCostsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\vehicle\\MaintenanceLogPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\owner-operator\\vehicle\\VehicleStatusPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\quotes\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\rates\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\ComplianceReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\CustomReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\CustomerReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\DriverReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\FinancialReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\FuelReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\LoadReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\MaintenanceReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\OperationsReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\ReportsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\RouteAnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\SafetyReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\reports\\VehicleReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\AdvancedReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\ComplianceSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\FleetSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\IntegrationHubSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\NotificationSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\PayrollManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\ProfileSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\SecuritySettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\SystemMaintenancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\UserManagementSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\transportation-modes\\FreightSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\transportation-modes\\LogisticsSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\settings\\transportation-modes\\TruckingSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipments\\ModernShipmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipments\\ShipmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper-admin\\ShipperDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\ShipperDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\customer-portal\\CustomerPortalPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\invoices\\InvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\quotes\\QuotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\reports\\ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\shipper\\shipments\\ShipmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\SuperAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\SuperAdminRoutes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\TestSuperAdminDirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\TestSuperAdminEnhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\TestSuperAdminUI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\AIAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\AgentControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\AgentMonitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\AutonomousAgents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\AutonomousSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\DesignEngine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\MarketResearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\ai-dashboard\\SystemHealth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\analytics\\Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\api-dashboard\\APIKeys.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMCalendar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'fetchEvents'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchEvents]","fix":{"range":[1040,1042],"text":"[fetchEvents]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport SuperAdminLayout from '@/components/super-admin/SuperAdminLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { \r\n  Search, \r\n  Plus, \r\n  Calendar as CalendarIcon, \r\n  Clock,\r\n  MapPin,\r\n  Video,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  Building2,\r\n  User,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Users\r\n} from 'lucide-react';\r\nimport { useCRMEvents } from '@/hooks/crm/useCRMEvents';\r\nimport { useCRM } from '@/hooks/useCRM';\r\nimport { CRMStatsCard } from '@/components/crm/shared/CRMStatsCard';\r\n\r\nconst CRMCalendarPage: React.FC = () => {\r\n  const { events, fetchEvents } = useCRMEvents();\r\n  const { contacts, companies } = useCRM();\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n  const [typeFilter, setTypeFilter] = React.useState('all');\r\n\r\n  React.useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const filteredEvents = events.filter(event => {\r\n    const matchesSearch = \r\n      event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      event.location?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesType = typeFilter === 'all' || event.event_type === typeFilter;\r\n    \r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const getEventStats = () => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    const upcoming = events.filter(event => new Date(event.start_time) > today).length;\r\n    const thisWeek = events.filter(event => {\r\n      const eventDate = new Date(event.start_time);\r\n      const weekFromNow = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n      return eventDate >= today && eventDate <= weekFromNow;\r\n    }).length;\r\n    \r\n    const completed = events.filter(event => event.status === 'completed').length;\r\n    \r\n    return {\r\n      total: events.length,\r\n      upcoming,\r\n      thisWeek,\r\n      completed,\r\n      meetings: events.filter(e => e.event_type === 'meeting').length\r\n    };\r\n  };\r\n\r\n  const stats = getEventStats();\r\n\r\n  const getEventTypeColor = (type?: string) => {\r\n    switch (type) {\r\n      case 'meeting': return 'bg-blue-100 text-blue-800';\r\n      case 'call': return 'bg-green-100 text-green-800';\r\n      case 'email': return 'bg-purple-100 text-purple-800';\r\n      case 'task': return 'bg-orange-100 text-orange-800';\r\n      case 'demo': return 'bg-indigo-100 text-indigo-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status?: string) => {\r\n    switch (status) {\r\n      case 'scheduled': return 'bg-blue-100 text-blue-800';\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      case 'rescheduled': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status?: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle className=\"h-3 w-3\" />;\r\n      case 'cancelled': return <AlertCircle className=\"h-3 w-3\" />;\r\n      default: return <Clock className=\"h-3 w-3\" />;\r\n    }\r\n  };\r\n\r\n  const formatDateTime = (dateTime: string) => {\r\n    const date = new Date(dateTime);\r\n    return {\r\n      date: date.toLocaleDateString(),\r\n      time: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    };\r\n  };\r\n\r\n  const isToday = (dateTime: string) => {\r\n    const eventDate = new Date(dateTime);\r\n    const today = new Date();\r\n    return eventDate.toDateString() === today.toDateString();\r\n  };\r\n\r\n  const isUpcoming = (dateTime: string) => {\r\n    return new Date(dateTime) > new Date();\r\n  };\r\n\r\n  // Group events by date\r\n  const groupedEvents = filteredEvents.reduce((groups, event) => {\r\n    const date = new Date(event.start_time).toDateString();\r\n    if (!groups[date]) {\r\n      groups[date] = [];\r\n    }\r\n    groups[date].push(event);\r\n    return groups;\r\n  }, {} as Record<string, typeof filteredEvents>);\r\n\r\n  return (\r\n    <SuperAdminLayout>\r\n      <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">CRM Calendar</h1>\r\n          <p className=\"text-muted-foreground\">Manage your meetings, calls, and events</p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Schedule Event\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n        <CRMStatsCard\r\n          title=\"Total Events\"\r\n          value={stats.total}\r\n          icon={CalendarIcon}\r\n          iconColor=\"text-blue-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Upcoming\"\r\n          value={stats.upcoming}\r\n          icon={Clock}\r\n          iconColor=\"text-orange-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"This Week\"\r\n          value={stats.thisWeek}\r\n          icon={CalendarIcon}\r\n          iconColor=\"text-purple-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Completed\"\r\n          value={stats.completed}\r\n          icon={CheckCircle}\r\n          iconColor=\"text-green-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Meetings\"\r\n          value={stats.meetings}\r\n          icon={Users}\r\n          iconColor=\"text-indigo-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* Filters and Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search events...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex gap-2 flex-wrap\">\r\n              <Button\r\n                variant={typeFilter === 'all' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setTypeFilter('all')}\r\n              >\r\n                All\r\n              </Button>\r\n              {['meeting', 'call', 'demo', 'task'].map(type => (\r\n                <Button\r\n                  key={type}\r\n                  variant={typeFilter === type ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => setTypeFilter(type)}\r\n                  className=\"capitalize\"\r\n                >\r\n                  {type}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {Object.entries(groupedEvents)\r\n              .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())\r\n              .map(([date, dayEvents]) => (\r\n                <div key={date}>\r\n                  <div className=\"flex items-center gap-2 mb-3\">\r\n                    <h3 className=\"text-lg font-medium text-foreground\">\r\n                      {new Date(date).toLocaleDateString('en-US', { \r\n                        weekday: 'long', \r\n                        year: 'numeric', \r\n                        month: 'long', \r\n                        day: 'numeric' \r\n                      })}\r\n                    </h3>\r\n                    {isToday(date) && (\r\n                      <Badge className=\"bg-blue-100 text-blue-800\">Today</Badge>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-3\">\r\n                    {dayEvents\r\n                      .sort((a, b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime())\r\n                      .map((event) => {\r\n                        const { time: startTime } = formatDateTime(event.start_time);\r\n                        const { time: endTime } = formatDateTime(event.end_time);\r\n                        \r\n                        return (\r\n                          <div key={event.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\r\n                            <div className=\"flex items-start justify-between\">\r\n                              <div className=\"flex-1\">\r\n                                <div className=\"flex items-center gap-3 mb-2\">\r\n                                  <h4 className=\"font-medium text-foreground\">{event.title}</h4>\r\n                                  <Badge className={getEventTypeColor(event.event_type)}>\r\n                                    {event.event_type}\r\n                                  </Badge>\r\n                                  <Badge className={getStatusColor(event.status)}>\r\n                                    {getStatusIcon(event.status)}\r\n                                    <span className=\"ml-1 capitalize\">{event.status}</span>\r\n                                  </Badge>\r\n                                </div>\r\n                                \r\n                                {event.description && (\r\n                                  <p className=\"text-sm text-muted-foreground mb-3\">{event.description}</p>\r\n                                )}\r\n                                \r\n                                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-muted-foreground\">\r\n                                  <div className=\"flex items-center gap-1\">\r\n                                    <Clock className=\"h-3 w-3\" />\r\n                                    {startTime} - {endTime}\r\n                                  </div>\r\n                                  \r\n                                  {event.location && (\r\n                                    <div className=\"flex items-center gap-1\">\r\n                                      <MapPin className=\"h-3 w-3\" />\r\n                                      {event.location}\r\n                                    </div>\r\n                                  )}\r\n                                  \r\n                                  {event.meeting_link && (\r\n                                    <div className=\"flex items-center gap-1\">\r\n                                      <Video className=\"h-3 w-3\" />\r\n                                      Video Meeting\r\n                                    </div>\r\n                                  )}\r\n                                  \r\n                                  {event.attendees && event.attendees.length > 0 && (\r\n                                    <div className=\"flex items-center gap-1\">\r\n                                      <Users className=\"h-3 w-3\" />\r\n                                      {event.attendees.length} attendees\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n\r\n                                {(event.contact || event.company) && (\r\n                                  <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\r\n                                    {event.contact && (\r\n                                      <div className=\"flex items-center gap-1\">\r\n                                        <User className=\"h-3 w-3\" />\r\n                                        {event.contact.first_name} {event.contact.last_name}\r\n                                      </div>\r\n                                    )}\r\n                                    {event.company && (\r\n                                      <div className=\"flex items-center gap-1\">\r\n                                        <Building2 className=\"h-3 w-3\" />\r\n                                        {event.company.name}\r\n                                      </div>\r\n                                    )}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                              \r\n                              <div className=\"flex gap-1 ml-4\">\r\n                                <Button variant=\"ghost\" size=\"sm\">\r\n                                  <Eye className=\"h-4 w-4\" />\r\n                                </Button>\r\n                                <Button variant=\"ghost\" size=\"sm\">\r\n                                  <Edit className=\"h-4 w-4\" />\r\n                                </Button>\r\n                                <Button variant=\"ghost\" size=\"sm\">\r\n                                  <Trash2 className=\"h-4 w-4\" />\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n            {Object.keys(groupedEvents).length === 0 && (\r\n              <div className=\"text-center py-8\">\r\n                <CalendarIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No events found</h3>\r\n                <p className=\"text-muted-foreground mb-4\">\r\n                  {searchTerm ? 'Try adjusting your search terms.' : 'Get started by scheduling your first event.'}\r\n                </p>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Schedule Event\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n    </SuperAdminLayout>\r\n  );\r\n};\r\n\r\nexport default CRMCalendarPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMContacts.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchContacts]","fix":{"range":[977,979],"text":"[fetchContacts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport SuperAdminLayout from '@/components/super-admin/SuperAdminLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { \r\n  Search, \r\n  Plus, \r\n  Users, \r\n  Mail, \r\n  Phone, \r\n  Building2,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  Filter\r\n} from 'lucide-react';\r\nimport { useCRMContacts } from '@/hooks/crm/useCRMContacts';\r\nimport { useCRM } from '@/hooks/useCRM';\r\nimport { CRMStatsCard } from '@/components/crm/shared/CRMStatsCard';\r\n\r\nconst CRMContactsPage: React.FC = () => {\r\n  const { contacts, fetchContacts } = useCRMContacts();\r\n  const { companies } = useCRM();\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n  const [statusFilter, setStatusFilter] = React.useState('all');\r\n\r\n  React.useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  const filteredContacts = contacts.filter(contact => {\r\n    const matchesSearch = \r\n      contact.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      contact.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      contact.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      contact.company?.name?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesStatus = statusFilter === 'all' || contact.contact_status === statusFilter;\r\n    \r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const getContactStats = () => {\r\n    return {\r\n      total: contacts.length,\r\n      active: contacts.filter(c => c.contact_status === 'active').length,\r\n      inactive: contacts.filter(c => c.contact_status === 'inactive').length,\r\n      withCompany: contacts.filter(c => c.company_id).length\r\n    };\r\n  };\r\n\r\n  const stats = getContactStats();\r\n\r\n  const getStatusColor = (status?: string) => {\r\n    switch (status) {\r\n      case 'active': return 'bg-green-100 text-green-800';\r\n      case 'inactive': return 'bg-gray-100 text-gray-800';\r\n      case 'lead': return 'bg-blue-100 text-blue-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SuperAdminLayout>\r\n      <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">CRM Contacts</h1>\r\n          <p className=\"text-muted-foreground\">Manage your customer contacts and relationships</p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add Contact\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <CRMStatsCard\r\n          title=\"Total Contacts\"\r\n          value={stats.total}\r\n          icon={Users}\r\n          iconColor=\"text-blue-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Active Contacts\"\r\n          value={stats.active}\r\n          icon={Users}\r\n          iconColor=\"text-green-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Inactive Contacts\"\r\n          value={stats.inactive}\r\n          icon={Users}\r\n          iconColor=\"text-gray-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"With Company\"\r\n          value={stats.withCompany}\r\n          icon={Building2}\r\n          iconColor=\"text-purple-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* Filters and Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search contacts...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                variant={statusFilter === 'all' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setStatusFilter('all')}\r\n              >\r\n                All\r\n              </Button>\r\n              <Button\r\n                variant={statusFilter === 'active' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setStatusFilter('active')}\r\n              >\r\n                Active\r\n              </Button>\r\n              <Button\r\n                variant={statusFilter === 'inactive' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setStatusFilter('inactive')}\r\n              >\r\n                Inactive\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {filteredContacts.map((contact) => (\r\n              <div key={contact.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\r\n                      <span className=\"text-sm font-medium text-primary\">\r\n                        {contact.first_name[0]}{contact.last_name[0]}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <h3 className=\"font-medium text-foreground\">\r\n                        {contact.first_name} {contact.last_name}\r\n                      </h3>\r\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                        {contact.email && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Mail className=\"h-3 w-3\" />\r\n                            {contact.email}\r\n                          </div>\r\n                        )}\r\n                        {contact.phone && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Phone className=\"h-3 w-3\" />\r\n                            {contact.phone}\r\n                          </div>\r\n                        )}\r\n                        {contact.company && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Building2 className=\"h-3 w-3\" />\r\n                            {contact.company.name}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      {contact.job_title && (\r\n                        <p className=\"text-sm text-muted-foreground\">{contact.job_title}</p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge className={getStatusColor(contact.contact_status)}>\r\n                      {contact.contact_status}\r\n                    </Badge>\r\n                    <div className=\"flex gap-1\">\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <Eye className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <Edit className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {filteredContacts.length === 0 && (\r\n              <div className=\"text-center py-8\">\r\n                <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No contacts found</h3>\r\n                <p className=\"text-muted-foreground mb-4\">\r\n                  {searchTerm ? 'Try adjusting your search terms.' : 'Get started by adding your first contact.'}\r\n                </p>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Contact\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n    </SuperAdminLayout>\r\n  );\r\n};\r\n\r\nexport default CRMContactsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMEmail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMLeads.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMOpportunities.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'fetchOpportunities'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchOpportunities]","fix":{"range":[1096,1098],"text":"[fetchOpportunities]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport SuperAdminLayout from '@/components/super-admin/SuperAdminLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Search, \r\n  Plus, \r\n  Target, \r\n  DollarSign, \r\n  TrendingUp,\r\n  Calendar,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  Building2,\r\n  User\r\n} from 'lucide-react';\r\nimport { useCRMOpportunities } from '@/hooks/crm/useCRMOpportunities';\r\nimport { useCRM } from '@/hooks/useCRM';\r\nimport { CRMStatsCard } from '@/components/crm/shared/CRMStatsCard';\r\n\r\nconst CRMOpportunitiesPage: React.FC = () => {\r\n  const { opportunities, fetchOpportunities } = useCRMOpportunities();\r\n  const { contacts, companies } = useCRM();\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n  const [stageFilter, setStageFilter] = React.useState('all');\r\n\r\n  React.useEffect(() => {\r\n    fetchOpportunities();\r\n  }, []);\r\n\r\n  const filteredOpportunities = opportunities.filter(opp => {\r\n    const matchesSearch = \r\n      opp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      opp.company?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      opp.contact?.first_name?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesStage = stageFilter === 'all' || opp.stage === stageFilter;\r\n    \r\n    return matchesSearch && matchesStage;\r\n  });\r\n\r\n  const getOpportunityStats = () => {\r\n    const totalValue = opportunities.reduce((sum, opp) => sum + (opp.value || 0), 0);\r\n    const wonValue = opportunities\r\n      .filter(opp => opp.stage === 'won')\r\n      .reduce((sum, opp) => sum + (opp.value || 0), 0);\r\n    \r\n    return {\r\n      total: opportunities.length,\r\n      totalValue,\r\n      wonValue,\r\n      winRate: opportunities.length > 0 ? (opportunities.filter(opp => opp.stage === 'won').length / opportunities.length) * 100 : 0,\r\n      pipeline: opportunities.filter(opp => opp.stage !== 'won' && opp.stage !== 'lost').length\r\n    };\r\n  };\r\n\r\n  const stats = getOpportunityStats();\r\n\r\n  const getStageColor = (stage?: string) => {\r\n    switch (stage) {\r\n      case 'prospecting': return 'bg-blue-100 text-blue-800';\r\n      case 'qualification': return 'bg-yellow-100 text-yellow-800';\r\n      case 'proposal': return 'bg-orange-100 text-orange-800';\r\n      case 'negotiation': return 'bg-purple-100 text-purple-800';\r\n      case 'won': return 'bg-green-100 text-green-800';\r\n      case 'lost': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <SuperAdminLayout>\r\n      <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">CRM Opportunities</h1>\r\n          <p className=\"text-muted-foreground\">Track and manage your sales opportunities</p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add Opportunity\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n        <CRMStatsCard\r\n          title=\"Total Opportunities\"\r\n          value={stats.total}\r\n          icon={Target}\r\n          iconColor=\"text-blue-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Total Value\"\r\n          value={formatCurrency(stats.totalValue)}\r\n          icon={DollarSign}\r\n          iconColor=\"text-green-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Won Value\"\r\n          value={formatCurrency(stats.wonValue)}\r\n          icon={TrendingUp}\r\n          iconColor=\"text-emerald-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Win Rate\"\r\n          value={`${stats.winRate.toFixed(1)}%`}\r\n          icon={Target}\r\n          iconColor=\"text-purple-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"In Pipeline\"\r\n          value={stats.pipeline}\r\n          icon={Target}\r\n          iconColor=\"text-orange-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* Pipeline Overview */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Sales Pipeline</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\r\n            {['prospecting', 'qualification', 'proposal', 'negotiation', 'won', 'lost'].map(stage => {\r\n              const stageOpps = opportunities.filter(opp => opp.stage === stage);\r\n              const stageValue = stageOpps.reduce((sum, opp) => sum + (opp.value || 0), 0);\r\n              \r\n              return (\r\n                <div key={stage} className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-foreground\">{stageOpps.length}</div>\r\n                  <div className=\"text-sm text-muted-foreground capitalize\">{stage}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">{formatCurrency(stageValue)}</div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Filters and Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search opportunities...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex gap-2 flex-wrap\">\r\n              <Button\r\n                variant={stageFilter === 'all' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setStageFilter('all')}\r\n              >\r\n                All\r\n              </Button>\r\n              {['prospecting', 'qualification', 'proposal', 'negotiation'].map(stage => (\r\n                <Button\r\n                  key={stage}\r\n                  variant={stageFilter === stage ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => setStageFilter(stage)}\r\n                  className=\"capitalize\"\r\n                >\r\n                  {stage}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {filteredOpportunities.map((opportunity) => (\r\n              <div key={opportunity.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                      <h3 className=\"font-medium text-foreground\">{opportunity.name}</h3>\r\n                      <Badge className={getStageColor(opportunity.stage)}>\r\n                        {opportunity.stage}\r\n                      </Badge>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-muted-foreground\">\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <DollarSign className=\"h-3 w-3\" />\r\n                        <span className=\"font-medium text-foreground\">\r\n                          {formatCurrency(opportunity.value || 0)}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {opportunity.company && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Building2 className=\"h-3 w-3\" />\r\n                          {opportunity.company.name}\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {opportunity.contact && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <User className=\"h-3 w-3\" />\r\n                          {opportunity.contact.first_name} {opportunity.contact.last_name}\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {opportunity.expected_close_date && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          {new Date(opportunity.expected_close_date).toLocaleDateString()}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    {opportunity.probability && (\r\n                      <div className=\"mt-3\">\r\n                        <div className=\"flex justify-between text-sm mb-1\">\r\n                          <span className=\"text-muted-foreground\">Probability</span>\r\n                          <span className=\"text-foreground\">{opportunity.probability}%</span>\r\n                        </div>\r\n                        <Progress value={opportunity.probability} className=\"h-2\" />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex gap-1 ml-4\">\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Eye className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Edit className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Trash2 className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {filteredOpportunities.length === 0 && (\r\n              <div className=\"text-center py-8\">\r\n                <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No opportunities found</h3>\r\n                <p className=\"text-muted-foreground mb-4\">\r\n                  {searchTerm ? 'Try adjusting your search terms.' : 'Get started by adding your first opportunity.'}\r\n                </p>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Opportunity\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n    </SuperAdminLayout>\r\n  );\r\n};\r\n\r\nexport default CRMOpportunitiesPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\crm\\CRMProjects.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'fetchProjects'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProjects]","fix":{"range":[1118,1120],"text":"[fetchProjects]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport SuperAdminLayout from '@/components/super-admin/SuperAdminLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Search, \r\n  Plus, \r\n  FolderOpen, \r\n  DollarSign, \r\n  Clock,\r\n  Calendar,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  Building2,\r\n  User,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Pause,\r\n  Play\r\n} from 'lucide-react';\r\nimport { useCRMProjects } from '@/hooks/crm/useCRMProjects';\r\nimport { useCRM } from '@/hooks/useCRM';\r\nimport { CRMStatsCard } from '@/components/crm/shared/CRMStatsCard';\r\n\r\nconst CRMProjectsPage: React.FC = () => {\r\n  const { projects, fetchProjects } = useCRMProjects();\r\n  const { companies, opportunities } = useCRM();\r\n  const [searchTerm, setSearchTerm] = React.useState('');\r\n  const [statusFilter, setStatusFilter] = React.useState('all');\r\n\r\n  React.useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const filteredProjects = projects.filter(project => {\r\n    const matchesSearch = \r\n      project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      project.company?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      project.description?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesStatus = statusFilter === 'all' || project.status === statusFilter;\r\n    \r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const getProjectStats = () => {\r\n    const totalBudget = projects.reduce((sum, project) => sum + (project.budget || 0), 0);\r\n    const activeProjects = projects.filter(p => p.status === 'in_progress').length;\r\n    const completedProjects = projects.filter(p => p.status === 'completed').length;\r\n    const avgProgress = projects.length > 0 \r\n      ? projects.reduce((sum, p) => sum + (p.progress_percentage || 0), 0) / projects.length \r\n      : 0;\r\n    \r\n    return {\r\n      total: projects.length,\r\n      totalBudget,\r\n      active: activeProjects,\r\n      completed: completedProjects,\r\n      avgProgress: Math.round(avgProgress)\r\n    };\r\n  };\r\n\r\n  const stats = getProjectStats();\r\n\r\n  const getStatusColor = (status?: string) => {\r\n    switch (status) {\r\n      case 'planning': return 'bg-blue-100 text-blue-800';\r\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800';\r\n      case 'on_hold': return 'bg-orange-100 text-orange-800';\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status?: string) => {\r\n    switch (status) {\r\n      case 'planning': return <Clock className=\"h-3 w-3\" />;\r\n      case 'in_progress': return <Play className=\"h-3 w-3\" />;\r\n      case 'on_hold': return <Pause className=\"h-3 w-3\" />;\r\n      case 'completed': return <CheckCircle className=\"h-3 w-3\" />;\r\n      case 'cancelled': return <AlertCircle className=\"h-3 w-3\" />;\r\n      default: return <FolderOpen className=\"h-3 w-3\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority?: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'text-red-600';\r\n      case 'medium': return 'text-yellow-600';\r\n      case 'low': return 'text-green-600';\r\n      default: return 'text-gray-600';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <SuperAdminLayout>\r\n      <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">CRM Projects</h1>\r\n          <p className=\"text-muted-foreground\">Manage your client projects and deliverables</p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add Project\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n        <CRMStatsCard\r\n          title=\"Total Projects\"\r\n          value={stats.total}\r\n          icon={FolderOpen}\r\n          iconColor=\"text-blue-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Total Budget\"\r\n          value={formatCurrency(stats.totalBudget)}\r\n          icon={DollarSign}\r\n          iconColor=\"text-green-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Active Projects\"\r\n          value={stats.active}\r\n          icon={Play}\r\n          iconColor=\"text-yellow-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Completed\"\r\n          value={stats.completed}\r\n          icon={CheckCircle}\r\n          iconColor=\"text-green-600\"\r\n        />\r\n        <CRMStatsCard\r\n          title=\"Avg Progress\"\r\n          value={`${stats.avgProgress}%`}\r\n          icon={Clock}\r\n          iconColor=\"text-purple-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* Status Overview */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Project Status Overview</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n            {['planning', 'in_progress', 'on_hold', 'completed', 'cancelled'].map(status => {\r\n              const statusProjects = projects.filter(p => p.status === status);\r\n              const statusBudget = statusProjects.reduce((sum, p) => sum + (p.budget || 0), 0);\r\n              \r\n              return (\r\n                <div key={status} className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-foreground\">{statusProjects.length}</div>\r\n                  <div className=\"text-sm text-muted-foreground capitalize\">{status.replace('_', ' ')}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">{formatCurrency(statusBudget)}</div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Filters and Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search projects...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex gap-2 flex-wrap\">\r\n              <Button\r\n                variant={statusFilter === 'all' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setStatusFilter('all')}\r\n              >\r\n                All\r\n              </Button>\r\n              {['planning', 'in_progress', 'on_hold', 'completed'].map(status => (\r\n                <Button\r\n                  key={status}\r\n                  variant={statusFilter === status ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => setStatusFilter(status)}\r\n                  className=\"capitalize\"\r\n                >\r\n                  {status.replace('_', ' ')}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {filteredProjects.map((project) => (\r\n              <div key={project.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                      <h3 className=\"font-medium text-foreground\">{project.name}</h3>\r\n                      <Badge className={getStatusColor(project.status)}>\r\n                        {getStatusIcon(project.status)}\r\n                        <span className=\"ml-1 capitalize\">{project.status?.replace('_', ' ')}</span>\r\n                      </Badge>\r\n                      {project.priority && (\r\n                        <Badge variant=\"outline\" className={getPriorityColor(project.priority)}>\r\n                          {project.priority} priority\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {project.description && (\r\n                      <p className=\"text-sm text-muted-foreground mb-3\">{project.description}</p>\r\n                    )}\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-muted-foreground mb-3\">\r\n                      {project.budget && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <DollarSign className=\"h-3 w-3\" />\r\n                          <span className=\"font-medium text-foreground\">\r\n                            {formatCurrency(project.budget)}\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {project.company && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Building2 className=\"h-3 w-3\" />\r\n                          {project.company.name}\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {project.project_manager && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <User className=\"h-3 w-3\" />\r\n                          Project Manager\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {project.end_date && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          Due: {new Date(project.end_date).toLocaleDateString()}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    {typeof project.progress_percentage === 'number' && (\r\n                      <div>\r\n                        <div className=\"flex justify-between text-sm mb-1\">\r\n                          <span className=\"text-muted-foreground\">Progress</span>\r\n                          <span className=\"text-foreground\">{project.progress_percentage}%</span>\r\n                        </div>\r\n                        <Progress value={project.progress_percentage} className=\"h-2\" />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex gap-1 ml-4\">\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Eye className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Edit className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <Trash2 className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {filteredProjects.length === 0 && (\r\n              <div className=\"text-center py-8\">\r\n                <FolderOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No projects found</h3>\r\n                <p className=\"text-muted-foreground mb-4\">\r\n                  {searchTerm ? 'Try adjusting your search terms.' : 'Get started by adding your first project.'}\r\n                </p>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Project\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n    </SuperAdminLayout>\r\n  );\r\n};\r\n\r\nexport default CRMProjectsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\dlq\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2129,2132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2129,2132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from \"react\";\r\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { supabase } from \"@/lib/supabaseClient\";\r\nimport { useFlag } from \"@/hooks/useFlag\";\r\nimport { buildTraceLink } from \"@/lib/otelLinks\";\r\n\r\ntype DlqItem = {\r\n  id: string;\r\n  company_id: string;\r\n  created_at: string;\r\n  last_error_at: string | null;\r\n  attempts: number;\r\n  last_error: string | null;\r\n  payload_bytes: number;\r\n  status: string;\r\n  trace_id?: string | null;\r\n};\r\n\r\nasync function fetchItems(companyId: string | null, limit = 50, status?: string) {\r\n  const base = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/dlq-admin`;\r\n  const qs = new URLSearchParams();\r\n  if (companyId) qs.set(\"company_id\", companyId);\r\n  if (status) qs.set(\"status\", status);\r\n  qs.set(\"limit\", String(limit));\r\n  const r = await fetch(`${base}?${qs.toString()}`, { headers: await authHeader() });\r\n  if (!r.ok) throw new Error(`list_failed:${r.status}`);\r\n  const js = await r.json();\r\n  return (js.items ?? []) as DlqItem[];\r\n}\r\n\r\nasync function action(payload: Record<string, unknown>) {\r\n  const r = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/dlq-admin`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\", ...(await authHeader()) },\r\n    body: JSON.stringify(payload),\r\n  });\r\n  const js = await r.json();\r\n  if (!r.ok || !js.ok) throw new Error(js.error || `action_failed:${r.status}`);\r\n  return js;\r\n}\r\n\r\nasync function authHeader() {\r\n  const { data } = await supabase.auth.getSession();\r\n  const token = data.session?.access_token;\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n}\r\n\r\nexport default function DlqAdminPage() {\r\n  const uiEnabled = useFlag(\"default\", \"development\", \"ops.dlqAdminUIEnabled\", false);\r\n  const [companyId, setCompanyId] = useState<string>(\"\");\r\n  const [status, setStatus] = useState<string | undefined>();\r\n  const [limit, setLimit] = useState<number>(50);\r\n  const [selected, setSelected] = useState<Record<string, boolean>>({});\r\n  const qc = useQueryClient();\r\n\r\n  const { data: items = [] as any[], isLoading, refetch } = useQuery({\r\n    queryKey: [\"dlq\", companyId, limit, status],\r\n    queryFn: () => fetchItems(companyId || null, limit, status),\r\n    enabled: uiEnabled.value,\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  const selectedIds = useMemo(() => Object.keys(selected).filter(k => selected[k]), [selected]);\r\n\r\n  const mPause = useMutation({ mutationFn: (pause: boolean) => action({ action: pause ? \"pause\" : \"unpause\", company_id: companyId }) , onSuccess: () => refetch() });\r\n  const mDrain = useMutation({ mutationFn: () => action({ action: \"drain\", company_id: companyId }), onSuccess: () => refetch() });\r\n  const mDryRun = useMutation({ mutationFn: () => action({ action: \"dry_run\", company_id: companyId, max: 25, ids: selectedIds }), onSuccess: () => qc.invalidateQueries({ queryKey:[\"dlq\"] }) });\r\n  const mReplay = useMutation({ mutationFn: () => action({ action: \"replay\", company_id: companyId, max: 25, ids: selectedIds, dry_run: false }), onSuccess: () => qc.invalidateQueries({ queryKey:[\"dlq\"] }) });\r\n\r\n  if (!uiEnabled.value) return <div className=\"p-6\">‚ö†Ô∏è DLQ Admin UI is disabled by flag.</div>;\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-4\">\r\n      <h1 className=\"text-2xl font-semibold\">üßØ DLQ Admin</h1>\r\n\r\n      <div className=\"flex gap-2 items-end\">\r\n        <div>\r\n          <label className=\"text-sm\">Company ID</label>\r\n          <input className=\"border rounded px-2 py-1 w-[420px]\" placeholder=\"00000000-0000-4000-8000-000000000001\"\r\n                 value={companyId} onChange={e=>setCompanyId(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label className=\"text-sm\">Status</label>\r\n          <select className=\"border rounded px-2 py-1\" value={status ?? \"\"} onChange={e=>setStatus(e.target.value || undefined)}>\r\n            <option value=\"\">(any)</option>\r\n            <option value=\"failed\">failed</option>\r\n            <option value=\"quarantined\">quarantined</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label className=\"text-sm\">Limit</label>\r\n          <input type=\"number\" className=\"border rounded px-2 py-1 w-24\" value={limit} min={1} max={200}\r\n                 onChange={e=>setLimit(parseInt(e.target.value || \"50\"))} />\r\n        </div>\r\n        <button className=\"px-3 py-2 rounded bg-black text-white\" onClick={()=>refetch()} disabled={isLoading}>Refresh</button>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2\">\r\n        <button className=\"px-3 py-2 rounded bg-yellow-500 text-white disabled:opacity-50\"\r\n                onClick={()=>mDryRun.mutate()} disabled={!companyId || selectedIds.length===0}>Dry Run Replay (selected)</button>\r\n        <button className=\"px-3 py-2 rounded bg-green-600 text-white disabled:opacity-50\"\r\n                onClick={()=>mReplay.mutate()} disabled={!companyId || selectedIds.length===0}>Replay (selected)</button>\r\n        <button className=\"px-3 py-2 rounded bg-orange-600 text-white disabled:opacity-50\"\r\n                onClick={()=>mPause.mutate(true)} disabled={!companyId}>Pause Tenant</button>\r\n        <button className=\"px-3 py-2 rounded bg-slate-600 text-white disabled:opacity-50\"\r\n                onClick={()=>mPause.mutate(false)} disabled={!companyId}>Unpause Tenant</button>\r\n        <button className=\"px-3 py-2 rounded bg-red-700 text-white disabled:opacity-50\"\r\n                onClick={()=>mDrain.mutate()} disabled={!companyId}>Drain Tenant</button>\r\n      </div>\r\n\r\n      <div className=\"border rounded\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead>\r\n          <tr className=\"bg-slate-50\">\r\n            <th className=\"p-2\"></th>\r\n            <th className=\"p-2 text-left\">ID</th>\r\n            <th className=\"p-2 text-left\">Company</th>\r\n            <th className=\"p-2\">Attempts</th>\r\n            <th className=\"p-2\">Payload</th>\r\n            <th className=\"p-2\">Last Error</th>\r\n            <th className=\"p-2\">Trace</th>\r\n            <th className=\"p-2\">Created</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {items.map((it) => (\r\n            <tr key={it.id} className=\"border-t\">\r\n              <td className=\"p-2\">\r\n                <input type=\"checkbox\" checked={!!selected[it.id]} onChange={() => setSelected(s => ({...s, [it.id]: !s[it.id]}))}/>\r\n              </td>\r\n              <td className=\"p-2 font-mono text-xs\">{it.id}</td>\r\n              <td className=\"p-2 font-mono text-xs\">{it.company_id}</td>\r\n              <td className=\"p-2 text-center\">{it.attempts}</td>\r\n              <td className=\"p-2 text-center\">{it.payload_bytes} B</td>\r\n              <td className=\"p-2 truncate max-w-[420px]\" title={it.last_error || \"\"}>{it.last_error || \"-\"}</td>\r\n              <td className=\"p-2\">\r\n                {it.trace_id ? (\r\n                  <a \r\n                    className=\"text-blue-600 hover:text-blue-800 underline font-mono text-xs\" \r\n                    href={buildTraceLink(it.trace_id) || \"#\"} \r\n                    target=\"_blank\" \r\n                    rel=\"noreferrer\"\r\n                    title=\"Open in OTEL backend\"\r\n                  >\r\n                    {it.trace_id}\r\n                  </a>\r\n                ) : (\r\n                  <span className=\"text-muted-foreground text-xs\">n/a</span>\r\n                )}\r\n              </td>\r\n              <td className=\"p-2\">{new Date(it.created_at).toLocaleString()}</td>\r\n            </tr>\r\n          ))}\r\n          {items.length === 0 && (\r\n            <tr><td className=\"p-4 text-center text-slate-500\" colSpan={8}>No items</td></tr>\r\n          )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\flags\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":147,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":150,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3371,3374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3371,3374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\r\nimport { supabase } from \"@/lib/supabaseClient\";\r\nimport type { FeatureFlag } from \"@/types/feature-flags\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Select } from \"@/components/ui/select\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\ntype Scope = \"global\" | \"env\" | \"tenant\";\r\n\r\nexport default function FlagsPage() {\r\n  const [rows, setRows] = useState<FeatureFlag[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [edit, setEdit] = useState<Partial<FeatureFlag> | null>(null);\r\n\r\n  async function load() {\r\n    setLoading(true);\r\n    const { data, error } = await supabase\r\n      .from<FeatureFlag>(\"feature_flags_v2\")\r\n      .select(\"*\")\r\n      .order(\"key\", { ascending: true })\r\n      .order(\"scope\", { ascending: true });\r\n    if (!error) setRows(data ?? []);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => { load(); }, []);\r\n\r\n  function scopeBadge(s: Scope) {\r\n    const m: Record<Scope, string> = { global: \"secondary\", env: \"default\", tenant: \"destructive\" };\r\n    return <Badge variant=\"default\" className=\"capitalize\">{s}</Badge>;\r\n  }\r\n\r\n  async function upsert() {\r\n    if (!edit?.key || !edit?.scope) return;\r\n    const payload = {\r\n      key: edit.key,\r\n      scope: edit.scope,\r\n      env: edit.scope === \"env\" ? (edit.env ?? \"production\") : null,\r\n      company_id: edit.scope === \"tenant\" ? (edit.company_id ?? null) : null,\r\n      value: !!edit.value,\r\n      payload: edit.payload ?? {},\r\n      reason: edit.reason ?? null,\r\n      owner_name: edit.owner_name ?? null,\r\n      expires_at: edit.expires_at ?? null,\r\n    };\r\n    const { error } = await supabase.from(\"feature_flags_v2\")\r\n      .upsert(payload, { onConflict: \"key,scope,env,company_id\" });\r\n    if (error) { alert(error.message); return; }\r\n    setEdit(null);\r\n    load();\r\n  }\r\n\r\n  async function remove(row: FeatureFlag) {\r\n    if (!confirm(`Delete flag ${row.key} [${row.scope}]?`)) return;\r\n    const { error } = await supabase.from(\"feature_flags_v2\").delete().eq(\"id\", row.id);\r\n    if (error) { alert(error.message); return; }\r\n    load();\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\r\n      <h1 className=\"text-2xl font-semibold\">Feature Flags</h1>\r\n\r\n      <Card className=\"p-4 space-y-3\">\r\n        <h2 className=\"font-medium\">New / Edit Flag</h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-3\">\r\n          <Input placeholder=\"key\" value={edit?.key ?? \"\"} onChange={e => setEdit({ ...edit, key: e.target.value })} />\r\n          <Select value={(edit?.scope as Scope) ?? \"global\"} onValueChange={v => setEdit({ ...edit, scope: v as Scope })}>\r\n            <option value=\"global\">global</option>\r\n            <option value=\"env\">env</option>\r\n            <option value=\"tenant\">tenant</option>\r\n          </Select>\r\n          {edit?.scope === \"env\" && (\r\n            <Input placeholder=\"env (production/staging/dev)\" value={edit?.env ?? \"\"} onChange={e => setEdit({ ...edit, env: e.target.value })}/>\r\n          )}\r\n          {edit?.scope === \"tenant\" && (\r\n            <Input placeholder=\"company_id (uuid)\" value={edit?.company_id ?? \"\"} onChange={e => setEdit({ ...edit, company_id: e.target.value as any })}/>\r\n          )}\r\n          <div className=\"flex items-center gap-2\">\r\n            <Switch checked={!!edit?.value} onCheckedChange={v => setEdit({ ...edit, value: v })}/>\r\n            <span>enabled</span>\r\n          </div>\r\n          <Input placeholder=\"owner name (optional)\" value={edit?.owner_name ?? \"\"} onChange={e => setEdit({ ...edit, owner_name: e.target.value })}/>\r\n          <Input placeholder=\"expires_at (ISO, optional)\" value={edit?.expires_at ?? \"\"} onChange={e => setEdit({ ...edit, expires_at: e.target.value })}/>\r\n          <Input placeholder=\"reason (optional)\" value={edit?.reason ?? \"\"} onChange={e => setEdit({ ...edit, reason: e.target.value })}/>\r\n          <div className=\"col-span-1 md:col-span-6 flex gap-2\">\r\n            <Button onClick={upsert}>Save</Button>\r\n            <Button variant=\"secondary\" onClick={() => setEdit(null)}>Clear</Button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      <Card className=\"p-0 overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead>\r\n            <tr className=\"text-left bg-muted/50\">\r\n              <th className=\"p-3\">Key</th><th>Scope</th><th>Env</th><th>Company</th><th>Value</th><th>Expires</th><th>Owner</th><th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loading && <tr><td className=\"p-3\" colSpan={8}>Loading‚Ä¶</td></tr>}\r\n            {!loading && rows.map(r => (\r\n              <tr key={r.id} className=\"border-t\">\r\n                <td className=\"p-3 font-mono\">{r.key}</td>\r\n                <td>{scopeBadge(r.scope as Scope)}</td>\r\n                <td>{r.env ?? \"‚Äî\"}</td>\r\n                <td className=\"font-mono\">{r.company_id ?? \"‚Äî\"}</td>\r\n                <td>{r.value ? <Badge>ON</Badge> : <Badge variant=\"outline\">off</Badge>}</td>\r\n                <td>{r.expires_at ?? \"‚Äî\"}</td>\r\n                <td>{r.owner_name ?? \"‚Äî\"}</td>\r\n                <td className=\"p-3 space-x-2\">\r\n                  <Button size=\"sm\" variant=\"secondary\" onClick={() => setEdit(r)}>Edit</Button>\r\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => remove(r)}>Delete</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\marketplace\\MarketplaceAll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\networks\\NetworksCustomers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\SuperAdminSettingsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'settingsSections'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams, settingsSections]","fix":{"range":[1372,1386],"text":"[searchParams, settingsSections]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Settings, Users, Building, CreditCard, Calculator, FileText, Folder, Plug, Crown, Shield } from 'lucide-react';\r\n\r\n// Import all setting components\r\nimport GeneralSettings from './components/GeneralSettings';\r\nimport UserManagement from './components/UserManagement';\r\nimport CompanySettings from './components/CompanySettings';\r\nimport PayrollSettings from './components/PayrollSettings';\r\nimport AccountingSettings from './components/AccountingSettings';\r\nimport TemplatesAndDocuments from './components/TemplatesAndDocuments';\r\nimport DocumentSettings from './components/DocumentSettings';\r\nimport ApiAndEdiSettings from './components/ApiAndEdiSettings';\r\nconst SuperAdminSettingsPage = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [activeTab, setActiveTab] = useState('general');\r\n\r\n  // Handle URL tab parameter\r\n  useEffect(() => {\r\n    const tabParam = searchParams.get('tab');\r\n    if (tabParam && settingsSections.some(section => section.id === tabParam)) {\r\n      setActiveTab(tabParam);\r\n    }\r\n  }, [searchParams]);\r\n  const settingsSections = [{\r\n    id: 'general',\r\n    label: 'General',\r\n    icon: Settings,\r\n    description: 'Core platform configuration',\r\n    component: GeneralSettings\r\n  }, {\r\n    id: 'users',\r\n    label: 'User Management',\r\n    icon: Users,\r\n    description: 'Manage users, roles & permissions',\r\n    component: UserManagement\r\n  }, {\r\n    id: 'company',\r\n    label: 'Company',\r\n    icon: Building,\r\n    description: 'Legal entity & locations',\r\n    component: CompanySettings\r\n  }, {\r\n    id: 'payroll',\r\n    label: 'Payroll',\r\n    icon: CreditCard,\r\n    description: 'Employee compensation & benefits',\r\n    component: PayrollSettings,\r\n    badge: 'Enhanced'\r\n  }, {\r\n    id: 'accounting',\r\n    label: 'Accounting',\r\n    icon: Calculator,\r\n    description: 'Financial settings & tax config',\r\n    component: AccountingSettings\r\n  }, {\r\n    id: 'templates',\r\n    label: 'Templates',\r\n    icon: FileText,\r\n    description: 'Document templates & contracts',\r\n    component: TemplatesAndDocuments\r\n  }, {\r\n    id: 'documents',\r\n    label: 'Document Settings',\r\n    icon: Folder,\r\n    description: 'Storage policies & access control',\r\n    component: DocumentSettings\r\n  }, {\r\n    id: 'api',\r\n    label: 'API & EDI',\r\n    icon: Plug,\r\n    description: 'Integrations & data exchange',\r\n    component: ApiAndEdiSettings\r\n  }];\r\n  return <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/20\">\r\n      <div className=\"max-w-[1280px] mx-auto px-6 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center gap-3 mb-2\">\r\n            <div className=\"p-2 rounded-lg bg-primary/10\">\r\n              <Shield className=\"h-6 w-6 text-primary\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\r\n                Super Admin Settings\r\n              </h1>\r\n              <p className=\"text-muted-foreground\">\r\n                Complete system configuration for Trans Bot AI\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Settings Interface */}\r\n        <Card className=\"shadow-xl border-0 bg-card/50 backdrop-blur-sm\">\r\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n            {/* Sticky Tab Header */}\r\n            <div className=\"sticky top-0 z-10 bg-card/95 backdrop-blur-sm border-b\">\r\n              <CardHeader className=\"pb-4\">\r\n                \r\n                \r\n                {/* Active Tab Description */}\r\n                <div className=\"mt-4\">\r\n                  {settingsSections.map(section => activeTab === section.id ? <div key={section.id} className=\"flex items-center gap-3\">\r\n                        <section.icon className=\"h-5 w-5 text-primary\" />\r\n                        <div>\r\n                          <CardTitle className=\"text-xl\">{section.label} Settings</CardTitle>\r\n                          <CardDescription>{section.description}</CardDescription>\r\n                        </div>\r\n                      </div> : null)}\r\n                </div>\r\n              </CardHeader>\r\n            </div>\r\n\r\n            {/* Tab Content */}\r\n            <CardContent className=\"p-6\">\r\n              {settingsSections.map(section => {\r\n              const ComponentToRender = section.component;\r\n              return <TabsContent key={section.id} value={section.id} className=\"mt-0 space-y-6\">\r\n                    <ComponentToRender />\r\n                  </TabsContent>;\r\n            })}\r\n            </CardContent>\r\n          </Tabs>\r\n        </Card>\r\n      </div>\r\n    </div>;\r\n};\r\nexport default SuperAdminSettingsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\SystemSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\AccountingSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\ApiAndEdiSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\CompanySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\DocumentSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\GeneralSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\PayrollSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\TemplatesAndDocuments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\settings\\components\\UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\tickets\\AllTickets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\tickets\\TicketAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\tickets\\TicketCategories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\tickets\\TicketTemplates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\tickets\\TicketsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\traces\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\super-admin\\users\\ManageUsers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\testing\\AutonomousAgentTestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\testing\\UserTestingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\tmsAdmin\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\workers\\WorkersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\pages\\workers\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\DirectoryPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\components\\CompanyProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\components\\ExploreDirectory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\components\\FacilityProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\components\\ListsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\directory\\components\\Scorecards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\RatesPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\components\\ContractsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\components\\FuelAccessorials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\components\\LaneIntelligence.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\components\\QuotesManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\rates\\components\\RateConsole.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\portals\\registry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\routes\\AppRoutes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\routes\\not-available.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\services\\analyticsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\services\\dashboardProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\services\\dashboardService.supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\services\\dashboardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\services\\websiteBuilderService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1018,1021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1018,1021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3962,3965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3962,3965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7143,7146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7143,7146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock Website Builder Service for Real-time Autonomous Operations\r\n// This simulates the autonomous agents building the website in real-time\r\n\r\ninterface WebsiteBuilderStatus {\r\n  operational: boolean;\r\n  paused: boolean;\r\n  pagesBuilt: number;\r\n  pagesInProgress: number;\r\n  avgBuildMs: number;\r\n  avgSeoScore: number;\r\n  lastBuildAt?: string;\r\n  uptime: number;\r\n}\r\n\r\ninterface WebsiteBuilderMetrics {\r\n  pagesBuilt: number;\r\n  pagesInProgress: number;\r\n  avgBuildMs: number;\r\n  avgSeoScore: number;\r\n  totalWords: number;\r\n  totalImages: number;\r\n  eventsLast60s: number;\r\n  buildsLast2m: number;\r\n}\r\n\r\ninterface BuildRequest {\r\n  type: string;\r\n  priority?: number;\r\n  seed?: string;\r\n}\r\n\r\nclass MockWebsiteBuilderService {\r\n  private isPaused: boolean = false;\r\n  private pagesBuilt: number = 5; // Start with demo pages\r\n  private pagesInProgress: number = 0;\r\n  private startTime: Date = new Date();\r\n  private buildQueue: any[] = [];\r\n  private isRunning: boolean = true;\r\n  private eventListeners: ((event: any) => void)[] = [];\r\n  private buildInterval: NodeJS.Timeout | null = null;\r\n  private progressInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    console.log('ü§ñ Trans Bot AI Website Builder Service initializing...');\r\n    this.startAutonomousBuilding();\r\n    \r\n    // Ensure service persists across page refreshes\r\n    if (typeof window !== 'undefined') {\r\n      window.addEventListener('beforeunload', () => {\r\n        console.log('üîÑ Page refreshing - preserving autonomous state...');\r\n      });\r\n      \r\n      // Auto-start when page loads\r\n      window.addEventListener('load', () => {\r\n        console.log('üöÄ Page loaded - starting autonomous agents...');\r\n        this.ensureRunning();\r\n      });\r\n    }\r\n  }\r\n\r\n  private ensureRunning() {\r\n    if (!this.isRunning) {\r\n      console.log('üîÑ Restarting autonomous agents...');\r\n      this.isRunning = true;\r\n      this.startAutonomousBuilding();\r\n    }\r\n  }\r\n\r\n  private startAutonomousBuilding() {\r\n    console.log('üèóÔ∏è Starting autonomous website building...');\r\n    \r\n    // Clear any existing intervals\r\n    if (this.buildInterval) clearInterval(this.buildInterval);\r\n    if (this.progressInterval) clearInterval(this.progressInterval);\r\n\r\n    // Simulate autonomous agents building pages every 3-8 seconds\r\n    this.buildInterval = setInterval(() => {\r\n      if (!this.isPaused && this.isRunning) {\r\n        this.buildRandomPage();\r\n      }\r\n    }, Math.random() * 5000 + 3000); // 3-8 seconds\r\n\r\n    // Simulate progress updates every 1-2 seconds\r\n    this.progressInterval = setInterval(() => {\r\n      if (!this.isPaused && this.isRunning) {\r\n        this.updateProgress();\r\n      }\r\n    }, Math.random() * 1000 + 1000); // 1-2 seconds\r\n\r\n    // Emit initial status event\r\n    this.emitEvent({\r\n      type: 'service_started',\r\n      timestamp: new Date().toISOString(),\r\n      message: 'Autonomous website builder service started'\r\n    });\r\n\r\n    console.log('‚úÖ Autonomous agents are now running!');\r\n  }\r\n\r\n  private buildRandomPage() {\r\n    const pageTypes = [\r\n      'home', 'about', 'tms-software', 'features', 'pricing', 'contact',\r\n      'blog', 'solutions', 'resources', 'support', 'careers', 'demo', 'api', 'integrations'\r\n    ];\r\n    \r\n    const randomType = pageTypes[Math.floor(Math.random() * pageTypes.length)];\r\n    const priority = Math.floor(Math.random() * 10) + 1;\r\n    const seed = `auto-${Date.now()}`;\r\n\r\n    this.buildPage({ type: randomType, priority, seed });\r\n  }\r\n\r\n  private updateProgress() {\r\n    // Simulate progress updates for pages in progress\r\n    if (this.pagesInProgress > 0) {\r\n      this.pagesInProgress = Math.max(0, this.pagesInProgress - 1);\r\n      this.pagesBuilt += 1;\r\n      \r\n      this.emitEvent({\r\n        type: 'progress_update',\r\n        timestamp: new Date().toISOString(),\r\n        pagesBuilt: this.pagesBuilt,\r\n        pagesInProgress: this.pagesInProgress\r\n      });\r\n    }\r\n  }\r\n\r\n  private emitEvent(event: any) {\r\n    this.eventListeners.forEach(listener => listener(event));\r\n  }\r\n\r\n  async getStatus(): Promise<WebsiteBuilderStatus> {\r\n    const avgBuildMs = Math.floor(Math.random() * 2000) + 1000; // 1-3 seconds\r\n    const avgSeoScore = Math.floor(Math.random() * 20) + 80; // 80-100\r\n\r\n    return {\r\n      operational: true,\r\n      paused: this.isPaused,\r\n      pagesBuilt: this.pagesBuilt,\r\n      pagesInProgress: this.pagesInProgress,\r\n      avgBuildMs,\r\n      avgSeoScore,\r\n      lastBuildAt: new Date().toISOString(),\r\n      uptime: Date.now() - this.startTime.getTime()\r\n    };\r\n  }\r\n\r\n  async getMetrics(): Promise<WebsiteBuilderMetrics> {\r\n    const avgBuildMs = Math.floor(Math.random() * 2000) + 1000;\r\n    const avgSeoScore = Math.floor(Math.random() * 20) + 80;\r\n    const totalWords = this.pagesBuilt * (Math.floor(Math.random() * 200) + 100);\r\n    const totalImages = this.pagesBuilt * (Math.floor(Math.random() * 5) + 1);\r\n    const eventsLast60s = Math.floor(Math.random() * 30) + 10;\r\n    const buildsLast2m = Math.floor(Math.random() * 10) + 5;\r\n\r\n    return {\r\n      pagesBuilt: this.pagesBuilt,\r\n      pagesInProgress: this.pagesInProgress,\r\n      avgBuildMs,\r\n      avgSeoScore,\r\n      totalWords,\r\n      totalImages,\r\n      eventsLast60s,\r\n      buildsLast2m\r\n    };\r\n  }\r\n\r\n  async pause(): Promise<{ success: boolean; message: string }> {\r\n    this.isPaused = true;\r\n    this.emitEvent({\r\n      type: 'builder_paused',\r\n      timestamp: new Date().toISOString(),\r\n      message: 'Website builder paused by user'\r\n    });\r\n    return { success: true, message: 'Website builder paused successfully' };\r\n  }\r\n\r\n  async resume(): Promise<{ success: boolean; message: string }> {\r\n    this.isPaused = false;\r\n    this.emitEvent({\r\n      type: 'builder_resumed',\r\n      timestamp: new Date().toISOString(),\r\n      message: 'Website builder resumed by user'\r\n    });\r\n    return { success: true, message: 'Website builder resumed successfully' };\r\n  }\r\n\r\n  async buildPage(request: BuildRequest): Promise<{ success: boolean; pageId?: string; message: string }> {\r\n    if (this.isPaused) {\r\n      return { success: false, message: 'Builder is paused' };\r\n    }\r\n\r\n    this.pagesInProgress += 1;\r\n    const pageId = `page-${Date.now()}`;\r\n\r\n    this.emitEvent({\r\n      type: 'page_build_started',\r\n      timestamp: new Date().toISOString(),\r\n      pageId,\r\n      pageType: request.type,\r\n      priority: request.priority,\r\n      seed: request.seed\r\n    });\r\n\r\n    // Simulate build process\r\n    setTimeout(() => {\r\n      this.pagesInProgress = Math.max(0, this.pagesInProgress - 1);\r\n      this.pagesBuilt += 1;\r\n\r\n      this.emitEvent({\r\n        type: 'page_build_completed',\r\n        timestamp: new Date().toISOString(),\r\n        pageId,\r\n        pageType: request.type,\r\n        seoScore: Math.floor(Math.random() * 20) + 80,\r\n        wordCount: Math.floor(Math.random() * 200) + 100,\r\n        buildMs: Math.floor(Math.random() * 3000) + 1000\r\n      });\r\n    }, Math.random() * 3000 + 2000); // 2-5 seconds\r\n\r\n    return { \r\n      success: true, \r\n      pageId, \r\n      message: `Started building ${request.type} page` \r\n    };\r\n  }\r\n\r\n  onEvent(listener: (event: any) => void) {\r\n    this.eventListeners.push(listener);\r\n    \r\n    // Send immediate status update to new listeners\r\n    setTimeout(() => {\r\n      listener({\r\n        type: 'service_status',\r\n        timestamp: new Date().toISOString(),\r\n        operational: true,\r\n        paused: this.isPaused,\r\n        pagesBuilt: this.pagesBuilt,\r\n        pagesInProgress: this.pagesInProgress\r\n      });\r\n    }, 100);\r\n    \r\n    return () => {\r\n      const index = this.eventListeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.eventListeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false;\r\n    if (this.buildInterval) clearInterval(this.buildInterval);\r\n    if (this.progressInterval) clearInterval(this.progressInterval);\r\n    console.log('üõë Autonomous agents stopped');\r\n  }\r\n\r\n  // Force restart the service\r\n  restart() {\r\n    console.log('üîÑ Restarting autonomous website builder service...');\r\n    this.stop();\r\n    this.isRunning = true;\r\n    this.isPaused = false;\r\n    this.startAutonomousBuilding();\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const websiteBuilderService = new MockWebsiteBuilderService();\r\n\r\n// Export types for use in components\r\nexport type { WebsiteBuilderStatus, WebsiteBuilderMetrics, BuildRequest };\r\n\r\n// Auto-start when module is imported\r\nconsole.log('üöÄ Trans Bot AI Website Builder Service loaded and ready!');\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\start-autonomous-system.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2496,2499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2496,2499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n\r\n/**\r\n * üöÄ Simplified Autonomous System Starter\r\n * Starts the autonomous TMS system with basic functionality\r\n */\r\n\r\nconsole.log('üöÄ Starting Autonomous TMS System...');\r\n\r\n// Simple autonomous system class\r\nclass SimpleAutonomousSystem {\r\n  private isRunning: boolean = false;\r\n  private healthCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    console.log('ü§ñ Simple Autonomous System initialized');\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      console.log('üöÄ Initializing Simple Autonomous System...');\r\n      \r\n      // Simulate initialization\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      console.log('‚úÖ Simple Autonomous System initialized successfully');\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Failed to initialize autonomous system:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      console.log('‚ö†Ô∏è Autonomous system is already running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = true;\r\n      console.log('ü§ñ Starting Simple Autonomous System...');\r\n      \r\n      // Start health monitoring\r\n      this.startHealthMonitoring();\r\n      \r\n      console.log('‚úÖ Simple Autonomous System started successfully');\r\n      console.log('üåê Managing portals and website');\r\n      console.log('ü§ñ 24/7 autonomous operation: ACTIVE');\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Failed to start autonomous system:', error);\r\n      this.isRunning = false;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      console.log('‚ö†Ô∏è Autonomous system is not running');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isRunning = false;\r\n      \r\n      // Stop health monitoring\r\n      if (this.healthCheckInterval) {\r\n        clearInterval(this.healthCheckInterval);\r\n        this.healthCheckInterval = null;\r\n      }\r\n      \r\n      console.log('üõë Simple Autonomous System stopped successfully');\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Failed to stop autonomous system:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private startHealthMonitoring(): void {\r\n    // Check system health every 30 seconds\r\n    this.healthCheckInterval = setInterval(() => {\r\n      if (this.isRunning) {\r\n        console.log('üíö System health check: OK');\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.isRunning;\r\n  }\r\n\r\n  getStatus(): any {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      timestamp: new Date().toISOString(),\r\n      status: 'operational'\r\n    };\r\n  }\r\n}\r\n\r\n// Main execution\r\nasync function main() {\r\n  const autonomousSystem = new SimpleAutonomousSystem();\r\n  \r\n  try {\r\n    // Handle graceful shutdown\r\n    process.on('SIGINT', async () => {\r\n      console.log('\\nüõë Received SIGINT - Shutting down gracefully...');\r\n      await autonomousSystem.stop();\r\n      process.exit(0);\r\n    });\r\n\r\n    process.on('SIGTERM', async () => {\r\n      console.log('\\nüõë Received SIGTERM - Shutting down gracefully...');\r\n      await autonomousSystem.stop();\r\n      process.exit(0);\r\n    });\r\n\r\n    // Initialize and start the system\r\n    await autonomousSystem.initialize();\r\n    await autonomousSystem.start();\r\n    \r\n    // Keep the process running\r\n    console.log('ü§ñ Simple Autonomous System is running...');\r\n    console.log('üåê Managing portals and website');\r\n    console.log('üö® Health monitoring: ACTIVE');\r\n    console.log('üìä Press Ctrl+C to stop gracefully');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Failed to start autonomous system:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Start the autonomous system\r\nmain().catch(console.error);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\test-agent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\test-autonomous-system-enhanced.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\test-autonomous-system.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":30,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":30,"endColumn":60}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive Autonomous TMS System Test\r\nimport { agent001 } from './agents/agent001';\r\n\r\n// Test Autonomous Agents\r\nconsole.log('ü§ñ Testing Autonomous Agents...');\r\nconsole.log('Agent001 Status:', agent001.status);\r\nconsole.log('Agent001 ID:', agent001.id);\r\nconsole.log('Agent001 Component Type:', agent001.componentType);\r\n\r\n// Test N8n Integration (if available)\r\nconsole.log('\\nüîÑ Testing N8n Integration...');\r\ntry {\r\n  // Check for N8n webhook endpoints\r\n  const n8nEndpoints = [\r\n    'http://localhost:5678/webhook/load-processing',\r\n    'http://localhost:5678/webhook/driver-assignment',\r\n    'http://localhost:5678/webhook/payment-processing'\r\n  ];\r\n  \r\n  console.log('N8n endpoints to test:', n8nEndpoints);\r\n  console.log('N8n integration status: Ready for configuration');\r\n} catch (error) {\r\n  console.log('N8n integration: Not yet configured');\r\n}\r\n\r\n// Test Supabase Integration\r\nconsole.log('\\nüóÑÔ∏è Testing Supabase Integration...');\r\ntry {\r\n  // Import Supabase client\r\n  const { createClient } = require('@supabase/supabase-js');\r\n  console.log('Supabase client: Available');\r\n  console.log('Supabase integration status: Ready for configuration');\r\n} catch (error) {\r\n  console.log('Supabase integration: Not yet configured');\r\n}\r\n\r\n// Test OpenAI Integration\r\nconsole.log('\\nüß† Testing OpenAI Integration...');\r\ntry {\r\n  // Check for OpenAI API configuration\r\n  const openAIEndpoints = [\r\n    'load-matching',\r\n    'route-optimization',\r\n    'customer-support',\r\n    'predictive-analytics'\r\n  ];\r\n  \r\n  console.log('OpenAI endpoints to test:', openAIEndpoints);\r\n  console.log('OpenAI integration status: Ready for configuration');\r\n} catch (error) {\r\n  console.log('OpenAI integration: Not yet configured');\r\n}\r\n\r\n// Test Autonomous Functions\r\nconsole.log('\\n‚ö° Testing Autonomous Functions...');\r\nconst autonomousFunctions = [\r\n  'load-management-automation',\r\n  'driver-assignment-optimization',\r\n  'route-planning-optimization',\r\n  'customer-service-automation',\r\n  'financial-processing',\r\n  'compliance-monitoring',\r\n  'performance-analytics'\r\n];\r\n\r\nconsole.log('Autonomous functions to implement:', autonomousFunctions);\r\nconsole.log('Autonomous system status: Ready for deployment');\r\n\r\n// Test 24/7 Operation Capabilities\r\nconsole.log('\\nüïê Testing 24/7 Operation Capabilities...');\r\nconst operationCapabilities = [\r\n  'self-monitoring',\r\n  'auto-recovery',\r\n  'load-balancing',\r\n  'backup-systems',\r\n  'security-monitoring'\r\n];\r\n\r\nconsole.log('24/7 operation capabilities:', operationCapabilities);\r\nconsole.log('24/7 operation status: Ready for implementation');\r\n\r\n// Summary\r\nconsole.log('\\nüìä AUTONOMOUS TMS SYSTEM TEST SUMMARY:');\r\nconsole.log('‚úÖ TypeScript compilation: Working');\r\nconsole.log('‚úÖ Build process: Working');\r\nconsole.log('‚úÖ Agent system: Basic structure ready');\r\nconsole.log('üîÑ N8n integration: Ready for configuration');\r\nconsole.log('üîÑ Supabase integration: Ready for configuration');\r\nconsole.log('üîÑ OpenAI integration: Ready for configuration');\r\nconsole.log('üîÑ 250+ autonomous functions: Ready for implementation');\r\nconsole.log('üîÑ 24/7 operation: Ready for implementation');\r\n\r\nconsole.log('\\nüéØ NEXT STEPS:');\r\nconsole.log('1. Configure N8n workflows for automation');\r\nconsole.log('2. Set up Supabase backend with RLS');\r\nconsole.log('3. Integrate OpenAI for intelligent decision-making');\r\nconsole.log('4. Implement 250+ autonomous agent functions');\r\nconsole.log('5. Deploy 24/7 monitoring and self-healing');\r\nconsole.log('6. Test end-to-end autonomous operation');\r\n\r\nexport { agent001 };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\ai-confidence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\alerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\autonomous-agents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\autonomous-tasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\crm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\feature-flags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\knowledge-base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\market-research.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\networks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\testing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\tms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\types\\user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\utils\\agentUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\src\\vite-env.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[385,388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[385,388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[649,652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[649,652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\r\n/// <reference types=\"react\" />\r\n/// <reference types=\"react-dom\" />\r\n\r\ninterface ImportMetaEnv {\r\n  readonly VITE_APP_TITLE: string\r\n  readonly VITE_TRACES_URL_TEMPLATE?: string\r\n}\r\n\r\ninterface ImportMeta {\r\n  readonly env: ImportMetaEnv\r\n}\r\n\r\n// Ensure global DOM types are available\r\ndeclare global {\r\n  interface Window {\r\n    [key: string]: any;\r\n  }\r\n  \r\n  namespace NodeJS {\r\n    interface ProcessEnv {\r\n      NODE_ENV: 'development' | 'production' | 'test'\r\n    }\r\n  }\r\n  \r\n  // Ensure JSX namespace is properly declared\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      [elemName: string]: any;\r\n    }\r\n  }\r\n}\r\n\r\nexport {}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\start-8080.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\_deprecated-portal-stub\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\_shared\\signing_v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\agent-runner\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[657,660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[657,660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1106,1109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1106,1109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1571,1574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1571,1574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2745,2748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2745,2748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3311,3314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3311,3314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4216,4219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4216,4219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { runEnsurePortal } from \"./lib/portalDev.ts\";\r\n\r\nconst supa = createClient(Deno.env.get(\"SUPABASE_URL\")!, Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!);\r\n\r\nfunction ghCtx() {\r\n  return {\r\n    token: Deno.env.get(\"GITHUB_TOKEN\")!,\r\n    owner: Deno.env.get(\"GITHUB_OWNER\")!,\r\n    repo: Deno.env.get(\"GITHUB_REPO\")!,\r\n    defaultBranch: Deno.env.get(\"GITHUB_DEFAULT_BRANCH\") ?? \"main\",\r\n  };\r\n}\r\n\r\n// Simple logging functions\r\nasync function agentInfo(companyId: string, taskId: string, message: string, meta?: any) {\r\n  console.log(`[INFO] ${companyId}/${taskId}: ${message}`, meta ? JSON.stringify(meta) : '');\r\n  try {\r\n    await supa.from(\"agent_logs\").insert({\r\n      company_id: companyId,\r\n      task_id: taskId,\r\n      level: \"info\",\r\n      message,\r\n      metadata: meta || {}\r\n    });\r\n  } catch (e) {\r\n    console.error(\"Failed to log agent info:\", e);\r\n  }\r\n}\r\n\r\nasync function agentError(companyId: string, taskId: string, message: string, meta?: any) {\r\n  console.error(`[ERROR] ${companyId}/${taskId}: ${message}`, meta ? JSON.stringify(meta) : '');\r\n  try {\r\n    await supa.from(\"agent_logs\").insert({\r\n      company_id: companyId,\r\n      task_id: taskId,\r\n      level: \"error\",\r\n      message,\r\n      metadata: meta || {}\r\n    });\r\n  } catch (e) {\r\n    console.error(\"Failed to log agent error:\", e);\r\n  }\r\n}\r\n\r\nasync function agentSlackError(params: { companyId: string; taskId: string; msg: string; meta?: any }) {\r\n  // Placeholder for Slack integration\r\n  console.error(`[SLACK] ${params.companyId}/${params.taskId}: ${params.msg}`, params.meta ? JSON.stringify(params.meta) : '');\r\n}\r\n\r\nserve(async (req) => {\r\n  try {\r\n    const { task_id } = await req.json();\r\n    const { data: task, error } = await supa.from(\"agent_tasks\").select(\"*\").eq(\"id\", task_id).single();\r\n    if (error || !task) return new Response(JSON.stringify({ error: \"Task not found\" }), { status: 404 });\r\n\r\n    const { company_id, fn_name, payload } = task;\r\n    await agentInfo(company_id, task_id, `Starting task: ${fn_name}`, { payload });\r\n\r\n    try {\r\n      const result = await dispatch(fn_name, payload);\r\n      await agentInfo(company_id, task_id, `Task completed: ${fn_name}`, { result });\r\n      await supa.from(\"agent_tasks\").update({ status: \"done\", result, updated_at: new Date().toISOString() }).eq(\"id\", task_id);\r\n      return new Response(JSON.stringify({ success: true, result }), { status: 200 });\r\n    } catch (err) {\r\n      const msg = err instanceof Error ? err.message : String(err);\r\n      await agentError(company_id, task_id, `Task failed: ${fn_name} - ${msg}`, { stack: (err as any)?.stack, fn_name, payload });\r\n      await agentSlackError({ companyId: company_id, taskId: task_id, msg: `Task failed: ${fn_name} - ${msg}`, meta: { fn_name, payload } });\r\n      await supa.from(\"agent_tasks\").update({ status: \"failed\", error: msg, updated_at: new Date().toISOString() }).eq(\"id\", task_id);\r\n      return new Response(JSON.stringify({ error: msg }), { status: 500 });\r\n    }\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: String(error) }), { status: 400 });\r\n  }\r\n});\r\n\r\nasync function dispatch(fn_name: string, payload: any) {\r\n  switch (fn_name) {\r\n    case \"rates.price_one\":\r\n      return await handleRatesPricing(payload);\r\n\r\n    // NEW: portal development agent action\r\n    case \"portal.ensure_portal\": {\r\n      // Guard by feature flag (fetch from DB or environment if you cache flags server-side)\r\n      // Minimal in-function guard: require env token present (prevents unsafe execution if not configured)\r\n      if (!Deno.env.get(\"GITHUB_TOKEN\")) throw new Error(\"GITHUB_TOKEN not configured\");\r\n      const ctx = { gh: ghCtx(), dryRun: !!payload?.dryRun, allowPaths: undefined as string[] | undefined };\r\n      return await runEnsurePortal(ctx, {\r\n        portalKey: payload?.portalKey,\r\n        openPR: payload?.openPR ?? true,\r\n        dryRun: payload?.dryRun ?? false,\r\n      });\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Unknown function: ${fn_name}`);\r\n  }\r\n}\r\n\r\nasync function handleRatesPricing(payload: any) {\r\n  return { price: 150.0, currency: \"USD\", input: payload };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\agent-runner\\lib\\github.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2301,2304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2301,2304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Minimal GitHub Content/PR API client for Deno Edge (ESM)\r\nconst GH_API = \"https://api.github.com\";\r\n\r\ntype GhCtx = {\r\n  token: string;\r\n  owner: string;\r\n  repo: string;\r\n  defaultBranch: string; // e.g. \"main\"\r\n};\r\n\r\nfunction headers(token: string) {\r\n  return {\r\n    \"Authorization\": `Bearer ${token}`,\r\n    \"Accept\": \"application/vnd.github+json\",\r\n    \"Content-Type\": \"application/json\",\r\n    \"X-GitHub-Api-Version\": \"2022-11-28\",\r\n  };\r\n}\r\n\r\nexport async function getFile(ctx: GhCtx, path: string, ref?: string) {\r\n  const url = `${GH_API}/repos/${ctx.owner}/${ctx.repo}/contents/${encodeURIComponent(path)}${ref ? `?ref=${ref}` : \"\"}`;\r\n  const res = await fetch(url, { headers: headers(ctx.token) });\r\n  if (res.status === 404) return null;\r\n  if (!res.ok) throw new Error(`GitHub getFile failed ${res.status}: ${await res.text()}`);\r\n  return await res.json(); // { content, sha, ... } or array\r\n}\r\n\r\nasync function getBranchSha(ctx: GhCtx, branch: string) {\r\n  const url = `${GH_API}/repos/${ctx.owner}/${ctx.repo}/git/ref/heads/${branch}`;\r\n  const r = await fetch(url, { headers: headers(ctx.token) });\r\n  if (r.status === 404) return null;\r\n  if (!r.ok) throw new Error(`getBranchSha failed ${r.status}: ${await r.text()}`);\r\n  const j = await r.json();\r\n  return j.object?.sha as string | null;\r\n}\r\n\r\nexport async function ensureBranch(ctx: GhCtx, branch: string) {\r\n  const baseSha = await getBranchSha(ctx, branch);\r\n  if (baseSha) return branch;\r\n  const mainSha = await getBranchSha(ctx, ctx.defaultBranch);\r\n  if (!mainSha) throw new Error(`Default branch not found: ${ctx.defaultBranch}`);\r\n  const url = `${GH_API}/repos/${ctx.owner}/${ctx.repo}/git/refs`;\r\n  const res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headers(ctx.token),\r\n    body: JSON.stringify({ ref: `refs/heads/${branch}`, sha: mainSha }),\r\n  });\r\n  if (!res.ok) throw new Error(`ensureBranch failed ${res.status}: ${await res.text()}`);\r\n  return branch;\r\n}\r\n\r\nexport async function upsertFile(ctx: GhCtx, path: string, content: string, message: string, branch: string) {\r\n  const existing = await getFile(ctx, path, branch);\r\n  const b64 = btoa(unescape(encodeURIComponent(content)));\r\n  const url = `${GH_API}/repos/${ctx.owner}/${ctx.repo}/contents/${encodeURIComponent(path)}`;\r\n  const body: any = { message, content: b64, branch };\r\n  if (existing?.sha) body.sha = existing.sha;\r\n  const res = await fetch(url, { method: \"PUT\", headers: headers(ctx.token), body: JSON.stringify(body) });\r\n  if (!res.ok) throw new Error(`upsertFile failed ${res.status}: ${await res.text()}`);\r\n  return await res.json();\r\n}\r\n\r\nexport async function openPullRequest(ctx: GhCtx, params: { branch: string; title: string; body?: string; base?: string }) {\r\n  const base = params.base ?? ctx.defaultBranch;\r\n  const url = `${GH_API}/repos/${ctx.owner}/${ctx.repo}/pulls`;\r\n  const res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headers(ctx.token),\r\n    body: JSON.stringify({ head: params.branch, base, title: params.title, body: params.body ?? \"\" }),\r\n  });\r\n  if (!res.ok) throw new Error(`openPullRequest failed ${res.status}: ${await res.text()}`);\r\n  return await res.json();\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\agent-runner\\lib\\portalDev.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5436,5439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5436,5439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { upsertFile, ensureBranch, openPullRequest, getFile } from \"./github.ts\";\r\n\r\ntype Ctx = {\r\n  gh: {\r\n    token: string;\r\n    owner: string;\r\n    repo: string;\r\n    defaultBranch: string;\r\n  };\r\n  dryRun?: boolean;\r\n  allowPaths?: string[]; // safety allowlist (prefixes)\r\n};\r\n\r\nconst ALLOW = [\r\n  \"src/pages/\",\r\n  \"src/portals/registry.ts\",\r\n  \"src/pages/_scaffold/PortalScaffold.tsx\",\r\n];\r\n\r\nfunction assertAllowed(path: string, allow: string[]) {\r\n  if (!allow.some(p => path.startsWith(p))) throw new Error(`Blocked path: ${path}`);\r\n}\r\n\r\nfunction niceTitle(key: string) {\r\n  const map: Record<string,string> = {\r\n    superAdmin:\"Super Admin\", admin:\"Admin\", tmsAdmin:\"TMS Admin\", onboarding:\"Onboarding\",\r\n    broker:\"Broker\", shipper:\"Shipper\", carrier:\"Carrier\", driver:\"Driver\",\r\n    ownerOperator:\"Owner Operator\", factoring:\"Factoring\", loadBoard:\"Load Board\",\r\n    crm:\"CRM\", financials:\"Financials\", edi:\"EDI\", marketplace:\"Marketplace\",\r\n    analytics:\"Analytics\", autonomous:\"Autonomous AI\", workers:\"Workers\",\r\n    rates:\"Rates\", directory:\"Directory\",\r\n  };\r\n  return map[key] ?? key;\r\n}\r\n\r\nfunction scaffoldTSX(title: string) {\r\n  return `import React from \"react\";\r\n\r\nexport default function ${title.replace(/\\s+/g,\"\")}Portal() {\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto p-6\">\r\n      <h1 className=\"text-2xl font-semibold mb-2\">${title}</h1>\r\n      <p className=\"text-muted-foreground\">This portal is provisioned and protected. Build out features here.</p>\r\n    </div>\r\n  );\r\n}\r\n`;\r\n}\r\n\r\nasync function ensureScaffold(ctx: Ctx, portalKey: string) {\r\n  const title = niceTitle(portalKey);\r\n  const pagePath = `src/pages/${portalKey}/index.tsx`;\r\n  assertAllowed(pagePath, ctx.allowPaths ?? ALLOW);\r\n  if (ctx.dryRun) return { pagePath, created: true, dryRun: true };\r\n\r\n  await upsertFile(ctx.gh, pagePath, scaffoldTSX(title), `feat(portal): scaffold ${portalKey} portal`);\r\n  return { pagePath, created: true };\r\n}\r\n\r\nfunction registryInsertSnippet(portalKey: string) {\r\n  // Matches your registry interface & feature flags\r\n  const title = niceTitle(portalKey);\r\n  const featureFlag = `portal.${portalKey === \"ownerOperator\" ? \"ownerOperator\" : portalKey}.enabled`;\r\n  // Reasonable default roles ‚Äì adjust as needed\r\n  const roles: Record<string,string[]> = {\r\n    superAdmin:[\"super_admin\"], admin:[\"owner\",\"admin\"], tmsAdmin:[\"owner\",\"admin\"], onboarding:[\"owner\",\"admin\",\"manager\"],\r\n    broker:[\"broker_admin\",\"broker_user\",\"owner\",\"admin\"], shipper:[\"shipper_admin\",\"shipper_user\",\"owner\",\"admin\"],\r\n    carrier:[\"carrier_admin\",\"carrier_user\",\"owner\",\"admin\"], driver:[\"driver\",\"carrier_admin\",\"owner\",\"admin\"],\r\n    ownerOperator:[\"owner_operator\",\"owner\",\"admin\"], factoring:[\"finance_admin\",\"owner\",\"admin\"],\r\n    loadBoard:[\"broker_admin\",\"carrier_user\",\"owner\",\"admin\"], crm:[\"sales\",\"manager\",\"owner\",\"admin\"],\r\n    financials:[\"finance_admin\",\"owner\",\"admin\"], edi:[\"edi_admin\",\"owner\",\"admin\"], marketplace:[\"owner\",\"admin\",\"manager\"],\r\n    analytics:[\"owner\",\"admin\",\"manager\",\"analyst\"], autonomous:[\"owner\",\"admin\",\"sre\"], workers:[\"ops\",\"owner\",\"admin\"],\r\n    rates:[\"pricing\",\"broker_admin\",\"owner\",\"admin\"], directory:[\"owner\",\"admin\",\"manager\",\"ops\"],\r\n  };\r\n  const path = portalKey === \"ownerOperator\" ? \"/owner-operator\"\r\n            : portalKey === \"loadBoard\"     ? \"/load-board\"\r\n            : `/${portalKey.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase())}`;\r\n  const rolesArr = JSON.stringify(roles[portalKey] ?? [\"owner\",\"admin\"]);\r\n  return `  { key:\"${portalKey}\", title:\"${title}\", path:\"${path}\", featureFlag:\"${featureFlag}\", roles:${rolesArr} },`;\r\n}\r\n\r\nfunction patchRegistryContent(src: string, portalKey: string) {\r\n  if (src.includes(`key:\"${portalKey}\"`) || src.includes(`key: \"${portalKey}\"`)) {\r\n    return { content: src, changed: false };\r\n  }\r\n  // Insert before the closing array bracket of PORTALS\r\n  const marker = /export const PORTALS:\\s*PortalDef\\[\\]\\s*=\\s*\\[/;\r\n  const start = src.search(marker);\r\n  if (start === -1) throw new Error(\"PORTALS array not found in registry.ts\");\r\n  const closeIdx = src.lastIndexOf(\"]\");\r\n  const before = src.slice(0, closeIdx);\r\n  const after = src.slice(closeIdx);\r\n  const insertion = registryInsertSnippet(portalKey);\r\n  const content = `${before}\\n${insertion}\\n${after}`;\r\n  return { content, changed: true };\r\n}\r\n\r\nasync function ensureRegistry(ctx: Ctx, branch: string, portalKey: string) {\r\n  const regPath = \"src/portals/registry.ts\";\r\n  assertAllowed(regPath, ctx.allowPaths ?? ALLOW);\r\n\r\n  const file = await getFile(ctx.gh, regPath, branch);\r\n  if (!file || !file.content) throw new Error(\"registry.ts not found or unreadable\");\r\n  const raw = decodeURIComponent(escape(atob(file.content)));\r\n  const patched = patchRegistryContent(raw, portalKey);\r\n  if (!patched.changed) return { updated: false };\r\n\r\n  if (ctx.dryRun) return { updated: true, dryRun: true };\r\n\r\n  await upsertFile(ctx.gh, regPath, patched.content, `feat(portal): register ${portalKey} in registry`, branch);\r\n  return { updated: true };\r\n}\r\n\r\nexport async function runEnsurePortal(ctx: Ctx, args: { portalKey: string; openPR?: boolean; dryRun?: boolean }) {\r\n  const portalKey = args.portalKey;\r\n  const branch = await ensureBranch(ctx.gh, `autobot/portal-${portalKey}-${new Date().toISOString().slice(0,10)}`);\r\n  const s1 = await ensureScaffold(ctx, portalKey);\r\n  const s2 = await ensureRegistry(ctx, branch, portalKey);\r\n  let pr: any = null;\r\n\r\n  if (!ctx.dryRun && (args.openPR ?? true)) {\r\n    pr = await openPullRequest(ctx.gh, {\r\n      branch,\r\n      title: `feat(portal): provision ${portalKey} portal (scaffold + registry)`,\r\n      body: `Adds scaffold page and registers **${portalKey}** in \\`src/portals/registry.ts\\`.\\n\\n- Safe, idempotent\\n- Guarded by feature flags + role gates\\n- Generated by Portal Dev Agent`,\r\n    });\r\n  }\r\n\r\n  return { branch, scaffold: s1, registry: s2, pr };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\autonomous-ai\\financial-takeover.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\autonomous-ai\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\autonomous-intelligence\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\coding-assistant\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\create-checkout-session\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\dlq-admin\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\dlq-replay\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":518,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16533,16536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16533,16536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":611,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":611,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19543,19546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19543,19546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\r\nimport { createHmac } from 'crypto';\r\nimport { verifySignedRequest } from \"../_shared/signing_v2.ts\";\r\n\r\nconst supabase = createClient(\r\n  Deno.env.get('SUPABASE_URL')!,\r\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\r\n);\r\n\r\ninterface DLQItem {\r\n  id: string;\r\n  original_task_id: string;\r\n  company_id: string;\r\n  agent_name: string;\r\n  error_type: string;\r\n  error_message: string;\r\n  retry_count: number;\r\n  max_retries: number;\r\n  retry_after: string;\r\n  priority: number;\r\n}\r\n\r\ninterface ReplayRequest {\r\n  dlq_ids?: string[];\r\n  company_id?: string;\r\n  error_type?: string;\r\n  force?: boolean;\r\n  max?: number;\r\n  idempotency_key?: string;\r\n  dry_run?: boolean;\r\n}\r\n\r\ninterface ReplayRun {\r\n  id: string;\r\n  idempotency_key: string;\r\n  company_id: string;\r\n  requested_at: string;\r\n  actor: string;\r\n  payload_hash: string;\r\n  status: 'pending' | 'completed' | 'failed';\r\n  total_processed: number;\r\n  successful: number;\r\n  failed: number;\r\n}\r\n\r\nDeno.serve(async (req) => {\r\n  try {\r\n    // PR-102: Timestamped request signing verification\r\n    const v = await verifySignedRequest(req, {\r\n      requireFlag: \"security.signingV2Required\",   // flip ON via flags to hard-enforce\r\n      companyIdHeader: \"x-transbot-company\",\r\n    });\r\n    if (!v.ok) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Request signing verification failed', \r\n        reason: v.reason \r\n      }), { \r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Use parsed body from verification\r\n    const { dlq_ids, company_id, error_type, force = false, max = 50, idempotency_key, dry_run = false }: ReplayRequest = v.parsed as ReplayRequest || {};\r\n\r\n    // 1. AUTHZ GUARD (legacy HMAC/JWT fallback for backward compatibility)\r\n    const authResult = await validateAuthorization(req);\r\n    if (!authResult.authorized) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), { \r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // 2. RATE LIMIT & BUDGET\r\n    const rateLimitResult = await checkRateLimit(authResult.actor, company_id, req.headers.get('x-forwarded-for') || 'unknown');\r\n    if (!rateLimitResult.allowed) {\r\n      return new Response(JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        retry_after: rateLimitResult.retry_after\r\n      }), {\r\n        status: 429,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Retry-After': rateLimitResult.retry_after.toString()\r\n        }\r\n      });\r\n    }\r\n\r\n    // 2.5. REPLAY BUDGET CHECK (if feature flag enabled)\r\n    if (company_id && company_id !== 'all') {\r\n      const { data: budgetEnabled } = await supabase\r\n        .rpc('is_feature_enabled', { feature_key: 'dlq.replay.budget_control', target_company_id: company_id });\r\n      \r\n      if (budgetEnabled) {\r\n        const { data: budgetAvailable } = await supabase\r\n          .rpc('check_replay_budget', { target_company_id: company_id });\r\n        \r\n        if (!budgetAvailable) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Replay budget exceeded for today/month',\r\n            message: 'Daily or monthly replay limit reached'\r\n          }), {\r\n            status: 429,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // 3. REPLAY IDEMPOTENCY\r\n    if (idempotency_key) {\r\n      const existingRun = await checkReplayIdempotency(idempotency_key, company_id);\r\n      if (existingRun) {\r\n        return new Response(JSON.stringify({\r\n          message: 'Replay already processed',\r\n          replay_run: existingRun\r\n        }), { \r\n          status: 200,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create replay run record\r\n    const replayRunId = await createReplayRun({\r\n      idempotency_key: idempotency_key || `replay-${Date.now()}`,\r\n      company_id: company_id || 'all',\r\n      requested_at: new Date().toISOString(),\r\n      actor: authResult.actor,\r\n      payload_hash: await hashPayload({ dlq_ids, company_id, error_type, force, max })\r\n    });\r\n\r\n    // Build query for retryable DLQ items\r\n    let query = supabase\r\n      .from('dead_letter_queue')\r\n      .select('*')\r\n      .lte('retry_after', new Date().toISOString())\r\n      .lt('retry_count', 'max_retries');\r\n    \r\n    if (dlq_ids && dlq_ids.length > 0) {\r\n      query = query.in('id', dlq_ids);\r\n    } else if (company_id) {\r\n      query = query.eq('company_id', company_id);\r\n    } else if (error_type) {\r\n      query = query.eq('error_type', error_type);\r\n    }\r\n    \r\n    if (!force) {\r\n      query = query.lte('retry_after', new Date().toISOString());\r\n    }\r\n    \r\n    const { data: dlqItems, error } = await query.order('priority', { ascending: true }).limit(max);\r\n    \r\n    if (error) {\r\n      console.error('Failed to fetch DLQ items:', error);\r\n      await updateReplayRun(replayRunId, 'failed', 0, 0, 0);\r\n      return new Response(JSON.stringify({ error: 'Database error' }), { \r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    if (!dlqItems || dlqItems.length === 0) {\r\n      await updateReplayRun(replayRunId, 'completed', 0, 0, 0);\r\n      return new Response(JSON.stringify({ \r\n        message: 'No retryable DLQ items found',\r\n        count: 0,\r\n        replay_run_id: replayRunId\r\n      }), { \r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // 4. SAFETY RAILS\r\n    const totalBytes = JSON.stringify(dlqItems).length;\r\n    if (totalBytes > 2 * 1024 * 1024) { // 2MB limit\r\n      await updateReplayRun(replayRunId, 'failed', 0, 0, 0);\r\n      return new Response(JSON.stringify({ error: 'Payload too large (max 2MB)' }), { \r\n        status: 413,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    if (dry_run) {\r\n      await updateReplayRun(replayRunId, 'completed', dlqItems.length, 0, 0);\r\n      return new Response(JSON.stringify({\r\n        message: 'Dry run completed',\r\n        items_found: dlqItems.length,\r\n        replay_run_id: replayRunId,\r\n        preview: dlqItems.slice(0, 5).map(item => ({\r\n          id: item.id,\r\n          company_id: item.company_id,\r\n          error_type: item.error_type,\r\n          retry_count: item.retry_count\r\n        }))\r\n      }), { \r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const results = [];\r\n    let successCount = 0;\r\n    let failureCount = 0;\r\n    let immediateFailCount = 0;\r\n    \r\n    for (const item of dlqItems) {\r\n      try {\r\n        // Attempt to retry the original task\r\n        const retryResult = await retryTask(item);\r\n        \r\n        if (retryResult.success) {\r\n          // Mark DLQ item as resolved\r\n          await supabase\r\n            .from('dead_letter_queue')\r\n            .update({ \r\n              retry_count: item.retry_count + 1,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', item.id);\r\n          \r\n          successCount++;\r\n          results.push({\r\n            dlq_id: item.id,\r\n            original_task_id: item.original_task_id,\r\n            status: 'retried_successfully',\r\n            message: 'Task retried and completed successfully'\r\n          });\r\n        } else {\r\n          // Update retry count and set next retry time\r\n          const nextRetryAt = calculateNextRetry(item.retry_count + 1);\r\n          await supabase\r\n            .from('dead_letter_queue')\r\n            .update({ \r\n              retry_count: item.retry_count + 1,\r\n              retry_after: nextRetryAt,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', item.id);\r\n          \r\n          failureCount++;\r\n          immediateFailCount++;\r\n          results.push({\r\n            dlq_id: item.id,\r\n            original_task_id: item.original_task_id,\r\n            status: 'retry_failed',\r\n            message: retryResult.error,\r\n            next_retry_at: nextRetryAt\r\n          });\r\n        }\r\n\r\n        // Safety rail: stop if >20% immediate fails\r\n        if (immediateFailCount > dlqItems.length * 0.2) {\r\n          console.warn(`Stopping replay due to high failure rate: ${immediateFailCount}/${dlqItems.length}`);\r\n          break;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to retry DLQ item ${item.id}:`, error);\r\n        failureCount++;\r\n        immediateFailCount++;\r\n        results.push({\r\n          dlq_id: item.id,\r\n          original_task_id: item.original_task_id,\r\n          status: 'retry_error',\r\n          message: error.message\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Update replay run with final results\r\n    await updateReplayRun(replayRunId, 'completed', dlqItems.length, successCount, failureCount);\r\n\r\n    // Increment replay budget if successful\r\n    if (company_id && company_id !== 'all' && successCount > 0) {\r\n      await supabase.rpc('increment_replay_budget', { target_company_id: company_id });\r\n    }\r\n\r\n    // Write audit log\r\n    await writeAuditLog({\r\n      actor: authResult.actor,\r\n      action: 'dlq_replay',\r\n      scope: company_id || 'all',\r\n      target_count: dlqItems.length,\r\n      success_count: successCount,\r\n      failure_count: failureCount,\r\n      replay_run_id: replayRunId\r\n    });\r\n\r\n    // Send Slack notification if configured\r\n    if (Deno.env.get('SLACK_WEBHOOK_URL')) {\r\n      await sendSlackNotification({\r\n        text: `DLQ Replay Complete: ${successCount} successful, ${failureCount} failed`,\r\n        attachments: [{\r\n          fields: [\r\n            { title: 'Success Count', value: successCount.toString(), short: true },\r\n            { title: 'Failure Count', value: failureCount.toString(), short: true },\r\n            { title: 'Total Processed', value: dlqItems.length.toString(), short: true },\r\n            { title: 'Actor', value: authResult.actor, short: true },\r\n            { title: 'Replay Run ID', value: replayRunId, short: true }\r\n          ]\r\n        }]\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      message: 'DLQ replay completed',\r\n      summary: {\r\n        total_processed: dlqItems.length,\r\n        successful: successCount,\r\n        failed: failureCount\r\n      },\r\n      replay_run_id: replayRunId,\r\n      results\r\n    }), { \r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('DLQ replay error:', error);\r\n    return new Response(JSON.stringify({ error: error.message }), { \r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// AUTHZ GUARD: Validate HMAC signature or JWT\r\nasync function validateAuthorization(req: Request): Promise<{ authorized: boolean; actor: string }> {\r\n  const signature = req.headers.get('x-transbot-signature');\r\n  const authHeader = req.headers.get('authorization');\r\n  \r\n  // Option 1: HMAC signature validation\r\n  if (signature) {\r\n    const body = await req.clone().text();\r\n    const expectedSignature = createHmac('sha256', Deno.env.get('DLQ_REPLAY_SECRET') || 'default-secret')\r\n      .update(body)\r\n      .digest('hex');\r\n    \r\n    if (signature === expectedSignature) {\r\n      return { authorized: true, actor: 'hmac-authenticated' };\r\n    }\r\n  }\r\n  \r\n  // Option 2: JWT validation for super-admin or tenant admin\r\n  if (authHeader && authHeader.startsWith('Bearer ')) {\r\n    const token = authHeader.substring(7);\r\n    try {\r\n      const { data: { user }, error } = await supabase.auth.getUser(token);\r\n      if (error || !user) {\r\n        return { authorized: false, actor: 'unknown' };\r\n      }\r\n      \r\n      // Check if user is super admin\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('role')\r\n        .eq('id', user.id)\r\n        .single();\r\n      \r\n      if (profile?.role === 'super_admin') {\r\n        return { authorized: true, actor: `super_admin:${user.id}` };\r\n      }\r\n      \r\n      // For tenant-specific replays, check if user is company admin\r\n      const body = await req.clone().json();\r\n      if (body.company_id) {\r\n        const isAdmin = await checkCompanyAdmin(user.id, body.company_id);\r\n        if (isAdmin) {\r\n          return { authorized: true, actor: `company_admin:${user.id}` };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('JWT validation error:', error);\r\n    }\r\n  }\r\n  \r\n  return { authorized: false, actor: 'unknown' };\r\n}\r\n\r\n// RATE LIMIT: Check edge rate limits\r\nasync function checkRateLimit(actor: string, company_id: string, ip: string): Promise<{ allowed: boolean; retry_after: number }> {\r\n  const key = `replay:${company_id}:${ip}`;\r\n  const now = Date.now();\r\n  const windowMs = 5 * 60 * 1000; // 5 minutes\r\n  const maxRequests = 3;\r\n  \r\n  try {\r\n    // Get current rate limit state\r\n    const { data: rateLimit } = await supabase\r\n      .from('edge_rate_limits')\r\n      .select('*')\r\n      .eq('key', key)\r\n      .single();\r\n    \r\n    if (!rateLimit) {\r\n      // First request\r\n      await supabase\r\n        .from('edge_rate_limits')\r\n        .insert({\r\n          key,\r\n          requests: 1,\r\n          window_start: new Date(now).toISOString(),\r\n          window_end: new Date(now + windowMs).toISOString()\r\n        });\r\n      return { allowed: true, retry_after: 0 };\r\n    }\r\n    \r\n    // Check if window has expired\r\n    if (new Date(rateLimit.window_end).getTime() < now) {\r\n      // Reset window\r\n      await supabase\r\n        .from('edge_rate_limits')\r\n        .update({\r\n          requests: 1,\r\n          window_start: new Date(now).toISOString(),\r\n          window_end: new Date(now + windowMs).toISOString()\r\n        })\r\n        .eq('key', key);\r\n      return { allowed: true, retry_after: 0 };\r\n    }\r\n    \r\n    // Check if limit exceeded\r\n    if (rateLimit.requests >= maxRequests) {\r\n      const retryAfter = Math.ceil((new Date(rateLimit.window_end).getTime() - now) / 1000);\r\n      return { allowed: false, retry_after: retryAfter };\r\n    }\r\n    \r\n    // Increment request count\r\n    await supabase\r\n      .from('edge_rate_limits')\r\n      .update({ requests: rateLimit.requests + 1 })\r\n      .eq('key', key);\r\n    \r\n    return { allowed: true, retry_after: 0 };\r\n  } catch (error) {\r\n    console.error('Rate limit check error:', error);\r\n    // Fail open if rate limiting fails\r\n    return { allowed: true, retry_after: 0 };\r\n  }\r\n}\r\n\r\n// REPLAY IDEMPOTENCY: Check for existing replay runs\r\nasync function checkReplayIdempotency(idempotency_key: string, company_id: string): Promise<ReplayRun | null> {\r\n  try {\r\n    const { data: existingRun } = await supabase\r\n      .from('replay_runs')\r\n      .select('*')\r\n      .eq('idempotency_key', idempotency_key)\r\n      .eq('company_id', company_id)\r\n      .single();\r\n    \r\n    return existingRun;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Create replay run record\r\nasync function createReplayRun(run: Omit<ReplayRun, 'id' | 'status' | 'total_processed' | 'successful' | 'failed'>): Promise<string> {\r\n  const { data, error } = await supabase\r\n    .from('replay_runs')\r\n    .insert({\r\n      ...run,\r\n      status: 'pending',\r\n      total_processed: 0,\r\n      successful: 0,\r\n      failed: 0\r\n    })\r\n    .select('id')\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data.id;\r\n}\r\n\r\n// Update replay run with results\r\nasync function updateReplayRun(id: string, status: string, total: number, successful: number, failed: number): Promise<void> {\r\n  await supabase\r\n    .from('replay_runs')\r\n    .update({\r\n      status,\r\n      total_processed: total,\r\n      successful,\r\n      failed,\r\n      completed_at: new Date().toISOString()\r\n    })\r\n    .eq('id', id);\r\n}\r\n\r\n// Write audit log\r\nasync function writeAuditLog(log: {\r\n  actor: string;\r\n  action: string;\r\n  scope: string;\r\n  target_count: number;\r\n  success_count: number;\r\n  failure_count: number;\r\n  replay_run_id: string;\r\n}): Promise<void> {\r\n  await supabase\r\n    .from('audit_logs')\r\n    .insert({\r\n      actor: log.actor,\r\n      action: log.action,\r\n      scope: log.scope,\r\n      target_count: log.target_count,\r\n      success_count: log.success_count,\r\n      failure_count: log.failure_count,\r\n      metadata: { replay_run_id: log.replay_run_id },\r\n      created_at: new Date().toISOString()\r\n    });\r\n}\r\n\r\n// Hash payload for idempotency\r\nasync function hashPayload(payload: any): Promise<string> {\r\n  const payloadStr = JSON.stringify(payload);\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(payloadStr);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n// Check if user is company admin\r\nasync function checkCompanyAdmin(userId: string, companyId: string): Promise<boolean> {\r\n  try {\r\n    const { data: membership } = await supabase\r\n      .from('company_memberships')\r\n      .select('role')\r\n      .eq('user_id', userId)\r\n      .eq('company_id', companyId)\r\n      .single();\r\n    \r\n    return membership?.role === 'admin';\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function retryTask(dlqItem: DLQItem): Promise<{ success: boolean; error?: string }> {\r\n  try {\r\n    // Get the original task details\r\n    const { data: originalTask, error: taskError } = await supabase\r\n      .from('agent_tasks')\r\n      .select('*')\r\n      .eq('id', dlqItem.original_task_id)\r\n      .single();\r\n    \r\n    if (taskError || !originalTask) {\r\n      return { success: false, error: 'Original task not found' };\r\n    }\r\n    \r\n    // Check if company is paused\r\n    const { data: controls } = await supabase\r\n      .from('agent_controls')\r\n      .select('agents_paused, agents_drain')\r\n      .eq('company_id', dlqItem.company_id)\r\n      .single();\r\n    \r\n    if (controls?.agents_paused) {\r\n      return { success: false, error: 'Company agents are paused' };\r\n    }\r\n    \r\n    // Retry the task by calling the agent-runner\r\n    const n8nBaseUrl = Deno.env.get('N8N_BASE_URL');\r\n    const n8nApiKey = Deno.env.get('N8N_API_KEY');\r\n    \r\n    if (!n8nBaseUrl || !n8nApiKey) {\r\n      return { success: false, error: 'N8N configuration missing' };\r\n    }\r\n    \r\n    const response = await fetch(`${n8nBaseUrl}/webhook/agent-runner`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${n8nApiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        task_id: originalTask.id,\r\n        company_id: originalTask.company_id,\r\n        agent_name: originalTask.agent_name,\r\n        payload: originalTask.payload,\r\n        is_retry: true,\r\n        dlq_item_id: dlqItem.id\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      return { success: false, error: `N8N request failed: ${errorText}` };\r\n    }\r\n    \r\n    return { success: true };\r\n    \r\n  } catch (error) {\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n\r\nfunction calculateNextRetry(retryCount: number): string {\r\n  // Exponential backoff: 1min, 2min, 4min, 8min, 16min\r\n  const backoffMinutes = Math.min(Math.pow(2, retryCount - 1), 16);\r\n  const nextRetry = new Date();\r\n  nextRetry.setMinutes(nextRetry.getMinutes() + backoffMinutes);\r\n  return nextRetry.toISOString();\r\n}\r\n\r\nasync function sendSlackNotification(message: any): Promise<void> {\r\n  try {\r\n    const webhookUrl = Deno.env.get('SLACK_WEBHOOK_URL');\r\n    if (!webhookUrl) return;\r\n    \r\n    await fetch(webhookUrl, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(message)\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to send Slack notification:', error);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\n8n-integration\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\n8n-webhook\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\realtime-agent-updates\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\roi-summary\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\n\r\nfunction html({ company, calc }: any) {\r\n  return `<!doctype html><meta charset=\"utf-8\" />\r\n    <style>body{font-family:ui-sans-serif,system-ui;max-width:720px;margin:24px auto;padding:16px;line-height:1.5}\r\n    h1{font-size:20px} .kpi{display:inline-block;margin-right:24px}</style>\r\n    <h1>Trans Bot AI ‚Äî ROI Summary for ${company}</h1>\r\n    <p><b>Monthly Impact:</b> $${Math.round(calc.monthlyImpact).toLocaleString()}</p>\r\n    <div class=\"kpi\"><b>Added GP:</b> $${Math.round(calc.incrGP).toLocaleString()}</div>\r\n    <div class=\"kpi\"><b>Time Saved:</b> ${calc.hrsSaved.toFixed(1)} hrs</div>\r\n    <div class=\"kpi\"><b>Payback:</b> ${calc.paybackDays ? `${calc.paybackDays} days` : \"‚Äî\"}</div>\r\n    <p>*Estimates are illustrative; actuals vary by lane/seasonality.</p>`;\r\n}\r\n\r\nserve(async (req) => {\r\n  try {\r\n    const payload = await req.json(); // { id, company_name, calc }\r\n    const supa = createClient(Deno.env.get(\"SUPABASE_URL\")!, Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!);\r\n    \r\n    const bytes = new TextEncoder().encode(html({ company: payload.company_name, calc: payload.calc }));\r\n    const path = `roi/${payload.id}.html`;\r\n    \r\n    const { error } = await supa.storage.from(\"public\").upload(path, bytes, { \r\n      contentType: \"text/html\", \r\n      upsert: true \r\n    });\r\n    \r\n    if (error) throw error;\r\n    \r\n    const { data } = supa.storage.from(\"public\").getPublicUrl(path);\r\n    return new Response(JSON.stringify({ url: data.publicUrl }), { \r\n      status: 200, \r\n      headers: { \"Content-Type\": \"application/json\" } \r\n    });\r\n  } catch (e) {\r\n    return new Response(JSON.stringify({ error: String(e) }), { status: 400 });\r\n  }\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\supabase\\functions\\test-openai-autonomous\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-autonomous-agents.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-autonomous-builder.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-autonomous-simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-edge-functions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-n8n-webhook-enhanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-n8n-webhook.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-openai-api.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-openai-supabase.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-portal-integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-service-direct.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Cannot use keyword 'await' outside an async function","line":61,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Direct test of the website builder service\r\nimport { websiteBuilderService } from './src/services/websiteBuilderService.ts';\r\n\r\nconsole.log('ü§ñ Direct Test of Trans Bot AI Website Builder Service...\\n');\r\n\r\nasync function testService() {\r\n  try {\r\n    console.log('üìä Testing service initialization...');\r\n    \r\n    // Test 1: Get status\r\n    console.log('\\n1Ô∏è‚É£ Getting status...');\r\n    const status = await websiteBuilderService.getStatus();\r\n    console.log('‚úÖ Status received:', {\r\n      operational: status.operational,\r\n      paused: status.paused,\r\n      pagesBuilt: status.pagesBuilt,\r\n      pagesInProgress: status.pagesInProgress,\r\n      avgBuildMs: status.avgBuildMs,\r\n      avgSeoScore: status.avgSeoScore\r\n    });\r\n\r\n    // Test 2: Get metrics\r\n    console.log('\\n2Ô∏è‚É£ Getting metrics...');\r\n    const metrics = await websiteBuilderService.getMetrics();\r\n    console.log('‚úÖ Metrics received:', {\r\n      pagesBuilt: metrics.pagesBuilt,\r\n      pagesInProgress: metrics.pagesInProgress,\r\n      avgBuildMs: metrics.avgBuildMs,\r\n      avgSeoScore: metrics.avgSeoScore,\r\n      totalWords: metrics.totalWords,\r\n      totalImages: metrics.totalImages,\r\n      eventsLast60s: metrics.eventsLast60s\r\n    });\r\n\r\n    // Test 3: Build a page\r\n    console.log('\\n3Ô∏è‚É£ Building a test page...');\r\n    const buildResult = await websiteBuilderService.buildPage({\r\n      type: 'home',\r\n      priority: 5,\r\n      seed: 'test-direct-001'\r\n    });\r\n    console.log('‚úÖ Build result:', buildResult);\r\n\r\n    // Test 4: Listen for events\r\n    console.log('\\n4Ô∏è‚É£ Setting up event listener...');\r\n    let eventCount = 0;\r\n    const unsubscribe = websiteBuilderService.onEvent((event) => {\r\n      eventCount++;\r\n      console.log(`üì° Event ${eventCount}:`, {\r\n        type: event.type,\r\n        pageType: event.pageType || 'N/A',\r\n        timestamp: event.timestamp\r\n      });\r\n      \r\n      if (eventCount >= 5) {\r\n        console.log('\\n‚úÖ Event system working! Unsubscribing...');\r\n        unsubscribe();\r\n        \r\n        // Test 5: Pause and resume\r\n        console.log('\\n5Ô∏è‚É£ Testing pause/resume...');\r\n        await testPauseResume();\r\n      }\r\n    });\r\n\r\n    // Test 5: Build another page to trigger events\r\n    console.log('\\nüîÑ Building another page to trigger events...');\r\n    await websiteBuilderService.buildPage({\r\n      type: 'about',\r\n      priority: 3,\r\n      seed: 'test-direct-002'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Test failed:', error);\r\n  }\r\n}\r\n\r\nasync function testPauseResume() {\r\n  try {\r\n    // Pause\r\n    console.log('‚è∏Ô∏è Pausing builder...');\r\n    const pauseResult = await websiteBuilderService.pause();\r\n    console.log('‚úÖ Pause result:', pauseResult);\r\n\r\n    // Wait a moment\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Resume\r\n    console.log('‚ñ∂Ô∏è Resuming builder...');\r\n    const resumeResult = await websiteBuilderService.resume();\r\n    console.log('‚úÖ Resume result:', resumeResult);\r\n\r\n    console.log('\\nüéâ All direct tests completed successfully!');\r\n    console.log('üöÄ Autonomous website builder service is operational!');\r\n    console.log('üåê The service should now be working in the browser dashboard');\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Pause/resume test failed:', error);\r\n  }\r\n}\r\n\r\n// Run the test\r\ntestService();\r\n\r\n// Keep the process running to see events\r\nsetTimeout(() => {\r\n  console.log('\\n‚è∞ Direct test completed. Service will continue running...');\r\n  console.log('üîç Check the browser dashboard for real-time updates');\r\n}, 15000);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-service.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-shipper-sidebar.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-supabase-edge-functions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\test-working-webhook.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tests\\e2e\\deprecated-portals.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tests\\e2e\\rate-quote.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tests\\portals.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\tests\\website-builder.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\reply\\OneDrive\\Desktop\\New TMS software\\New-TMS-software\\logistics-lynx\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]