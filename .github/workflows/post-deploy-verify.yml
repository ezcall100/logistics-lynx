# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Note: GitHub Actions extension warnings are false positives - these are valid expressions
name: üîç Post-Deploy Verification

on:
  workflow_run:
    workflows: ["ü§ñ Autonomous CI/CD Pipeline"]
    types: [completed]
    branches: [main, develop]

jobs:
  post-deploy-verify:
    name: üîç Post-Deploy Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Only run if the main workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    # 1) Choose the environment based on the triggering workflow branch
    strategy:
      fail-fast: false
      matrix:
        environment: [prod, staging, dev]
        include:
          - environment: prod
            ENV_DISPLAY: Production
          - environment: staging
            ENV_DISPLAY: Staging
          - environment: dev
            ENV_DISPLAY: Development

    # 2) Environment variables
    env:
      ENVIRONMENT_NAME: ${{ matrix.environment }}
      ENV_DISPLAY: ${{ matrix.ENV_DISPLAY }}
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Export per-env secrets into $GITHUB_ENV
      - name: üîê Export environment secrets
        shell: bash
        run: |
          set -euo pipefail
          
          # Determine which environment to verify based on the triggering branch
          TRIGGER_BRANCH="${{ github.event.workflow_run.head_branch }}"
          CURRENT_ENV="${{ matrix.environment }}"
          
          # Skip environments that don't match the branch
          if [[ "$CURRENT_ENV" == "prod" && "$TRIGGER_BRANCH" != "main" ]]; then
            echo "‚è≠Ô∏è Skipping prod environment for non-main branch"
            exit 0
          elif [[ "$CURRENT_ENV" == "staging" && "$TRIGGER_BRANCH" != "develop" ]]; then
            echo "‚è≠Ô∏è Skipping staging environment for non-develop branch"
            exit 0
          elif [[ "$CURRENT_ENV" == "dev" && ("$TRIGGER_BRANCH" == "main" || "$TRIGGER_BRANCH" == "develop") ]]; then
            echo "‚è≠Ô∏è Skipping dev environment for main/develop branch"
            exit 0
          fi
          
          # Export secrets based on environment - only access secrets for the current environment
          # Note: Secrets are accessed conditionally based on environment and branch
          # yaml-lint disable rule:context-access-might-be-invalid
          case "$CURRENT_ENV" in
            prod)
              # Only access production secrets when processing prod environment for main branch
              if [[ "$TRIGGER_BRANCH" == "main" ]]; then
                # Access production secrets
                # yaml-lint disable rule:context-access-might-be-invalid
                # These secrets are conditionally accessed only when TRIGGER_BRANCH == "main"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_URL="${{ secrets.PROD_SUPABASE_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_SERVICE_ROLE_KEY="${{ secrets.PROD_SUPABASE_SERVICE_ROLE_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_ANON_KEY="${{ secrets.PROD_SUPABASE_ANON_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                N8N_URL="${{ secrets.PROD_N8N_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SLACK_WEBHOOK_URL="${{ secrets.PROD_SLACK_WEBHOOK_URL }}"
                
                if [[ -n "${SUPABASE_URL:-}" ]]; then
                  bash scripts/export-env-secrets.sh prod \
                    "$SUPABASE_URL" \
                    "$SUPABASE_SERVICE_ROLE_KEY" \
                    "$SUPABASE_ANON_KEY" \
                    "$N8N_URL" \
                    "$SLACK_WEBHOOK_URL"
                else
                  echo "‚ùå Production secrets not available"
                  exit 1
                fi
              else
                echo "‚è≠Ô∏è Skipping prod environment for non-main branch"
                exit 0
              fi
              ;;
            staging)
              # Only access staging secrets when processing staging environment for develop branch
              if [[ "$TRIGGER_BRANCH" == "develop" ]]; then
                # Access staging secrets
                # yaml-lint disable rule:context-access-might-be-invalid
                # These secrets are conditionally accessed only when TRIGGER_BRANCH == "develop"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_URL="${{ secrets.STAGING_SUPABASE_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_SERVICE_ROLE_KEY="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_ANON_KEY="${{ secrets.STAGING_SUPABASE_ANON_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                N8N_URL="${{ secrets.STAGING_N8N_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SLACK_WEBHOOK_URL="${{ secrets.STAGING_SLACK_WEBHOOK_URL }}"
                
                if [[ -n "${SUPABASE_URL:-}" ]]; then
                  bash scripts/export-env-secrets.sh staging \
                    "$SUPABASE_URL" \
                    "$SUPABASE_SERVICE_ROLE_KEY" \
                    "$SUPABASE_ANON_KEY" \
                    "$N8N_URL" \
                    "$SLACK_WEBHOOK_URL"
                else
                  echo "‚ùå Staging secrets not available"
                  exit 1
                fi
              else
                echo "‚è≠Ô∏è Skipping staging environment for non-develop branch"
                exit 0
              fi
              ;;
            dev)
              # Only access development secrets when processing dev environment for feature branches
              if [[ "$TRIGGER_BRANCH" != "main" && "$TRIGGER_BRANCH" != "develop" ]]; then
                # Access development secrets
                # yaml-lint disable rule:context-access-might-be-invalid
                # These secrets are conditionally accessed only for feature branches (not main/develop)
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_URL="${{ secrets.DEV_SUPABASE_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_SERVICE_ROLE_KEY="${{ secrets.DEV_SUPABASE_SERVICE_ROLE_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SUPABASE_ANON_KEY="${{ secrets.DEV_SUPABASE_ANON_KEY }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                N8N_URL="${{ secrets.DEV_N8N_URL }}"
                # yaml-lint disable rule:context-access-might-be-invalid
                SLACK_WEBHOOK_URL="${{ secrets.DEV_SLACK_WEBHOOK_URL }}"
                
                if [[ -n "${SUPABASE_URL:-}" ]]; then
                  bash scripts/export-env-secrets.sh dev \
                    "$SUPABASE_URL" \
                    "$SUPABASE_SERVICE_ROLE_KEY" \
                    "$SUPABASE_ANON_KEY" \
                    "$N8N_URL" \
                    "$SLACK_WEBHOOK_URL"
                else
                  echo "‚ùå Development secrets not available"
                  exit 1
                fi
              else
                echo "‚è≠Ô∏è Skipping dev environment for main/develop branch"
                exit 0
              fi
              ;;
          esac

      - name: üîç Show selected environment
        run: |
          echo "üîç Verifying: $ENV_DISPLAY"
          echo "Environment: $ENVIRONMENT_NAME"
          echo "Supabase URL: $SUPABASE_URL"
          echo "‚úÖ Running verification for $ENV_DISPLAY"

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: logistics-lynx/package-lock.json

      - name: üì¶ Install Dependencies
        working-directory: logistics-lynx
        run: |
          npm ci --production=false
          echo "‚úÖ Dependencies installed"

      - name: üè• Health Check Verification
        run: |
          echo "üè• Running health check verification..."
          
          # Test health endpoint
          echo "Testing health endpoint: $SUPABASE_URL/functions/v1/health"
          
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            "$SUPABASE_URL/functions/v1/health")
          
          HEALTH_HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          HEALTH_DATA=$(echo "$HEALTH_RESPONSE" | head -n -1)
          
          echo "Health check response: $HEALTH_DATA"
          echo "HTTP status: $HEALTH_HTTP_CODE"
          
          if [[ "$HEALTH_HTTP_CODE" == "200" ]]; then
            echo "‚úÖ Health check passed"
            
            # Parse health data
            STATUS=$(echo "$HEALTH_DATA" | jq -r '.status // "unknown"')
            DATABASE=$(echo "$HEALTH_DATA" | jq -r '.database // "unknown"')
            N8N=$(echo "$HEALTH_DATA" | jq -r '.n8n // "unknown"')
            OPENAI=$(echo "$HEALTH_DATA" | jq -r '.openai // "unknown"')
            
            echo "Status: $STATUS"
            echo "Database: $DATABASE"
            echo "n8n: $N8N"
            echo "OpenAI: $OPENAI"
            
            # Check if all services are healthy
            if [[ "$STATUS" == "ok" && "$DATABASE" == "green" && "$N8N" == "green" && "$OPENAI" == "green" ]]; then
              echo "‚úÖ All services healthy"
            else
              echo "‚ö†Ô∏è Some services showing degraded status"
              exit 1
            fi
          else
            echo "‚ùå Health check failed with HTTP $HEALTH_HTTP_CODE"
            exit 1
          fi

      - name: üõ°Ô∏è RLS Security Verification
        run: |
          echo "üõ°Ô∏è Running RLS security verification..."
          
          # Run RLS verification script
          echo "Running RLS verification against $ENVIRONMENT_NAME environment..."
          
          # Create a simple RLS test
          RLS_TEST=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "SELECT COUNT(*) FROM shipments WHERE company_id != auth.jwt() ->> '\''company_id'\'' LIMIT 1;"
            }' \
            "$SUPABASE_URL/rest/v1/rpc/exec_sql")
          
          RLS_HTTP_CODE=$(echo "$RLS_TEST" | tail -n1)
          RLS_DATA=$(echo "$RLS_TEST" | head -n -1)
          
          echo "RLS test response: $RLS_DATA"
          echo "HTTP status: $RLS_HTTP_CODE"
          
          if [[ "$RLS_HTTP_CODE" == "200" ]]; then
            echo "‚úÖ RLS verification completed"
          else
            echo "‚ö†Ô∏è RLS verification returned unexpected status"
          fi

      - name: üîß Edge Functions Verification
        run: |
          echo "üîß Running edge functions verification..."
          
          # Test edge functions
          FUNCTIONS=("health" "ai-load-matcher" "agent-runner" "on-signup")
          
          for func in "${FUNCTIONS[@]}"; do
            echo "Testing edge function: $func"
            
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              "$SUPABASE_URL/functions/v1/$func")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            DATA=$(echo "$RESPONSE" | head -n -1)
            
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "401" ]]; then
              echo "‚úÖ $func responding (HTTP $HTTP_CODE)"
            else
              echo "‚ùå $func returned unexpected status: $HTTP_CODE"
            fi
          done

      - name: üìä Smoke Tests
        working-directory: logistics-lynx
        run: |
          echo "üìä Running smoke tests..."
          
          # Run smoke tests with environment variables already set
          node scripts/smoke-tests.js

      - name: üì£ Send Verification Results
        if: always()
        run: |
          echo "üì£ Sending verification results..."
          
          STATUS="${{ job.status }}"
          
          # Create summary
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="‚úÖ Post-deploy verification completed successfully for $ENV_DISPLAY"
            COLOR="good"
          else
            MESSAGE="‚ùå Post-deploy verification failed for $ENV_DISPLAY"
            COLOR="danger"
          fi
          
          # Use the SLACK_WEBHOOK_URL that was already set in the environment secrets step
          # It will be empty if the environment doesn't match the branch
          
          # Send to Slack if webhook is configured
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            curl -X POST "$SLACK_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"$MESSAGE\",
                \"attachments\": [
                  {
                    \"color\": \"$COLOR\",
                    \"fields\": [
                      {
                        \"title\": \"Environment\",
                        \"value\": \"$ENV_DISPLAY\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Status\",
                        \"value\": \"$STATUS\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Workflow Run\",
                        \"value\": \"${{ github.event.workflow_run.html_url }}\",
                        \"short\": false
                      }
                    ]
                  }
                ]
              }"
          fi

      - name: üìä Verification Summary
        run: |
          {
            echo "## üîç Post-Deploy Verification Summary"
            echo ""
            echo "### üìã Verification Results"
            echo "- **Environment**: \`$ENV_DISPLAY\`"
            echo "- **Status**: \`${{ job.status }}\`"
            echo "- **Workflow Run**: [${{ github.event.workflow_run.head_branch }}](${{ github.event.workflow_run.html_url }})"
            echo ""
            echo "### ‚úÖ Checks Performed"
            echo "- üè• Health Check Verification"
            echo "- üõ°Ô∏è RLS Security Verification"
            echo "- üîß Edge Functions Verification"
            echo "- üìä Smoke Tests"
            echo ""
            echo "### üìà Next Steps"
            if [[ "${{ job.status }}" == "success" ]]; then
              echo "- üéâ Deployment verified successfully"
              echo "- üìä Monitor system performance"
              echo "- üîÑ Continue with canary rollout if applicable"
            else
              echo "- üîç Review verification logs"
              echo "- üõ†Ô∏è Address any issues found"
              echo "- üîÑ Re-run verification after fixes"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
