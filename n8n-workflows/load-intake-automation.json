{
  "name": "Load Intake â†’ AI Match â†’ Assignment Proposal",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "load-created",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-load-created",
      "name": "Webhook: Load Created",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "load-created"
    },
    {
      "parameters": {
        "operation": "select",
        "table": "loads",
        "columns": ["id", "company_id", "reference", "equipment", "pickup", "dropoff", "rate", "status"],
        "where": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "id",
                "rightValue": "={{ $json.load_id }}",
                "operator": {
                  "type": "string",
                  "operation": "eq"
                }
              }
            ],
            "combinator": "and"
          }
        }
      },
      "id": "supabase-select-load",
      "name": "Supabase: Select Load",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "select",
        "table": "carriers",
        "columns": ["id", "name", "equipment", "lanes", "company_id"],
        "where": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "company_id",
                "rightValue": "={{ $json.data[0].company_id }}",
                "operator": {
                  "type": "string",
                  "operation": "eq"
                }
              }
            ],
            "combinator": "and"
          }
        }
      },
      "id": "supabase-candidate-carriers",
      "name": "Supabase: Candidate Carriers",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.OPENAI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "=[\n  {\n    \"role\": \"system\",\n    \"content\": \"You are an expert logistics AI that ranks carriers 0-1 suitability for loads. Consider equipment match, lane fit, and availability.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"=JSON.stringify({\n      load: $json.data[0],\n      carriers: $('Supabase: Candidate Carriers').all()[0].json.data\n    })\"\n  }\n]"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "response_format",
              "value": "={\"type\": \"json_object\"}"
            }
          ]
        },
        "options": {}
      },
      "id": "openai-carrier-scoring",
      "name": "OpenAI: Score Carriers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse OpenAI response and map scores\nconst response = $input.all()[0].json;\nconst choices = response.choices || [];\nconst message = choices[0]?.message;\n\nlet rankings = [];\nif (message && message.content) {\n  try {\n    const content = JSON.parse(message.content);\n    rankings = content.rankings || [];\n  } catch (e) {\n    console.error('Failed to parse OpenAI response:', e);\n  }\n}\n\n// Map to carrier_recommendations format\nconst recommendations = rankings.map(r => ({\n  load_id: $('Supabase: Select Load').all()[0].json.data[0].id,\n  carrier_id: r.carrier_id,\n  score: r.score,\n  rationale: r.rationale || null\n}));\n\nreturn recommendations;"
      },
      "id": "function-map-scores",
      "name": "Function: Map Scores",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": "carrier_recommendations",
        "columns": ["load_id", "carrier_id", "score", "rationale"],
        "upsert": {
          "columns": ["load_id", "carrier_id"]
        }
      },
      "id": "supabase-upsert-recommendations",
      "name": "Supabase: Upsert Recommendations",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "assignments",
        "columns": {
          "company_id": "={{ $('Supabase: Select Load').all()[0].json.data[0].company_id }}",
          "load_id": "={{ $('Supabase: Select Load').all()[0].json.data[0].id }}",
          "carrier_id": "={{ $('Function: Map Scores').all()[0].json[0].carrier_id }}",
          "status": "proposed",
          "agreed_rate": "={{ $('Supabase: Select Load').all()[0].json.data[0].rate * 0.9 }}"
        }
      },
      "id": "supabase-create-assignment",
      "name": "Supabase: Create Assignment",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "authentication": "none",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "ðŸš› New load proposal created!\n\nLoad: {{ $('Supabase: Select Load').all()[0].json.data[0].reference }}\nCarrier: {{ $('Supabase: Candidate Carriers').all()[0].json.data.find(c => c.id === $('Function: Map Scores').all()[0].json[0].carrier_id).name }}\nScore: {{ Math.round($('Function: Map Scores').all()[0].json[0].score * 100) }}%\n\nReview and approve: {{ $env.APP_URL }}/assignments"
            }
          ]
        },
        "options": {}
      },
      "id": "slack-notify-ops",
      "name": "Slack: Notify Ops",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"load_id\": $('Supabase: Select Load').all()[0].json.data[0].id,\n  \"recommendations_count\": $('Function: Map Scores').all()[0].json.length,\n  \"top_score\": $('Function: Map Scores').all()[0].json[0].score,\n  \"assignment_created\": true\n}"
      },
      "id": "response-success",
      "name": "Response: Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    }
  ],
  "connections": {
    "Webhook: Load Created": {
      "main": [
        [
          {
            "node": "Supabase: Select Load",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Select Load": {
      "main": [
        [
          {
            "node": "Supabase: Candidate Carriers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Candidate Carriers": {
      "main": [
        [
          {
            "node": "OpenAI: Score Carriers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI: Score Carriers": {
      "main": [
        [
          {
            "node": "Function: Map Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Map Scores": {
      "main": [
        [
          {
            "node": "Supabase: Upsert Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Upsert Recommendations": {
      "main": [
        [
          {
            "node": "Supabase: Create Assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase: Create Assignment": {
      "main": [
        [
          {
            "node": "Slack: Notify Ops",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack: Notify Ops": {
      "main": [
        [
          {
            "node": "Response: Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "load-automation",
      "name": "load-automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
