name: Portal Nightly

on:
  schedule:
    - cron: "0 5 * * *"  # 05:00 UTC daily
  workflow_dispatch:

jobs:
  nightly:
    name: ðŸŒ™ Nightly Portal Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd logistics-lynx
        npm ci

    - name: Scaffold missing portals
      run: |
        cd logistics-lynx
        npm run portal:scaffold

    - name: Check portal routes
      run: |
        cd logistics-lynx
        npm run check:portals
      continue-on-error: false

    - name: Run health check
      run: |
        cd logistics-lynx
        npm run health:check
      continue-on-error: false

    - name: Generate green posture report
      run: |
        cd logistics-lynx
        node scripts/green-posture-script.mjs
      continue-on-error: true

    - name: Upload nightly artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-portal-check
        path: |
          logistics-lynx/artifacts/
          logistics-lynx/build-reports/
          logistics-lynx/health-reports/
        retention-days: 30

    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read the latest health report
          const artifactsDir = path.join(process.cwd(), 'logistics-lynx', 'health-reports');
          const files = fs.readdirSync(artifactsDir).filter(f => f.endsWith('.json'));
          const latestFile = files.sort().pop();
          
          let reportContent = 'No detailed report available';
          if (latestFile) {
            const reportPath = path.join(artifactsDir, latestFile);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            reportContent = `Success Rate: ${report.summary.successRate}\nFailed Checks: ${report.summary.failed}`;
          }
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Nightly Portal Health Check Failed',
            body: `## Nightly Portal Health Check Failed
            
            **Timestamp**: ${new Date().toISOString()}
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}
            
            ### Report Summary
            \`\`\`
            ${reportContent}
            \`\`\`
            
            ### Next Steps
            1. Check the workflow logs for detailed error information
            2. Review the uploaded artifacts for specific failure details
            3. Investigate and fix any portal accessibility issues
            4. Re-run the health check to verify fixes
            
            ### Artifacts
            - Health reports and build artifacts are available in the workflow run
            - Check the "nightly-portal-check" artifact for detailed reports
            
            ---
            *This issue was automatically created by the nightly portal health check workflow.*`
          });

    - name: Nightly summary
      if: always()
      run: |
        echo "## ðŸŒ™ Nightly Portal Health Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“… **Run Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Portal Scaffolding**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Route Verification**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Health Assessment**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Green Posture Report**: Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š **Artifacts**: Available for 30 days" >> $GITHUB_STEP_SUMMARY
