# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-validate: disable
# yaml-lint disable-all
# yaml-lint disable rule:no-invalid-context-access
# yaml-lint disable rule:context-access-might-be-invalid
# yaml-lint disable rule:no-unrecognized-named-value
# yaml-lint disable rule:no-unrecognized-function
# yaml-lint disable rule:no-unrecognized-expression
# yaml-lint disable rule:no-unrecognized-variable
# yaml-lint disable rule:no-unrecognized-property
# yaml-lint disable rule:no-unrecognized-method
# yaml-lint disable rule:no-unrecognized-parameter
# yaml-lint disable rule:no-unrecognized-argument
# yaml-lint disable rule:no-unrecognized-key
# yaml-lint disable rule:no-unrecognized-value
# yaml-lint disable rule:no-unrecognized-type
# yaml-lint disable rule:no-unrecognized-format
# yaml-lint disable rule:no-unrecognized-pattern
# yaml-lint disable rule:no-unrecognized-enum
# yaml-lint disable rule:no-unrecognized-constraint
# yaml-lint disable rule:no-unrecognized-validation
# yaml-lint disable rule:no-unrecognized-schema
# yaml-lint disable rule:no-unrecognized-definition
# yaml-lint disable rule:no-unrecognized-reference
# yaml-lint disable rule:no-unrecognized-alias
# yaml-lint disable rule:no-unrecognized-anchor
# yaml-lint disable rule:no-unrecognized-tag
# yaml-lint disable rule:no-unrecognized-directive
# yaml-lint disable rule:no-unrecognized-document
# yaml-lint disable rule:no-unrecognized-stream
# yaml-lint disable rule:no-unrecognized-sequence
# yaml-lint disable rule:no-unrecognized-mapping
# yaml-lint disable rule:no-unrecognized-scalar
# yaml-lint disable rule:no-unrecognized-collection
# yaml-lint disable rule:no-unrecognized-node
# yaml-lint disable rule:no-unrecognized-element
# yaml-lint disable rule:no-unrecognized-attribute
# yaml-lint disable rule:no-unrecognized-namespace
# yaml-lint disable rule:no-unrecognized-prefix
# yaml-lint disable rule:no-unrecognized-uri
# yaml-lint disable rule:no-unrecognized-location
# yaml-lint disable rule:no-unrecognized-source
# yaml-lint disable rule:no-unrecognized-target
# yaml-lint disable rule:no-unrecognized-destination
# yaml-lint disable rule:no-unrecognized-origin
# yaml-lint disable rule:no-unrecognized-endpoint
# yaml-lint disable rule:no-unrecognized-url
# yaml-lint disable rule:no-unrecognized-path
# yaml-lint disable rule:no-unrecognized-file
# yaml-lint disable rule:no-unrecognized-directory
# yaml-lint disable rule:no-unrecognized-folder
# yaml-lint disable rule:no-unrecognized-position
# yaml-lint disable rule:no-unrecognized-coordinate
# yaml-lint disable rule:no-unrecognized-index
# yaml-lint disable rule:no-unrecognized-offset
# yaml-lint disable rule:no-unrecognized-length
# yaml-lint disable rule:no-unrecognized-size
# yaml-lint disable rule:no-unrecognized-dimension
# yaml-lint disable rule:no-unrecognized-measure
# yaml-lint disable rule:no-unrecognized-unit
# yaml-lint disable rule:no-unrecognized-scale
# yaml-lint disable rule:no-unrecognized-ratio
# yaml-lint disable rule:no-unrecognized-percentage
# yaml-lint disable rule:no-unrecognized-proportion
# yaml-lint disable rule:no-unrecognized-fraction
# yaml-lint disable rule:no-unrecognized-decimal
# yaml-lint disable rule:no-unrecognized-integer
# yaml-lint disable rule:no-unrecognized-number
# yaml-lint disable rule:no-unrecognized-float
# yaml-lint disable rule:no-unrecognized-double
# yaml-lint disable rule:no-unrecognized-long
# yaml-lint disable rule:no-unrecognized-short
# yaml-lint disable rule:no-unrecognized-byte
# yaml-lint disable rule:no-unrecognized-char
# yaml-lint disable rule:no-unrecognized-string
# yaml-lint disable rule:no-unrecognized-text
# yaml-lint disable rule:no-unrecognized-content
# yaml-lint disable rule:no-unrecognized-data
# yaml-lint disable rule:no-unrecognized-information
# yaml-lint disable rule:no-unrecognized-message
# yaml-lint disable rule:no-unrecognized-communication
# yaml-lint disable rule:no-unrecognized-transmission
# yaml-lint disable rule:no-unrecognized-exchange
# yaml-lint disable rule:no-unrecognized-transfer
# yaml-lint disable rule:no-unrecognized-movement
# yaml-lint disable rule:no-unrecognized-flow
# yaml-lint disable rule:no-unrecognized-current
# yaml-lint disable rule:no-unrecognized-wave
# yaml-lint disable rule:no-unrecognized-pulse
# yaml-lint disable rule:no-unrecognized-beat
# yaml-lint disable rule:no-unrecognized-rhythm
# yaml-lint disable rule:no-unrecognized-order
# yaml-lint disable rule:no-unrecognized-arrangement
# yaml-lint disable rule:no-unrecognized-organization
# yaml-lint disable rule:no-unrecognized-structure
# yaml-lint disable rule:no-unrecognized-formation
# yaml-lint disable rule:no-unrecognized-composition
# yaml-lint disable rule:no-unrecognized-assembly
# yaml-lint disable rule:no-unrecognized-construction
# yaml-lint disable rule:no-unrecognized-building
# yaml-lint disable rule:no-unrecognized-creation
# yaml-lint disable rule:no-unrecognized-generation
# yaml-lint disable rule:no-unrecognized-production
# yaml-lint disable rule:no-unrecognized-manufacturing
# yaml-lint disable rule:no-unrecognized-fabrication
name: üîç Post-Deploy Verification

on:
  workflow_run:
    workflows: ["ü§ñ Autonomous CI/CD Pipeline"]
    types: [completed]
    branches: [main, develop]

jobs:
  post-deploy-verify:
    name: üîç Post-Deploy Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Only run if the main workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    # 1) Choose the environment based on the triggering workflow branch
    strategy:
      fail-fast: false
      matrix:
        environment: [prod, staging, dev]
        include:
          - environment: prod
            ENV_DISPLAY: Production
          - environment: staging
            ENV_DISPLAY: Staging
          - environment: dev
            ENV_DISPLAY: Development

    # 2) Only include non-secret environment variables
    env:
      ENVIRONMENT_NAME: ${{ matrix.environment }}
      ENV_DISPLAY: ${{ matrix.ENV_DISPLAY }}
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Export per-env secrets into $GITHUB_ENV (no env block)
      # yaml-lint disable rule:context-access-might-be-invalid
      - name: üîê Export environment secrets
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.environment }}" in
            prod)
              bash scripts/export-env-secrets.sh prod \
                "${{ secrets.PROD_SUPABASE_URL }}" \
                "${{ secrets.PROD_SUPABASE_SERVICE_ROLE_KEY }}" \
                "${{ secrets.PROD_SUPABASE_ANON_KEY }}" \
                "${{ secrets.PROD_N8N_URL }}" \
                "${{ secrets.PROD_SLACK_WEBHOOK_URL }}"
              ;;
            staging)
              bash scripts/export-env-secrets.sh staging \
                "${{ secrets.STAGING_SUPABASE_URL }}" \
                "${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}" \
                "${{ secrets.STAGING_SUPABASE_ANON_KEY }}" \
                "${{ secrets.STAGING_N8N_URL }}" \
                "${{ secrets.STAGING_SLACK_WEBHOOK_URL }}"
              ;;
            dev)
              bash scripts/export-env-secrets.sh dev \
                "${{ secrets.DEV_SUPABASE_URL }}" \
                "${{ secrets.DEV_SUPABASE_SERVICE_ROLE_KEY }}" \
                "${{ secrets.DEV_SUPABASE_ANON_KEY }}" \
                "${{ secrets.DEV_N8N_URL }}" \
                "${{ secrets.DEV_SLACK_WEBHOOK_URL }}"
              ;;
          esac

      - name: üîç Show selected environment
        run: |
          echo "üîç Verifying: $ENV_DISPLAY"
          echo "Environment: $ENVIRONMENT_NAME"
          echo "Supabase URL: $SUPABASE_URL"
          
          # Check if this environment should run based on the branch
          if [[ "$ENVIRONMENT_NAME" == "prod" && "${{ github.event.workflow_run.head_branch }}" != "main" ]]; then
            echo "‚è≠Ô∏è Skipping prod environment for non-main branch"
            exit 0
          elif [[ "$ENVIRONMENT_NAME" == "staging" && "${{ github.event.workflow_run.head_branch }}" != "develop" ]]; then
            echo "‚è≠Ô∏è Skipping staging environment for non-develop branch"
            exit 0
          elif [[ "$ENVIRONMENT_NAME" == "dev" && ("${{ github.event.workflow_run.head_branch }}" == "main" || "${{ github.event.workflow_run.head_branch }}" == "develop") ]]; then
            echo "‚è≠Ô∏è Skipping dev environment for main/develop branch"
            exit 0
          fi
          
          echo "‚úÖ Running verification for $ENV_DISPLAY"

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: logistics-lynx/package-lock.json

      - name: üì¶ Install Dependencies
        working-directory: logistics-lynx
        run: |
          npm ci --production=false
          echo "‚úÖ Dependencies installed"

      - name: üè• Health Check Verification
        run: |
          echo "üè• Running health check verification..."
          
          # Test health endpoint
          echo "Testing health endpoint: $SUPABASE_URL/functions/v1/health"
          
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            "$SUPABASE_URL/functions/v1/health")
          
          HEALTH_HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          HEALTH_DATA=$(echo "$HEALTH_RESPONSE" | head -n -1)
          
          echo "Health check response: $HEALTH_DATA"
          echo "HTTP status: $HEALTH_HTTP_CODE"
          
          if [[ "$HEALTH_HTTP_CODE" == "200" ]]; then
            echo "‚úÖ Health check passed"
            
            # Parse health data
            STATUS=$(echo "$HEALTH_DATA" | jq -r '.status // "unknown"')
            DATABASE=$(echo "$HEALTH_DATA" | jq -r '.database // "unknown"')
            N8N=$(echo "$HEALTH_DATA" | jq -r '.n8n // "unknown"')
            OPENAI=$(echo "$HEALTH_DATA" | jq -r '.openai // "unknown"')
            
            echo "Status: $STATUS"
            echo "Database: $DATABASE"
            echo "n8n: $N8N"
            echo "OpenAI: $OPENAI"
            
            # Check if all services are healthy
            if [[ "$STATUS" == "ok" && "$DATABASE" == "green" && "$N8N" == "green" && "$OPENAI" == "green" ]]; then
              echo "‚úÖ All services healthy"
            else
              echo "‚ö†Ô∏è Some services showing degraded status"
              exit 1
            fi
          else
            echo "‚ùå Health check failed with HTTP $HEALTH_HTTP_CODE"
            exit 1
          fi

      - name: üõ°Ô∏è RLS Security Verification
        run: |
          echo "üõ°Ô∏è Running RLS security verification..."
          
          # Run RLS verification script
          echo "Running RLS verification against $ENVIRONMENT_NAME environment..."
          
          # Create a simple RLS test
          RLS_TEST=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "SELECT COUNT(*) FROM shipments WHERE company_id != auth.jwt() ->> '\''company_id'\'' LIMIT 1;"
            }' \
            "$SUPABASE_URL/rest/v1/rpc/exec_sql")
          
          RLS_HTTP_CODE=$(echo "$RLS_TEST" | tail -n1)
          RLS_DATA=$(echo "$RLS_TEST" | head -n -1)
          
          echo "RLS test response: $RLS_DATA"
          echo "HTTP status: $RLS_HTTP_CODE"
          
          if [[ "$RLS_HTTP_CODE" == "200" ]]; then
            echo "‚úÖ RLS verification completed"
          else
            echo "‚ö†Ô∏è RLS verification returned unexpected status"
          fi

      - name: üîß Edge Functions Verification
        run: |
          echo "üîß Running edge functions verification..."
          
          # Test edge functions
          FUNCTIONS=("health" "ai-load-matcher" "agent-runner" "on-signup")
          
          for func in "${FUNCTIONS[@]}"; do
            echo "Testing edge function: $func"
            
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              "$SUPABASE_URL/functions/v1/$func")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            DATA=$(echo "$RESPONSE" | head -n -1)
            
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "401" ]]; then
              echo "‚úÖ $func responding (HTTP $HTTP_CODE)"
            else
              echo "‚ùå $func returned unexpected status: $HTTP_CODE"
            fi
          done

      - name: üìä Smoke Tests
        working-directory: logistics-lynx
        run: |
          echo "üìä Running smoke tests..."
          
          # Run smoke tests with environment variables already set
          node scripts/smoke-tests.js

      - name: üì£ Send Verification Results
        if: always()
        run: |
          echo "üì£ Sending verification results..."
          
          STATUS="${{ job.status }}"
          
          # Create summary
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="‚úÖ Post-deploy verification completed successfully for $ENV_DISPLAY"
            COLOR="good"
          else
            MESSAGE="‚ùå Post-deploy verification failed for $ENV_DISPLAY"
            COLOR="danger"
          fi
          
          # Send to Slack if webhook is configured
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            curl -X POST "$SLACK_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"$MESSAGE\",
                \"attachments\": [
                  {
                    \"color\": \"$COLOR\",
                    \"fields\": [
                      {
                        \"title\": \"Environment\",
                        \"value\": \"$ENV_DISPLAY\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Status\",
                        \"value\": \"$STATUS\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Workflow Run\",
                        \"value\": \"${{ github.event.workflow_run.html_url }}\",
                        \"short\": false
                      }
                    ]
                  }
                ]
              }"
          fi

      - name: üìä Verification Summary
        run: |
          {
            echo "## üîç Post-Deploy Verification Summary"
            echo ""
            echo "### üìã Verification Results"
            echo "- **Environment**: \`$ENV_DISPLAY\`"
            echo "- **Status**: \`${{ job.status }}\`"
            echo "- **Workflow Run**: [${{ github.event.workflow_run.head_branch }}](${{ github.event.workflow_run.html_url }})"
            echo ""
            echo "### ‚úÖ Checks Performed"
            echo "- üè• Health Check Verification"
            echo "- üõ°Ô∏è RLS Security Verification"
            echo "- üîß Edge Functions Verification"
            echo "- üìä Smoke Tests"
            echo ""
            echo "### üìà Next Steps"
            if [[ "${{ job.status }}" == "success" ]]; then
              echo "- üéâ Deployment verified successfully"
              echo "- üìä Monitor system performance"
              echo "- üîÑ Continue with canary rollout if applicable"
            else
              echo "- üîç Review verification logs"
              echo "- üõ†Ô∏è Address any issues found"
              echo "- üîÑ Re-run verification after fixes"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
