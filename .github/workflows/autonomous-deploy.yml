# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: disableDefaultProperties: true
# yaml-language-server: disableAdditionalProperties: true
# yaml-language-server: disableContextAccess: true
# yaml-language-server: validate: false
# yaml-language-server: disableSchemaValidation: true
# GitHub Actions workflow for Autonomous TMS Deployment
# This workflow handles testing, deployment, and monitoring of the autonomous TMS system
# 
# IMPORTANT: All ${{ vars.* }} and ${{ secrets.* }} references in this file are valid GitHub Actions syntax
# The YAML language server shows "Context access might be invalid" warnings for these, but these are FALSE POSITIVES
# GitHub Actions properly supports ${{ vars.VARIABLE_NAME }} and ${{ secrets.SECRET_NAME }} syntax in env sections
# The workflow will execute correctly despite these warnings
# 
# Note: We avoid using the || '' fallback syntax as it can cause YAML language server issues
# Instead, we handle optional secrets through conditional logic in the workflow steps
# 
# YAML Language Server Configuration:
# - Disable context access warnings for GitHub Actions variables and secrets
# - These warnings are false positives and can be safely ignored
# - The workflow uses the correct GitHub Actions syntax throughout
name: Autonomous TMS Deployment

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger

permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    # Map repo/org Variables & Secrets → env once
    env:
      # UI/env info
      ENVIRONMENT_NAME: ${{ vars.ENVIRONMENT_NAME }}
      APP_URL: ${{ vars.APP_URL }}
      
      # Database
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      # n8n + webhooks
      N8N_ENABLED: ${{ vars.N8N_ENABLED }}
      N8N_BASE_URL: ${{ vars.N8N_BASE_URL }}
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
      DEPLOYMENT_WEBHOOK_URL: ${{ vars.DEPLOYMENT_WEBHOOK_URL }}
    
    # Environment block uses vars.* directly
    environment:
      name: ${{ vars.ENVIRONMENT_NAME == '' && 'production' || vars.ENVIRONMENT_NAME }}
      url: ${{ vars.APP_URL }}
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Mask secrets early
        run: |
          echo "::add-mask::$N8N_API_KEY"
          echo "::add-mask::$OPENAI_API_KEY"
        
      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Normalize N8N_ENABLED
        run: |
          if [ "${N8N_ENABLED,,}" = "true" ]; then 
            echo "N8N_ENABLED=true" >> $GITHUB_ENV
          else 
            echo "N8N_ENABLED=false" >> $GITHUB_ENV
          fi
        
      - name: Validate required secrets
        run: |
          set -euo pipefail
          
          # Check if required secrets are set
          if [ -z "$SUPABASE_URL" ]; then
            echo "Error: SUPABASE_URL secret is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_ANON_KEY" ]; then
            echo "Error: SUPABASE_ANON_KEY secret is not set"
            exit 1
          fi
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Error: OPENAI_API_KEY secret is not set"
            exit 1
          fi
          
          # Check n8n secrets (optional but both must be set together)
          if [ -n "$N8N_BASE_URL" ] && [ -z "$N8N_API_KEY" ]; then
            echo "Error: N8N_BASE_URL is set but N8N_API_KEY is missing"
            exit 1
          fi
          if [ -z "$N8N_BASE_URL" ] && [ -n "$N8N_API_KEY" ]; then
            echo "Error: N8N_API_KEY is set but N8N_BASE_URL is missing"
            exit 1
          fi
          
          # Use normalized N8N_ENABLED if set, otherwise determine from secrets
          if [ "$N8N_ENABLED" = "true" ] || ([ -n "$N8N_BASE_URL" ] && [ -n "$N8N_API_KEY" ]); then
            echo "N8N integration is enabled"
            echo "N8N_ENABLED=true" >> $GITHUB_ENV
          else
            echo "N8N integration is disabled - both N8N_BASE_URL and N8N_API_KEY must be set"
            echo "N8N_ENABLED=false" >> $GITHUB_ENV
          fi
          
          echo "All required secrets are configured"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Setup database
        run: npm run db:setup

      - name: Validate required env
        if: ${{ env.N8N_ENABLED == 'true' }}
        run: |
          set -euo pipefail
          : "${N8N_BASE_URL:?Missing N8N_BASE_URL}"
          : "${N8N_API_KEY:?Missing N8N_API_KEY}"
          echo "✅ N8N environment variables validated"

      - name: n8n health check
        if: ${{ env.N8N_ENABLED == 'true' }}
        run: |
          set -euo pipefail
          curl --fail -sS "$N8N_BASE_URL/healthz" >/dev/null
          echo "✅ N8N health check passed"

      - name: Build deploy payload
        id: payload
        if: ${{ env.N8N_ENABLED == 'true' }}
        run: |
          set -euo pipefail
          {
            echo 'payload<<EOF'
            jq -n \
              --arg repo '${{ github.repository }}' \
              --arg sha  '${{ github.sha }}' \
              --arg run  '${{ github.run_id }}' \
              --arg ref  '${{ github.ref_name }}' \
              '{repo:$repo, sha:$sha, run_id:$run, branch:$ref}'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Trigger N8N
        if: ${{ env.N8N_ENABLED == 'true' }}
        uses: ./.github/actions/n8n-trigger
        with:
          n8n-base-url: ${{ env.N8N_BASE_URL }}
          n8n-api-key: ${{ env.N8N_API_KEY }}
          payload: ${{ steps.payload.outputs.payload }}

      - name: Deploy to production
        run: npm run deploy:prod

      - name: Health check
        run: npm run health:check

      - name: Test workflows
        if: ${{ env.N8N_ENABLED == 'true' }}
        run: npm run test:workflows

      - name: Test agents
        run: npm run test:agents

      - name: Start autonomous system
        run: npm run start:autonomous &

      - name: Wait for system startup
        run: sleep 30
        
      - name: Verify deployment
        run: |
          set -euo pipefail
          
          # Check if autonomous system is running
          curl --fail -sS http://localhost:3000/api/health || exit 1
          
          # Check if n8n workflows are active (only if N8N is enabled)
          if [ "$N8N_ENABLED" = "true" ]; then
            for i in 1 2 3; do
              curl --fail -sS "$N8N_BASE_URL/api/v1/workflows" \
                -H "Authorization: Bearer $N8N_API_KEY" && break
              echo "N8N workflow verification retry $i/3 in 5s..."; sleep 5
            done
          else
            echo "N8N integration is disabled, skipping workflow verification"
          fi

      - name: Set outputs
        id: meta
        run: |
          echo "run_id=${{ github.run_id }}" >> "$GITHUB_OUTPUT"
          echo "sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "branch=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "deployment_status=success" >> "$GITHUB_OUTPUT"

      - name: Build webhook payload
        id: webhook-payload
        if: success() && env.DEPLOYMENT_WEBHOOK_URL != ''
        run: |
          set -euo pipefail
          {
            echo 'payload<<EOF'
            jq -n \
              --arg status 'deployed' \
              --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg env 'production' \
              --arg commit '${{ steps.meta.outputs.sha }}' \
              --arg branch '${{ steps.meta.outputs.branch }}' \
              --arg run_id '${{ steps.meta.outputs.run_id }}' \
              '{status:$status, timestamp:$timestamp, environment:$env, commit:$commit, branch:$branch, run_id:$run_id}'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Notify success
        if: success() && env.DEPLOYMENT_WEBHOOK_URL != ''
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            curl --fail -sS -X POST "$DEPLOYMENT_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d '${{ steps.webhook-payload.outputs.payload }}' && break
            echo "Webhook notification retry $i/3 in 5s..."; sleep 5
          done

      - name: Notify failure
        if: failure() && env.DEPLOYMENT_WEBHOOK_URL != ''
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            curl --fail -sS -X POST "$DEPLOYMENT_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "failed",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "environment": "production",
                "commit": "'${{ github.sha }}'",
                "branch": "'${{ github.ref_name }}'",
                "run_id": "'${{ github.run_id }}'",
                "error": "Deployment failed"
              }' && break
            echo "Webhook notification retry $i/3 in 5s..."; sleep 5
          done

      - name: Summarize
        if: always()
        run: |
          {
            echo "## Deploy Summary"
            echo "- Status: ${{ job.status }}"
            echo "- Run: ${{ github.run_id }}"
            echo "- SHA:  ${{ github.sha }}"
            echo "- Branch: ${{ github.ref_name }}"
            echo "- Env: production"
            echo "- n8n: $([[ '${{ env.N8N_ENABLED }}' == 'true' ]] && echo 'triggered' || echo 'skipped')"
          } >> "$GITHUB_STEP_SUMMARY"

  monitor:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
    
    # Map repo/org Variables & Secrets → env once
    env:
      # Database
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      # n8n + webhooks
      N8N_ENABLED: ${{ vars.N8N_ENABLED }}
      N8N_BASE_URL: ${{ vars.N8N_BASE_URL }}
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start monitoring
        run: npm run monitor:start

      - name: Monitor for 5 minutes
        run: sleep 300
        
      - name: Check system health
        run: npm run health:check

      - name: Report monitoring results
        run: |
          echo "Monitoring completed successfully"
          echo "System is running autonomously"
        if: success()
