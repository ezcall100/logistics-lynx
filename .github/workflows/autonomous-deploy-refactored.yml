# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: disableContextAccess: true
# yaml-language-server: disableDefaultProperties: true
# yaml-language-server: disableAdditionalProperties: true
# yaml-language-server: validate: false
# yaml-language-server: disableSchemaValidation: true

name: 🚀 Autonomous TMS Deployment (Refactored)

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch:

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: bash

jobs:
  # -------------------- Pre-flight --------------------
  preflight:
    name: 🔍 Pre-flight Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 🔍 System Information
        run: |
          echo "OS: $(uname -a)"
          echo "User: $(whoami)"
          echo "Pwd: $(pwd)"
          echo "Date: $(date -Is)"
          echo "Event: ${{ github.event_name }}"
          echo "Repo:  ${{ github.repository }}"
          echo "Ref:   ${{ github.ref_name }}"
          echo "SHA:   ${{ github.sha }}"

      - name: 📦 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: 🔍 Repository Structure Validation
        run: |
          set -euo pipefail
          required=( "logistics-lynx" "logistics-lynx/package.json" )
          optional=( "logistics-lynx/tsconfig.json" ".github/workflows" "deployment" )
          miss_req=0
          for p in "${required[@]}"; do
            [[ -e "$p" ]] && echo "✅ $p found (required)" || { echo "❌ $p missing (required)"; miss_req=1; }
          done
          for p in "${optional[@]}"; do
            [[ -e "$p" ]] && echo "✅ $p found (optional)" || echo "⚠️ $p missing (optional)"
          done
          [[ $miss_req -eq 0 ]]

      - name: 🔍 Configuration Validation
        run: |
          set -euo pipefail
          echo "📋 Validating logistics-lynx/package.json…"
          python3 - <<'PY'
          import json,sys
          with open("logistics-lynx/package.json") as f:
              data=json.load(f)
          scripts=data.get("scripts", {})
          required=["build","lint"]
          optional=["test","db:setup","deploy:prod","health:check","test:agents","start:autonomous","monitor:start"]
          bad=[s for s in required if s not in scripts]
          for s in required:
              print(f"✅ script present (required): {s}" if s in scripts else f"❌ script missing (required): {s}")
          for s in optional:
              print(f"✅ script present (optional): {s}" if s in scripts else f"⚠️ script missing (optional): {s}")
          if bad:
              print("❌ missing required scripts:", ", ".join(bad)); sys.exit(1)
          print("✅ package.json OK")
          PY

      - name: 📊 Pre-flight Summary
        run: |
          {
            echo "## 🔍 Pre-flight Validation Results"
            echo "- Repo: \`${{ github.repository }}\`"
            echo "- Ref:  \`${{ github.ref_name }}\`"
            echo "- SHA:  \`${{ github.sha }}\`"
            echo "- Time: \`$(date -Is)\`"
            echo ""
            echo "All required checks passed ✅"
          } >> "$GITHUB_STEP_SUMMARY"

  # -------------------- Test --------------------
  test:
    name: 🧪 Testing & Validation
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 15

    steps:
      - name: 🌐 Network Probe
        id: net
        run: |
          set -euo pipefail
          basic="false"; gh="false"
          curl -s --connect-timeout 5 https://httpbin.org/get >/dev/null && basic="true" || true
          curl -s --connect-timeout 5 https://api.github.com >/dev/null   && gh="true"    || true
          echo "network_available=$basic"       >> "$GITHUB_OUTPUT"
          echo "github_api_available=$gh"       >> "$GITHUB_OUTPUT"
          echo "Basic network: $basic; GitHub API: $gh"

      - name: 📦 Checkout (if network OK)
        if: steps.net.outputs.github_api_available == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📁 Use existing workspace (offline)
        if: steps.net.outputs.github_api_available == 'false'
        run: |
          echo "⚠️ Network limited; using current workspace"
          ls -la

      - name: 🟢 Setup Node.js
        if: steps.net.outputs.github_api_available == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: logistics-lynx/package-lock.json

      - name: 📦 Install dependencies
        if: steps.net.outputs.github_api_available == 'true'
        working-directory: logistics-lynx
        run: npm ci

      - name: 🔍 Lint & Test
        if: steps.net.outputs.github_api_available == 'true'
        working-directory: logistics-lynx
        run: |
          npm run lint
          npm run test --if-present

      - name: 🏗️ Build
        if: steps.net.outputs.github_api_available == 'true'
        working-directory: logistics-lynx
        run: npm run build

      - name: 📊 Test Summary
        run: |
          {
            echo "## 🧪 Testing Summary"
            echo "- Network: \`${{ steps.net.outputs.network_available }}\`"
            echo "- GitHub API: \`${{ steps.net.outputs.github_api_available }}\`"
            if [ "${{ steps.net.outputs.github_api_available }}" = "true" ]; then
              echo "- Lint/Test/Build: ✅"
            else
              echo "- Lint/Test/Build: ⏭️ (deferred to deploy)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  # -------------------- Deploy --------------------
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [preflight, test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Resolve configuration into env and step outputs (no expressions used in job-level env/if)
      - name: 🔧 Resolve configuration
        id: cfg
        run: |
          set -euo pipefail

          ENVIRONMENT_NAME="${{ vars.ENVIRONMENT_NAME || 'production' }}"
          APP_URL="${{ vars.APP_URL || 'https://app.example.com' }}"
          N8N_ENABLED_RAW="${{ vars.N8N_ENABLED || 'false' }}"
          N8N_BASE_URL="${{ vars.N8N_BASE_URL || '' }}"
          DEPLOYMENT_WEBHOOK_URL="${{ vars.DEPLOYMENT_WEBHOOK_URL || '' }}"

          SUPABASE_URL="${{ secrets.SUPABASE_URL || '' }}"
          SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY || '' }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY || '' }}"
          N8N_API_KEY="${{ secrets.N8N_API_KEY || '' }}"

          case "${N8N_ENABLED_RAW,,}" in true|1|yes|y) N8N_ENABLED=true ;; *) N8N_ENABLED=false ;; esac
          if [[ -n "$N8N_BASE_URL" && -n "$N8N_API_KEY" ]]; then N8N_ENABLED=true; fi

          {
            echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME"
            echo "APP_URL=$APP_URL"
            echo "N8N_ENABLED=$N8N_ENABLED"
            echo "N8N_BASE_URL=$N8N_BASE_URL"
            echo "DEPLOYMENT_WEBHOOK_URL=$DEPLOYMENT_WEBHOOK_URL"
            echo "SUPABASE_URL=$SUPABASE_URL"
            echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY"
            echo "OPENAI_API_KEY=$OPENAI_API_KEY"
            echo "N8N_API_KEY=$N8N_API_KEY"
          } >> "$GITHUB_ENV"

          echo "n8n_enabled=$N8N_ENABLED" >> "$GITHUB_OUTPUT"
          echo "deployment_webhook_url=$DEPLOYMENT_WEBHOOK_URL" >> "$GITHUB_OUTPUT"
          echo "env_name=$ENVIRONMENT_NAME" >> "$GITHUB_OUTPUT"
          echo "app_url=$APP_URL" >> "$GITHUB_OUTPUT"

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: logistics-lynx/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: logistics-lynx
        run: npm ci

      - name: 🏗️ Build Application
        working-directory: logistics-lynx
        run: npm run build

      - name: 🗄️ Setup Database (if present)
        working-directory: logistics-lynx
        run: npm run db:setup --if-present

      - name: 🔍 N8N Health Check (if enabled)
        if: steps.cfg.outputs.n8n_enabled == 'true'
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if curl -fsS "${N8N_BASE_URL}/healthz" >/dev/null; then
              echo "✅ N8N healthy"; exit 0
            fi
            echo "⚠️ n8n health attempt $i/3…"; sleep 5
          done
          echo "⚠️ Proceeding without confirmed n8n health"

      - name: 🚀 Deploy (if script present)
        working-directory: logistics-lynx
        run: |
          npm run deploy:prod --if-present || echo "ℹ️ deploy:prod not defined; skipping"

      - name: 🏥 Health Check (if script present)
        working-directory: logistics-lynx
        run: |
          npm run health:check --if-present || echo "ℹ️ health:check not defined; skipping"

      - name: 🤖 Test Agents (if present)
        working-directory: logistics-lynx
        run: |
          npm run test:agents --if-present || echo "ℹ️ test:agents not defined; skipping"

      - name: 🚀 Start Autonomous (background, if present)
        working-directory: logistics-lynx
        run: |
          npm run start:autonomous --if-present &

      - name: ⏳ Wait for Startup
        run: sleep 30

      - name: 🔎 Verify Local Health (best-effort)
        id: verify
        run: |
          ok=true
          if curl -fsS http://localhost:3000/api/health >/dev/null 2>&1; then
            echo "✅ Local health OK"
          else
            echo "⚠️ Local health endpoint not responding"; ok=false
          fi
          echo "ok=$ok" >> "$GITHUB_OUTPUT"

      - name: 📢 Notify (success)
        if: ${{ success() && (steps.cfg.outputs.deployment_webhook_url != '') }}
        run: |
          ts="$(date -u +%FT%TZ)"
          cat > payload.json <<JSON
          {
            "status": "deployed",
            "timestamp": "$ts",
            "environment": "${ENVIRONMENT_NAME}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "run_id": "${{ github.run_id }}"
          }
          JSON
          for i in 1 2 3; do
            curl -fsS -X POST "${DEPLOYMENT_WEBHOOK_URL}" \
              -H "Content-Type: application/json" \
              --data-binary @payload.json && break
            echo "retry $i/3…"; sleep 5
          done

      - name: 📢 Notify (failure)
        if: ${{ failure() && (steps.cfg.outputs.deployment_webhook_url != '') }}
        run: |
          ts="$(date -u +%FT%TZ)"
          cat > payload.json <<JSON
          {
            "status": "failed",
            "timestamp": "$ts",
            "environment": "${ENVIRONMENT_NAME}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "run_id": "${{ github.run_id }}"
          }
          JSON
          for i in 1 2 3; do
            curl -fsS -X POST "${DEPLOYMENT_WEBHOOK_URL}" \
              -H "Content-Type: application/json" \
              --data-binary @payload.json && break
            echo "retry $i/3…"; sleep 5
          done

      - name: 📊 Deployment Summary
        if: always()
        run: |
          {
            echo "## 🚀 Deployment Summary"
            echo "- Status: \`${{ job.status }}\`"
            echo "- Env: \`${ENVIRONMENT_NAME:-production}\`"
            echo "- URL: \`${APP_URL:-https://app.example.com}\`"
            echo "- Repo: \`${{ github.repository }}\`"
            echo "- Ref:  \`${{ github.ref_name }}\`"
            echo "- SHA:  \`${{ github.sha }}\`"
            echo "- Run:  \`${{ github.run_id }}\`"
            echo "- Local verify ok: \`${{ steps.verify.outputs.ok }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

  # -------------------- Monitor --------------------
  monitor:
    name: 📊 System Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: logistics-lynx/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: logistics-lynx
        run: npm ci

      - name: 📈 Start Monitoring (if present)
        working-directory: logistics-lynx
        run: npm run monitor:start --if-present || echo "ℹ️ monitor:start not defined; skipping"

      - name: ⏳ Observe
        run: sleep 60

      - name: 🏥 Final Health (if present)
        working-directory: logistics-lynx
        run: npm run health:check --if-present || echo "ℹ️ health:check not defined; skipping"

      - name: 🧾 Monitoring Summary
        if: always()
        run: |
          ENVIRONMENT_NAME="${{ vars.ENVIRONMENT_NAME || 'production' }}"
          {
            echo "## 📊 Monitoring Report"
            echo "- Status: \`${{ job.status }}\`"
            echo "- Duration: 1 minute"
            echo "- Env: \`${ENVIRONMENT_NAME}\`"
          } >> "$GITHUB_STEP_SUMMARY"
