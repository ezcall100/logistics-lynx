# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: disableContextAccess: true
# yaml-language-server: disableDefaultProperties: true
# yaml-language-server: disableAdditionalProperties: true
# yaml-language-server: validate: false
# yaml-language-server: disableSchemaValidation: true

name: 🏠 Local Code Validation

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  local_validation:
    name: 🏠 Local Code Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      # Find a project directory that contains package.json and normalize outputs
      - name: 🔎 Detect project root
        id: detect
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          CANDIDATES=("" "app" "frontend" "packages/app" "apps/web" "logistics-lynx")
          FOUND=""
          FOUND_SET=0
          for p in "${CANDIDATES[@]}"; do
            if [ -f "${ROOT}/${p}/package.json" ]; then
              FOUND="$p"
              FOUND_SET=1
              break
            fi
          done
          if [ "$FOUND_SET" -ne 1 ]; then
            echo "::error title=package.json not found::Place package.json at repo root or specify a working directory."
            exit 1
          fi

          # Normalize working directory ('.' for repo root) and cache dependency path
          if [ -z "$FOUND" ]; then
            WD="."
            LOCK="package-lock.json"
          else
            WD="$FOUND"
            if [ -f "${ROOT}/${FOUND}/package-lock.json" ]; then
              LOCK="${FOUND}/package-lock.json"
            else
              LOCK="package-lock.json"
            fi
          fi

          echo "dir=$FOUND" >> "$GITHUB_OUTPUT"
          echo "wd=$WD"     >> "$GITHUB_OUTPUT"
          echo "lock=$LOCK" >> "$GITHUB_OUTPUT"
          echo "Detected working directory: '$WD'"

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ steps.detect.outputs.lock }}

      - name: 📦 Install deps
        working-directory: ${{ steps.detect.outputs.wd }}
        run: npm ci --no-audit --no-fund

      - name: 🔧 Typecheck (if present)
        working-directory: ${{ steps.detect.outputs.wd }}
        run: |
          npm run typecheck --if-present || npm run ts:check --if-present || true

      - name: 🔍 Lint (if present)
        working-directory: ${{ steps.detect.outputs.wd }}
        run: npm run lint --if-present || true

      - name: 🧪 Test (CI, if present)
        working-directory: ${{ steps.detect.outputs.wd }}
        run: npm run test --if-present -- --ci || true

      - name: 🏗️ Build (if present)
        working-directory: ${{ steps.detect.outputs.wd }}
        run: npm run build --if-present

      - name: 📊 Validation summary
        if: always()
        run: |
          {
            echo "## 🏠 Local Code Validation Summary"
            echo ""
            echo "- **Project Root:** \`${{ steps.detect.outputs.wd }}\`"
            echo "- **Ref:** \`${{ github.ref_name }}\`"
            echo "- **Commit:** \`${{ github.sha }}\`"
            echo "- **Status:** \`${{ job.status }}\`"
            echo ""
            echo "### ✅ What we ran (best-effort)"
            echo "- Dependency install (npm ci)"
            echo "- TypeScript check if script present"
            echo "- ESLint if script present"
            echo "- Tests in CI mode if script present"
            echo "- Build if script present"
          } >> "$GITHUB_STEP_SUMMARY"
