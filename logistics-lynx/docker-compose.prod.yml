version: '3.8'

services:
  # TransBot AI MCP System
  transbot-ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transbot-ai-mcp
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MCP_AGENT_COUNT=250
      - MCP_TASK_QUEUE_SIZE=1000
      - MCP_CONFIDENCE_THRESHOLD=0.85
      - MCP_AUTO_RECOVERY=true
      - MCP_REAL_TIME_MONITORING=true
    env_file:
      - .env.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - transbot-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: transbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - transbot-network

  # PostgreSQL for local development/testing
  postgres:
    image: postgres:15-alpine
    container_name: transbot-postgres
    environment:
      POSTGRES_DB: transbot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - transbot-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: transbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - transbot-ai
    restart: unless-stopped
    networks:
      - transbot-network

volumes:
  redis-data:
  postgres-data:

networks:
  transbot-network:
    driver: bridge
