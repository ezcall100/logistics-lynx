# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: disableContextAccess: true
# yaml-language-server: disableDefaultProperties: true
# yaml-language-server: disableAdditionalProperties: true
# yaml-language-server: validate: false
# yaml-language-server: disableSchemaValidation: true

name: ü§ñ Autonomous CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]
      force:
        description: 'Force deployment even if checks fail'
        required: false
        default: false
        type: boolean
      rollback:
        description: 'Rollback to previous release'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  deployments: write
  id-token: write
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

defaults:
  run:
    shell: bash

jobs:
  guard-secrets:
    name: üõ°Ô∏è Validate Required Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Validate required config (trusted events)
        if: ${{ ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
        run: |
          set -euo pipefail

          # Pull repo vars/secrets (no defaults; we want true validation)
          ENVIRONMENT_NAME="${{ vars.ENVIRONMENT_NAME }}"
          APP_URL="${{ vars.APP_URL }}"
          STAGING_URL="${{ vars.STAGING_URL }}"
          PRODUCTION_URL="${{ vars.PRODUCTION_URL }}"
          STAGING_WEBHOOK_URL="${{ vars.STAGING_WEBHOOK_URL }}"
          PRODUCTION_WEBHOOK_URL="${{ vars.PRODUCTION_WEBHOOK_URL }}"
          STAGING_HEALTH_CHECK_URL="${{ vars.STAGING_HEALTH_CHECK_URL }}"
          PRODUCTION_HEALTH_CHECK_URL="${{ vars.PRODUCTION_HEALTH_CHECK_URL }}"
          DEPLOYMENT_WEBHOOK_URL="${{ vars.DEPLOYMENT_WEBHOOK_URL }}"
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          N8N_API_KEY="${{ secrets.N8N_API_KEY }}"

          REQUIRED="ENVIRONMENT_NAME,APP_URL"
          REQUIRED_SECRETS="STAGING_URL,PRODUCTION_URL,STAGING_WEBHOOK_URL,PRODUCTION_WEBHOOK_URL,STAGING_HEALTH_CHECK_URL,PRODUCTION_HEALTH_CHECK_URL,DEPLOYMENT_WEBHOOK_URL,N8N_API_KEY,SUPABASE_URL,SUPABASE_ANON_KEY,OPENAI_API_KEY"

          miss=()
          check() { for k in "$@"; do v="${!k-}"; if [ -z "${v:-}" ] || [ "$v" = "null" ] || [ "$v" = "undefined" ]; then miss+=("$k"); fi; done; }
          IFS=',' read -ra A <<< "$REQUIRED"; check "${A[@]}"
          IFS=',' read -ra B <<< "$REQUIRED_SECRETS"; check "${B[@]}"

          if [ ${#miss[@]} -gt 0 ]; then
            echo "::error title=Missing/empty configuration::${miss[*]}"
            exit 1
          fi
          echo "‚úÖ Config OK."

      - name: Validate required secrets (forked PR - warn only)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
        run: echo "::warning title=Fork PR::Secrets are unavailable on forked PRs. Skipping hard validation."

  lint-workflows:
    name: üîç Lint Workflows
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false
      - name: üîç Lint with actionlint
        run: |
          curl -fsSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
          ./actionlint -shellcheck= -pyflakes=
          echo "‚úÖ Workflow linting passed!"

  preflight:
    name: üîç Pre-flight Validation
    runs-on: ubuntu-latest
    needs: [guard-secrets, lint-workflows]
    timeout-minutes: 5
    outputs:
      should_deploy: ${{ steps.decider.outputs.should_deploy }}
      target_environment: ${{ steps.decider.outputs.target_environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false
      - name: üîç Decide deploy target
        id: decider
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "target_environment=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "target_environment=production" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "target_environment=staging" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
            echo "target_environment=none" >> "$GITHUB_OUTPUT"
          fi

  quality-assurance:
    name: üß™ Quality Assurance
    runs-on: ubuntu-latest
    needs: [preflight]
    if: needs.preflight.outputs.should_deploy == 'true'
    timeout-minutes: 15
    # Allow forcing past QA when manually dispatched with force=true
    continue-on-error: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - name: üì¶ Install dependencies
        run: npm ci --no-audit --no-fund
      - name: üîç Run linting
        run: npm run lint
      - name: üß™ Run tests
        run: npm run test --if-present
      - name: üîí Run security audit (non-blocking)
        run: npm audit --audit-level=moderate || true

  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: [preflight, quality-assurance]
    if: needs.preflight.outputs.should_deploy == 'true'
    timeout-minutes: 20
    continue-on-error: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - name: üì¶ Install dependencies
        run: npm ci --no-audit --no-fund
      - name: üèóÔ∏è Build application
        run: npm run build
      - name: üì¶ Package artifacts
        run: |
          mkdir -p deployment/artifacts
          tar -czf deployment/artifacts/build.tar.gz dist/ node_modules/ package*.json
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/artifacts/
          retention-days: 1

  deploy:
    name: üöÄ Autonomous Deployment
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: needs.preflight.outputs.should_deploy == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
    timeout-minutes: 30
    permissions:
      contents: write
      deployments: write
    environment:
      name: ${{ needs.preflight.outputs.target_environment }}
    steps:
      - name: Guard optional secrets (warn only)
        run: |
          echo "::warning::n8n webhook secrets may be unavailable in environment-protected jobs; notifications handled separately."

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/artifacts/

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: üì¶ Install deployment dependencies
        run: npm ci --no-audit --no-fund

      - name: üîß Resolve env + defaults
        id: resolve
        run: |
          set -euo pipefail
          TARGET="${{ needs.preflight.outputs.target_environment }}"
          # Pull values from vars/secrets + safe defaults
          STAGING_URL="${{ vars.STAGING_URL }}";                   : "${STAGING_URL:=https://staging.example.com}"
          PRODUCTION_URL="${{ vars.PRODUCTION_URL }}";             : "${PRODUCTION_URL:=https://production.example.com}"
          STAGING_WEBHOOK_URL="${{ vars.STAGING_WEBHOOK_URL }}";   : "${STAGING_WEBHOOK_URL:=https://staging.example.com/webhook}"
          PRODUCTION_WEBHOOK_URL="${{ vars.PRODUCTION_WEBHOOK_URL }}"; : "${PRODUCTION_WEBHOOK_URL:=https://production.example.com/webhook}"
          STAGING_HEALTH_CHECK_URL="${{ vars.STAGING_HEALTH_CHECK_URL }}"; : "${STAGING_HEALTH_CHECK_URL:=}"
          PRODUCTION_HEALTH_CHECK_URL="${{ vars.PRODUCTION_HEALTH_CHECK_URL }}"; : "${PRODUCTION_HEALTH_CHECK_URL:=}"
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}";              : "${SUPABASE_URL:=https://placeholder.supabase.co}"
          SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}";    : "${SUPABASE_ANON_KEY:=placeholder-key}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}";          : "${OPENAI_API_KEY:=placeholder-key}"

          if [[ "$TARGET" == "production" ]]; then
            APP_URL="$PRODUCTION_URL"
            HEALTH_URL="$PRODUCTION_HEALTH_CHECK_URL"
            WEBHOOK_URL="$PRODUCTION_WEBHOOK_URL"
          else
            APP_URL="$STAGING_URL"
            HEALTH_URL="$STAGING_HEALTH_CHECK_URL"
            WEBHOOK_URL="$STAGING_WEBHOOK_URL"
          fi

          {
            echo "TARGET_ENV=$TARGET"
            echo "APP_URL=$APP_URL"
            echo "SUPABASE_URL=$SUPABASE_URL"
            echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY"
            echo "OPENAI_API_KEY=$OPENAI_API_KEY"
            echo "STAGING_URL=$STAGING_URL"
            echo "PRODUCTION_URL=$PRODUCTION_URL"
            echo "STAGING_WEBHOOK_URL=$STAGING_WEBHOOK_URL"
            echo "PRODUCTION_WEBHOOK_URL=$PRODUCTION_WEBHOOK_URL"
            echo "STAGING_HEALTH_CHECK_URL=$STAGING_HEALTH_CHECK_URL"
            echo "PRODUCTION_HEALTH_CHECK_URL=$PRODUCTION_HEALTH_CHECK_URL"
            echo "HEALTH_URL=$HEALTH_URL"
            echo "DEPLOY_WEBHOOK_URL=$WEBHOOK_URL"
          } >> "$GITHUB_ENV"

      - name: üöÄ Run autonomous deployment
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "üîÑ Rolling back to previous release..."
            node deployment/autonomous-deployment-system.js --rollback "$TARGET_ENV"
          else
            echo "üöÄ Deploying to $TARGET_ENV..."
            node deployment/autonomous-deployment-system.js "$TARGET_ENV"
          fi

      - name: üè• Post-deploy smoke check
        if: ${{ github.event.inputs.rollback != 'true' }}
        timeout-minutes: 2
        run: |
          set -euo pipefail
          if [[ -n "${HEALTH_URL:-}" ]]; then
            echo "üîç Checking: $HEALTH_URL"
            curl -fsS --retry 3 --retry-all-errors --max-time 15 "$HEALTH_URL" >/dev/null
            echo "‚úÖ Smoke check passed"
          else
            echo "‚ö†Ô∏è No health check URL configured, skipping"
          fi

      - name: üì§ Upload deployment logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs-${{ github.run_id }}
          path: deployment/logs/**
          if-no-files-found: ignore
          retention-days: 7

  health-check:
    name: üè• Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [preflight, deploy]
    if: needs.preflight.outputs.should_deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: üîß Resolve health URL
        id: resolve
        run: |
          TARGET="${{ needs.preflight.outputs.target_environment }}"
          STAGING_HEALTH_CHECK_URL="${{ vars.STAGING_HEALTH_CHECK_URL }}"
          PRODUCTION_HEALTH_CHECK_URL="${{ vars.PRODUCTION_HEALTH_CHECK_URL }}"
          if [[ "$TARGET" == "production" ]]; then
            echo "HEALTH_URL=$PRODUCTION_HEALTH_CHECK_URL" >> "$GITHUB_ENV"
          else
            echo "HEALTH_URL=$STAGING_HEALTH_CHECK_URL" >> "$GITHUB_ENV"
          fi

      - name: üè• Run health checks
        run: |
          set -euo pipefail
          if [[ -n "${HEALTH_URL:-}" ]]; then
            echo "üè• Checking: $HEALTH_URL"
            curl -fsS --retry 3 --retry-all-errors --max-time 20 "$HEALTH_URL" >/dev/null
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è No health check URL configured"
          fi

  n8n-notifications:
    name: üì£ n8n Webhook Notifications
    runs-on: ubuntu-latest
    needs: [preflight, deploy, health-check]
    if: always()
    timeout-minutes: 5
    steps:
      - name: üì£ Notify n8n webhook (deployment)
        run: |
          N8N_WEBHOOK_URL="${{ secrets.N8N_WEBHOOK_URL }}"
          N8N_WEBHOOK_SECRET="${{ secrets.N8N_WEBHOOK_SECRET }}"
          APP_URL="${{ vars.APP_URL }}"
          TARGET="${{ needs.preflight.outputs.target_environment }}"
          STATUS="${{ needs.deploy.result }}"
          if [[ -z "$N8N_WEBHOOK_URL" || -z "$N8N_WEBHOOK_SECRET" ]]; then
            echo "n8n deployment notification skipped: secrets not configured"; exit 0; fi
          set -euo pipefail
          ts="$(date -u +%FT%TZ)"; idem="${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-deploy"
          cat > payload.json <<JSON
          {"event":"deployment","status":"$STATUS","repo":"${{ github.repository }}","sha":"${{ github.sha }}","ref":"${{ github.ref_name }}","run_id":"${{ github.run_id }}","run_attempt":"${{ github.run_attempt }}","environment":"$TARGET","app_url":"$APP_URL","should_deploy":"${{ needs.preflight.outputs.should_deploy || 'false' }}","target_environment":"${{ needs.preflight.outputs.target_environment || 'n/a' }}","timestamp":"$ts"}
          JSON
          sig="$(openssl dgst -sha256 -hmac "$N8N_WEBHOOK_SECRET" -binary payload.json | base64)"
          curl -fsS --retry 5 --retry-all-errors --max-time 20 \
            -H "Content-Type: application/json" \
            -H "X-Idempotency-Key: ${idem}" \
            -H "X-Signature-256: sha256=${sig}" \
            --data-binary @payload.json \
            "$N8N_WEBHOOK_URL"

      - name: üì£ Notify n8n webhook (health check)
        run: |
          N8N_WEBHOOK_URL="${{ secrets.N8N_WEBHOOK_URL }}"
          N8N_WEBHOOK_SECRET="${{ secrets.N8N_WEBHOOK_SECRET }}"
          APP_URL="${{ vars.APP_URL }}"
          TARGET="${{ needs.preflight.outputs.target_environment }}"
          STATUS="${{ needs.health-check.result }}"
          if [[ -z "$N8N_WEBHOOK_URL" || -z "$N8N_WEBHOOK_SECRET" ]]; then
            echo "n8n health notification skipped: secrets not configured"; exit 0; fi
          set -euo pipefail
          ts="$(date -u +%FT%TZ)"; idem="${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-health"
          cat > payload.json <<JSON
          {"event":"health_check","status":"$STATUS","environment":"$TARGET","app_url":"$APP_URL","run_id":"${{ github.run_id }}","run_attempt":"${{ github.run_attempt }}","timestamp":"$ts"}
          JSON
          sig="$(openssl dgst -sha256 -hmac "$N8N_WEBHOOK_SECRET" -binary payload.json | base64)"
          curl -fsS --retry 5 --retry-all-errors --max-time 20 \
            -H "Content-Type: application/json" \
            -H "X-Idempotency-Key: ${idem}" \
            -H "X-Signature-256: sha256=${sig}" \
            --data-binary @payload.json \
            "$N8N_WEBHOOK_URL"

  summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [preflight, quality-assurance, build, deploy, health-check, n8n-notifications]
    if: always()
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: üìä Generate deployment summary (console)
        run: |
          echo "üöÄ TMS Autonomous Deployment Summary"
          echo "=================================="
          echo ""
          echo "üìÖ Deployment Time: $(date)"
          echo "üîó Repository: ${{ github.repository }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo ""
          echo "üéØ Target Environment: ${{ needs.preflight.outputs.target_environment }}"
          echo ""
          echo "üìã Job Results:"
          echo "  üîç Pre-flight: ${{ needs.preflight.result }}"
          echo "  üß™ Quality Assurance: ${{ needs.quality-assurance.result }}"
          echo "  üèóÔ∏è Build: ${{ needs.build.result }}"
          echo "  üöÄ Deployment: ${{ needs.deploy.result }}"
          echo "  üè• Health Check: ${{ needs.health-check.result }}"
          echo ""
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed"; exit 1
          fi

      - name: üßæ Rich Job Summary
        if: ${{ always() }}
        run: |
          {
            echo "## üöÄ TMS Autonomous Deployment Summary"
            echo ""
            echo "- **Ref**: \`${{ github.ref_name }}\`"
            echo "- **Commit**: \`${{ github.sha }}\`"
            echo "- **Environment**: \`${{ needs.preflight.outputs.target_environment }}\`"
            echo "- **Decision**: \`${{ needs.preflight.outputs.should_deploy }}\`"
            echo "- **Status**: \`${{ job.status }}\`"
            echo ""
            echo "### üìã Job Results"
            echo "- üîç Pre-flight: \`${{ needs.preflight.result }}\`"
            echo "- üß™ Quality Assurance: \`${{ needs.quality-assurance.result }}\`"
            echo "- üèóÔ∏è Build: \`${{ needs.build.result }}\`"
            echo "- üöÄ Deployment: \`${{ needs.deploy.result }}\`"
            echo "- üè• Health Check: \`${{ needs.health-check.result }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: üí° Local Development Tip
        if: ${{ always() }}
        run: |
          echo "üí° For local testing, try:"
          echo "   act push -P ubuntu-latest=catthehacker/ubuntu:act-latest"
          echo "   act workflow_dispatch -e .github/workflows/autonomous-ci-cd.yml"
